
.TH Gdbsites 2G G-language
.SH NAME
Gdbsites - RIM data base management/query interface for GRASS
.br
.SH SYNOPSIS
\fBGdbsites\fR
.I data_base
.SH DESCRIPTION
.I Gdbsites
allows you to create, manage and query information about site
locations (sites) across the landscape in a batch mode or
interactively, with input in a command line style.  Operations are done
on a data base through a command language defined below. The program
.B dbsites
performs many of the same functions in a friendly, menu-driven
format.  These programs are actually a marriage of the GRASS environment
and the programmer's interface library of the relational data base
management program RIM distributed publically by the University of
Washington Academic Computing Services.
.LP
The site data bases are stored in a subdirectory named 'rim/sites' in the
user's current mapset.  Data bases in other mapsets, selectable through
the GRASS mapsets command, can be accessed for 'read-only' retrieval of
records.  Each mapset may have many data bases.  Each data base within
a mapset must have a different name; user supplied names are limited to
seven (7) characters in order to maintain compatibility with the
standard version of RIM.  As with other GRASS commands, mapsets are
searched in the mapset SEARCH_PATH order when a data base needs to be
opened.
.LP
Each site data base is composed of multi-field records (rows or tuples,
in DBMS jargon).  Each field and its position in the site form is
defined via input to the .make command when a data base is originally
defined.  It is possible to add new fields or change the length of
existing fields after data has been loaded, however this is not
straightforward; deleting of fields is also possible, but requires even
more experience and knowledge.  The user needs to carefully design the
data base fields and form and check the operation with a few pieces of
test data before loading a large number of sites.
.SH COMMANDS
The commands are given alphabetically here for easy reference. The .make
command is required to create a data base and, therefore, will be
the first to be entered by a new user.  Abbreviations down to the
string shown in ( ) are accepted; this is primarily for those using
.I Gdbsites
from a terminal, but abbreviations may also be used in batch
files.
.LP
Each command is introduced with an input record (line) which starts
with a period and is followed by one of the words shown below; for some
commands the command line also contains one or more required or
optional parameters.  Additional or optional input instructions/data
for a command is supplied on successive lines; a .end line is needed by
some commands to signify the end of these lines.

.ce
.B "Alphabetical Command Summary"

.IP "\fI!command\fR"
This is the only
.I Gdbsites
command not starting with a period.
"command" is a single shell command line which is executed by a
"G_system()" call (see GRASS gis library).  Many UNIX
utilities (e.g., vi, ls, print, etc.)
and most GRASS commands (e.g., Dcell, Dpoints, list, window, mask, etc.)
may be executed within a single run of
.I Gdbsites.
(It is permitted to change "window" and "MASK" within
.I Gdbsites.
) Multiple commands may be separated
by ";" in the standard UNIX way.  Note that a "!cd directory; ls" will
change to the specified directory and list files, but the effective
working directory for
.I Gdbsites
will not be changed when the command
terminates.
.IP "\fI.add (.a)\fR"
Add a new site record (row) to the open data base.  Each line
following contains a field name followed by spaces and/or tabs then the
value or character string to store for that field.  Field information
lines end with .end.  Some fields may be absent and fields may appear
in any order.  Checks are made for the input of data for the one required
field (site number), for string length for string type fields, and for
duplicate site numbers.  If split fields are used in the data base
layout (see .make), text data for each split field must be added as a
separate line.  If there are any problems, the record will not be
stored and a message will be output.  This format makes it relatively
easy to import data from most other DBMS.  The ".print -a" command, see
below, outputs data in this list format.
.NF
.in +5

Example:
 .add
 site_id   204
 north     4690673.30
 east      601410.00
 reference Jones (1987)
 .end
.in -5
.FI
.IP "\fI.backup (.b) file_name\fR"
The .backup command is used to dump the entire data base from the
RIM binary files to a text file format (see UNLOAD in the RIM User's
Manual).  The file_name can be a relative path name or full path name.
The file will contain the data base definition, screen layout
information, and tabular data.  This text file is transportable to RIM
or
.I Gdbsites
running on any other computer; it may also be reloaded to
recreate the
.I Gdbsites
data base.  A message will be output if there is
any problem writing the .backup file.  Backup can only be done on data
bases in the user's current mapset.

To reload your data base from the backup file (normally not
necessary):

.NF
.in +5
GRASS> cd $LOCATION/rim     #right directory
GRASS> rm db_name.rimdb*    #remove data base
GRASS> rim                  #run RIM manually
RIM> input "path/file"      #RIM rebuilds data base
RIM> exit
.in -5
.FI
.IP "\fI.change (.c)\fR"
Each line following .change is in the same format as for the .add
command.  The site number field is required and the site number must
match an existing site in the data base.  Only those fields for which lines
are provided are changed in the record.  After the .end the changed
record is stored, if all is ok, otherwise a message is output.
.IP "\fI.delete (.d)\fR"
This command is used to delete data records for sites.  The lines
following the command should contain only the site numbers, with a .end
line being last.  Deletion of sites is permanent.  A backup of the
data base is the way to protect your valuable data.  The following command
sequence will delete all the sites currently on the internal site list
(the result of the last .query or .find command) after asking for
approval.

.in +5
 .delete
 .end
.in -5
.IP "\fI.end (.e)\fR"
Ends multi-line input for several other commands.
.IP "\fI.exit (.ex)\fR"
Use .exit to end operation of
.I Gdbsites
cleanly.  In general, do
not use CTRL-C to exit unless absolutely necessary.  When .exit is
encountered in a batch file, input will revert back to the previous
file, or the terminal, if any, which called the batch file.
.IP "\fI.find (.f) [mask | window]\fR"
The .find command is used to find the site(s) closest to a given
point (the target).  The target can be defined
in one of several ways.  The found sites are stored on an
internal sites list for output by other commands; however, see note 2,
below.  The found sites are stored on the internal sites list in order
of proximity to the target location.  The optional .find command line
parameter specifies the current MASK, if any,
or the current window, as a filter on the retrieved sites.

The single required line following the .find line gives the program
the necessary target information.  The following examples show the
possibilities.

.in +5
find> 602793.90 4379010.00

.in -5
will find the one site nearest these coordinates and store
it on the internal site list.
.in +5

find> 619840 4599000 10
.in -5

will find the 10 sites (or fewer, if there are not that
many) closest to the given location.
.in +5

find> site 132 10
.in -5

will find the 10 sites closest to the location of site 132
in the data base (including site 132).  If site
132 does not exist, no action is taken.
.in +5

find> distance from 472910.06 5732001.0 5000
.in -5

will find all sites within 5000 (meters, in UTM coordinates)
of the target location.
.in +5

find> distance from site 16 -2500
.in -5

will find all sites greater than 2500 (meters) from the
location of site 16.

Notes for .find:

1.  All sites found are stored on the site list in order of proximity
to the target location (sorted by distance from target).

2.  The number of sites found is automatically printed to the active
output device/file.

3.  If mask is specified, the effective window is automatically set to
the current window (because the GRASS mask is only defined for the
current window).

4.  Window and mask filtering uses the current resolution for the
window to test if a point falls within a cell in the masking map.

5.  In the last two examples the string "distance from" must be exactly
matched.  Also, the word "site" must be exactly matched.

6.  If the "distance from" radius is given as a negative value, points
outside the target circle are selected; whereas, if a positive value is
given, points inside the circle are selected.

7.  The current window may be changed
with !Gwindow... or !window or !d.window prior
to doing a .find, and the mask may be set or removed with a variety of
GRASS commands.

8.  The "find>" prompt is given only when input is from a terminal.
.IP "\fI.help (.h)\fR"
Prints a help screen to the output device or file.  Useful to have
when using
.I Gdbsites
from a terminal, or when writing a script file of commands.
.IP "\fI.input (.i) [file]\fR"
The lines in the file given are read and processed as commands or
data until an end of file is reached or until a .exit command is
found.  Input files may call other input files to a nesting depth of
eight.  Without a file name stdin is used as the nested input file.
.IP "\fI.list (.l)\fR"
Lists the available data bases in the current mapset search path.
.IP "\fI.make\fR"
Using the .make command you create a new data base in the current
mapset by specifying the following items which define the screen (page)
layout for displaying and printing the site records, as well as the
information fields:

.in +5
1)  The fixed text part of the screen layout.
.br
2)  The positions, types, and lengths of data fields.
.in -5


Three fields must always exist in a data base; each
of these field types may only occur once in a data base layout:

.in +5
1) Type 's'  Site identification number field (an integer).
.br
2) Type 'x'  Easting coordinate of the site (a double float).
.br
3) Type 'y'  Northing coordinate of the site (a double float).
.in -5

The other field types, which may occur in any combination and
order, are:

.NF
.in +5
4) type 'i'  An integer field.

5) type 'f'  A double precision float field.
             (always 2 decimal places used for output)

6) type 't'  A text field.
.in -5
.FI

Each of the fields can be positioned anywhere within the screen
layout, which has a limit of 19 lines by 80 columns.  A maximum of 70
fields may be defined within this space.  A field is specified in the
screen layout by a tilde (~), a field type character, a field name and
enough trailing tildes to fill out the desired field length.

Each line following the .make command is taken to define a line of
the screen layout until a .end is reached.  If a mistake is made on any
of the input lines, the .make will fail.  The .make information may be
prepared in advance as a text file (this facilitates fixing mistakes)
and the .input command can be used to read in this file.  An example
text file for a data base screen layout follows, with some explanatory
notes and restrictions.

.NF
 .make
              Archaeological Sites Database
              =============================

 Site #: ~sSite~~~      Entered By: ~tEnter_by~~~~~~~~
 Description:                     C-14 Date:  ~iAge~~~
     ~tDescript.1~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     ~tDescript.2~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     ~tDescript.3~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 Type:  ~tType~~~~~~~~~~~~~ (Should be Arch. or Hist.)
 Date:  ~tEnter_Date~~~~~~~
 North: ~yNorth~~~~~    East: ~xEast~~~~~~
 .end
.FI

Notes:

1)  Any text not preceded by a tilde (~) character is taken to be
part of the constant or fixed text portion of the form.

2)  A field definition begins with a tilde (~) character
immediately followed by a single character which indicates the data
type of the field (s,x,y,i,f or t).  Immediately following the data
type character is the field name of 1 to 16 characters.  Field names
can be composed of any characters from the following
set: [A-Z,a-z,_,0-9];
the RIM program and library do not distinguish upper and lower case in
field names, so you should avoid making names which differ only in
case.  Field names may not begin with a numeral [0-9].
The rest of the field length is padded with tilde (~)
characters to the requied maximum length.

3)  The minimum field width is three characters; e.g., "~tA".  Be
sure field widths for all fields are wide enough for the values and
strings you expect to store there; e.g., UTM northings require at least
11 spaces.

4)  For text fields it is possible to continue a field across more
than one line.  This is done by appending a .1 to the field name
forming first portion of this "split field", a .2 for the second
portion, etc.  This text field splitting affects how information is
organized for input and output; the composite text string is
concatenated (unused portions of fields are retained as spaces) and
treated as a unit for storage and queries to the data base.
.IP "\fI.output (.o) [file or | process]\fR"
Causes all output (except some error messages) from
.I Gdbsites,
including that from the .print command, to go
to the named path/file (may be a full or relative path name),
or to be used as standard input by the process
(a pipe).  If no parameter is given, output returns to stdout,
usually the user's terminal.  An example of the pipe usage would be
.NF
      .output | grep "easting" | wc -l > /tmp/my_count
.FI
A pipe is closed whenever the .output command is given again, or
on a .exit command.
.IP "\fI.pack (.pa)\fR"
This should be used when numerous data records have been deleted or
changed to recover disk space in the RIM binary data base files.  It
works by doing a .backup to a temporary file; moving the data base
files to new names (*.bakdb*); running RIM to rebuild the data base;
and, if the rebuilt data base can be opened and read, the temporary
files are deleted.  The user is informed if this process fails.  Packing
can only be done on an open data base located in the user's current mapset.
.IP "\fI.print (.p) [-a | -l] \fR"
This command outputs the full site records for the sites currently
stored on the internal sites list (result of last .query or .find).
Without the flag, the screen layout format is used.  With the -l flag,
for list format, the field name followed
by the contents are output one field per line.
The -a flag also outputs in the list format but with a .add line
and a .end line surrounding each site record printed; data files in this form
can be read with .input, thus they form one kind of backup mechanism and
can be used to transfer data (not the data base layout) from one GRASS
system to another.  The destination
for the output is set by a previous .output command (default is stdout).
.IP "\fI.query (.q) [mask | window]\fR"
The .query command is used to retrieve sites via an SQL-like
request to RIM, including a user specified "where clause." All
fields for each site meeting the selection criteria are retrieved.

The optional .query command line parameters cause points not in
the window and/or mask to be rejected, so these conditions need not be
tested in the "where clause."

After the query command line, any number of lines may be entered
to define the SQL "where" clause.  A .end line is required to finish
the request and begin data retrieval.  See examples below.

The "distance from" clause may also be used as additional
selection criteria exactly as described in the examples
and notes for .find.  It must be entered as a separate line
to the query prompt.

The retrieved records may be printed at time of retrieval, rather than
after the completion of the query command by including a .print (.p)
line with the same options for print format as in the .print command
(see above); e.g. .p -a to output in the "list add" format.  The .print
clause must be entered as a separate line to the query prompt.  This
feature is most useful when working with very large data bases where
retreval time is significant.  See example 2 below.

Example 1

.in +5
query> where density < 20 and (date = "10/14/89"
.br
query> or county eq "San Marcos")
.br
query> .end
.in -5

Example 2

.in +5
query> where east <600000 and name like "*Jones*"
.br
query> distance from site 12 3000
.br
query> .print -a
.br
query> .end
.in -5

Example 3

.in +5
query>.end
.in -5

The where and distance from clauses are each optional.  If both are
omitted, only the mask and window on the .query command line restrict
the search; if mask and window are also omitted, all sites will be
retrieved (Example 3).  When querying for sites the where clause is
processed first, the current window and mask tested (if requested),
then the distance from clause is applied; a site must pass all tests to
be put on the internal site list for output by other commands.

Notes:  (Also see Notes for .find)

1.  The retrieved sites are stored on the internal site list in the
order returned from the data base by RIM, not necessarily in site
number order or the order the data was loaded.  A "distance from" clause
results in a final sorting by proximity to target.

2.  See the RIM User's Manual for additional information on the "where"
clause in the "select" command, especially the quotes required for
matching character string fields, and the allowed comparison operators.

3.  In the where clauses of the examples, "density", "date", "county",
east", and "name" are field names (column names in RIM) defined when
the user initially makes the data base.

4.  Each .query or .find resets the internal site list (even unsuccessful
ones).
.IP "\fI.read_site (.re) site_list\fR"
This command reads an existing GRASS site list and creates a
data base record for each site. If the comment or description field of
all entries in the site list begin with # and a number, the number
becomes the site number in the data base.  If some of the sites
in the GRASS site list do not have a # at the beginning of the comment
field, the sites are numbered sequentially starting with 1.  (These
options are similar to the way the GRASS sites.to.cell works.)  If the
site number duplicates one already in the data base or found earlier in
the site list, it is not added.

Once the sites have been loaded by .read_site,  use .change
to add data to other fields for those sites.
.IP "\fI.remove\fR"
This command, which requires a "y" as confirmation on the next
line, entirely removes the three binary files which constitute your RIM
data base.  Use with care.  Backup files must be removed individually
by the user, if desired.
.IP "\fI.show (.sh)\fR"
This command is used to output the screen or page layout as defined
for the current data base.  It serves as documentation of the data base
definition and as a reminder for field names, types and lengths.  By
using an editor to surround the output of .show with .make and .end
lines, it can be used to reload the data base definition with .input.
.IP "\fI.site_list (.si) file_name [field_name]\fR"
This command writes the site locations and the site numbers to the
specified file in the site_list directory in the current mapset.  If
the file exists, the sites are appended to the current list, otherwise,
a new site list file is created.  A "field name" may be optionally
specified; if so, the contents of that field (retrieved from the
appropriate site record) are inserted as the comment (following a '#')
in the site list.  The site number is used if no field name is
supplied.

A line is inserted in the site_list file with the current
date and time and the name of the data base producing the site
locations.  The format used for each site is:

.in +5
easting|northing|#comment
.in -5
.IP "\fI.tables (.t)\fR"
Prints the table structure of the currently opened RIM data base.
This is the same output generated by a "list *" command when running
RIM manually.  The information for the table named "data" is useful for
review of the user's field definitions.  The information for the two
other tables is for internal use by
.I Gdbsites.
.SH NOTES
.PP
1.  A "date" type field should be added to future versions.  This
version only allows storing of dates as strings (unless the user codes
them to integers), and thus only string type searches can be made for
dates.
.SH SEE ALSO
dbsites[1]
.br
RIM User's Manual by Jim Fox, Academic Computing Services, Univ. of
Washington.  See especially Appendix B on redistribution of RIM.
.SH AUTHORS
David Satnik and James Hinthorne, GIS Laboratory, Central Washington
University.

