--------------------------------------------------------------

$Id$

--------------------------------------------------------------

How to release GRASS binaries and source code

Note: This text contains some rules only applicable to the development
      coordinator (currently Markus Neteler).

--------------------------------------------------------------

General methodolgy: call for release - pre-testing - bug fixes - publish


0. Prepare to create a release

   o Create a branch on CVS for creating a release (call it bugFixes or
     something). All code for the stable release will come from this branch.
     
   o Unstable modules are commented out of the src/CMD/lists/GRASS file.

   o Make a list of bugs that we would like to see fixed for the release
     (probably the RC list in BUGS)

   o Request that developers claim any of these bugs that they think they
     can fix on RT

   o After a few days or a week, any remaining bugs are left for the next
     release - if nobody claims them they obviously won't be fixed

   o The only commits to the release branch are *minor* bug fixes (not
     necessarily only those claimed) - other developments are committed to
     the MAIN branch. Any *major* bug fixes require consensus from the
     developers and/or approval from Markus to commit to the release branch.
     
   o < need a detailed description of how to commit a bug fix but could include
       the following > 
     
     o All bug fixes should include "Release bug fix:" at the start of each log
       message for easy monitoring of committed code. That is, any code
       committed without this phrase at the start of the log message will
       be backed out.
       
     o All developers who subscribe to the commit list (should
       list both names and email addresses) should take responsibility for
       monitoring the code committed to the release branch.
     
     o Tag the code both before AND after you make your changes < need more
       here to describe what to tag etc >

   o Once all claimed bugs are fixed, tag this branch as pre release 1
     and start the pretest phase

1. Add disclaimer to all mails to be sent to the pre-testers:

   ------------------
   GRASS 5 beta DISCLAIMER: WARNING
   This pre-release of GRASS 5 is in alpha-quality only. The
   pre-release is intended to find critical bugs which would
   cause problems in the later official release. All pre-testers
   may submit bug reports and comments immediately to allow
   the new official release to be published as soon as possible.
   Please read the BUGS file to see unresolved bugs.
   Use the bug report form to report bugs:
   http://www.geog.uni-hannover.de/grass/bugtracking/bugreport.html 

   Unless the pre-testing phase isn't finished, no official release
   is possible.
   ------------------

   This displaimer shall lower the expectations and make the users
   recall that they are using beta software not yet announced to be
   stable.

   List of pre-testers:
   See ./pretesters.txt
   (find more!)
   And send them the pretesting_grass.txt file (improvements?)


2. while GRASS_PRE=unstable do

     a) send (new) source/binary tarball to pre-testers
     b) receive comments/bug reports
     c) fix *only* these bugs, no other commits allowed in release branch
     d) if no (more) complaints
          GRASS_PRE=stable
   done

3. Proceed to publishing by publishing the code in the release branch.
   See the sections below for details

4. Fix any bugs reported by users and release a bug-fix version (eg version
   5.0.0 is released, bugs are found and fixed, release version 5.0.1)

5. At some point Markus decides there will be no more releases for this
   version, the release branch is considered dead, and changes are merged into
   the main branch. Note that merges could be made throughout this process to
   the main branch but merging from the main branch to the stable branch is not
   allowed at any time.

6. One of the keys to this scheme is cooperation among the developers.
   Basically the developers have to concentrate on fixing bugs, but those
   who cannot fix bugs can still commit features if they wish. Another key
   is that the developers should ask Markus if their new code can be
   committed to the bug fix branch before committing it, especially if they
   are not sure if it should or not. Finally, this will work well if the
   time period for the branch to exist is relatively small. That is, the
   changes to MAIN are minimal so that merging the branch back is not a
   big hassle.

--------------------------------------------------------------

Create source and binary distributions:

0. Create the source code tarball: Markus

   o Check version string:
       src/CMD/VERSION

   o Markus:
     Check if no M/C CVS conflicts have been there before tagging.

   o Markus:
     Update the PDF-docs on server (needs "htmldoc" tool):
       ftp://ftp.funet.fi/pub/mirrors/ftp.easysw.com/pub/htmldoc/

       gmake5 html/ pdf-docs

     upload result from dist.$ARCH/documents/pdf to GRASS web server,
     remove here (makes binaries too big).
 
   o Create source tarball and store in
     http://www.geog.uni-hannover.de/grass/grass5/source/

1. Generally the binaries shall be produced from the published
   source code tarball above. Get this tarball and unpack it in
   a NEW directory.

2. Build GRASS:
 
   o compile everything, incl NVIZ without PG:
       configure --enable-postgres=no
       make
     
   o compile G3D tools
       gmake5 src.contrib/GMSL/g3d

   o compile PostgreSQL modules:
       configure --enable-postgres=yes
       make pre-compile
       gmake5 src.garden/grass.postgresql

   o Markus:
     compile s.vol.rst from extra directory (if you have..., it is not 
     distributed with sources)

   o check, if libgdal is in place in $GISBASE/lib/
     It is highly recommended to get the GDAL CVS version:
       export CVSROOT=:pserver:anonymous@cvs.remotesensing.org:/cvsroot
       cvs login
       Password: anonymous
       cvs checkout gdal
     Precompiled GDAL:
      Get Linux version here:
       ftp://gdal.velocet.ca/pub/outgoing/libgdal-linux-grass.tar.gz
       (Note: check ldd libgdal.1.1.so dependency, get if required:
       ftp://gdal.velocet.ca/pub/outgoing/libstdc++-libc6.2-2.so.3)
      Other precompiled libgdal versions:
       http://gdal.velocet.ca/projects/grass/index.html
      Get GDAL sources at:
       http://www.remotesensing.org/gdal/
     
   o Run again
       gmakelinks5
     or 
       gmakelinks5 |wc -l
   
     Should be > 400 modules.

   o Finally run
     make install


3. Package GRASS bins with

    make bindist

4. Upload grass5x_y_bin.tar.gz AND grass5install.sh to ftp site in
   Germany (ftp 130.75.72.36 - store in incoming directory)

--------------------------------------------------------------

Publish the new official GRASS 5 release:

1. Publish it on web site:
   - grass5x_y_bin.tar.gz
   - grass5install.sh

   - grass5x_y_src.tar.gz


2. Tell others about it:
   - related announcement press release at:

   Our GRASS web site: /announces/

   news:comp.infosystems.gis
   http://spatialnews.geocomm.com/dailynews/
   http://spatialnews.geocomm.com/submitnews.html (Free News Posting Service)
   http://freshmeat.net/projects/grass/?highlight=GRASS
   http://www.remotesensing.org/submit/submit.php3
   http://www.newsforge.com/submit.pl
   http://osx.macnn.com/
   http://www.gis-news.de/

   ... where else?
