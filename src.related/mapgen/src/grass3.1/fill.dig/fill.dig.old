#!/bin/sh
CHECK.MAP
if test $? = 1
	then
	exit
fi
tput clear
proj=`grep proj: $LOCATION/WIND | awk '/proj:/ {print $2}'`
if test $proj != 1 -a $proj != 4
        then
        echo ERROR: unable to process projection $proj
        exit
fi
zone=`grep zone: $LOCATION/WIND | awk '/zone:/ {print $2}'`
if test ! -d fills
        then
        mkdir fills
fi
if test ! -d cat
        then
        mkdir cat
fi
if test ! -d legend
        then
        mkdir legend
fi

############# GET DIG FILE ###############################################
Gask old "" dig "" tmp
. tmp
rm tmp

########### GET NAME FOR THIS FILL #######################################
while test "$out" = ""
do
echo -n "Enter the name for this fill overlay: "
read out
if test -f fills/$out
	then
	echo -n "Fill $out exists. Do you want to redo it [y]es (n)o: "
	read answ
	if test "$answ" = "n"
		then
		out=""
	fi
fi
done

############## GET PATTERNS ##############################################
answ=l
echo "Enter the list of the patterns to use or [l] to list the choices end with a ."
while test "$answ" = "l"
do
echo -n ": "
read answ
if test "$answ" = "" -o "$answ" = "l"
        then
	answ=l
        ls -x $GRAPH/etc/pattern 2> /dev/null
elif test "$answ" = "."
	then
	answ=
elif test ! -f $GRAPH/etc/pattern/$answ
	then
		echo Error pattern $answ not found
		answ=l
else
		pat=`echo "$pat $answ"`
		answ=l
fi
done

echo -n 'Enter the pen number to use [1]: '
read pen
if test "$pen" = ""
	then
	pen=1
fi

echo -n 'Enter the name of the map definition file [map.def]: '
read map
if test "$map" = ""
        then
        map=map.def
fi

################### GET CATEGORIES TO FILL ##########################
tput clear
cattype=i
if test -f cat/$out
	then
	rm cat/$out
fi
while test "$cattype" != "d" -a "$cattype" != "n"
        do
        echo -n 'Select areas by category (d)escription or [n]umber: '
        read cattype
	cattype=${cattype:-n}
        if test "$cattype" = "d"
                then
                Gask old "" dig_cats "" tmp
                fi
        done
echo
while test "$select" != "n" -a "$select" != "t" -a "$select" != "f"
        do
        echo 'How do you want to enter the categories? Enter:'
        echo f -- to read from a file
        echo t -- to be prompted
        echo n -- to select the first category
        echo
        echo -n 'Enter (f)ile, (t)ype, (n)o: '
        read select
        done
i=0
if test $select = t
        then
        echo Enter the categories one per line end with a .
        while test 1
                do
                echo -n :
                read cat
                echo $cat >> cat/$out
                if test $cat = '.'
                        then
                        break
                fi
                i=`expr $i + 1`
                done
elif test $select = f
        then
        echo -n 'Enter file name: '
        read fil
        cp $fil cat/$out
else 
        echo -n > cat/$out
fi
if test $cattype = d
        then 
        cattype=`tr -d "'" < tmp | awk -F= '/file/ {print $2}'`
        rm tmp  2> /dev/null
        rm $out.tmp 2> /dev/null
        prev=""
        for i in `cat cat/$out`
        do
        nm=`grep "$i" cat/$out| tail -1`
        if test "$nm" != "$prev"
                then
                echo $nm
                egrep ":$nm:" $cattype | awk -F: '{print $1}' >> $out.tmp
                prev=$nm
        fi
        done
        mv $out.tmp cat/tmp
else
	cattype=""
	cp cat/$out cat/tmp
fi
i=`wc -l  < cat/tmp`

if test $i -gt 0
        then
	i="-S $i"
else
	i=""
fi

if test -f legend/$out
	then rm legend/$out
fi
echo "Enter the text for fill $out end with a ."
while test 1
do
echo -n ": "
read cat
if test "$cat" = "."
	then
	break
fi
echo $cat >> legend/$out
done

#### calculate line spacing in meters on the ground ######
scale=`mapdef -v $map | awk '/scale/ {print $4}'` 

########## Store record of fill #######################
echo scale=$scale > fills/$out
echo pat=\"$pat\" >> fills/$out
echo pen=$pen >> fills/$out
echo name=$name >> fills/$out
echo zone=$zone >> fills/$out
echo proj=$proj >> fills/$out
echo mapset=$mapset >> fills/$out
echo map=$map >> fills/$out
echo cattype=$cattype >> fills/$out
echo i=\"$i\" >> fills/$out

############## DO FILS ###############################
if test -f ovm/$out
	then
	rm ovm/$out
fi
for j in $pat
do
echo Doing pattern $j
. $GRAPH/etc/pattern/$j
space=`echo $scale $space | awk '{tot=$1 * $2 / 100; print tot}'`

if test $proj = 1
        then
	cmd="fill_dig -sp $space -c $pen -a $angle -sc $scale $i $mapset $name < cat/tmp |\
        proj +proj=utm +inv +zone=$zone - "
elif test $proj = 4
        then
        cmd="fill_dig -sp $space -c $pen -a $angle -sc $scale $i $mapset $name < cat/tmp |\
        proj +proj=aea +inv +lon_0=-96 +lat_0=23 - "
fi
if test "$line" = "solid"
	then
        cmd="$cmd | lines -c \"-d 1,2 \" -m $map -o $out.tmp"
else
	cmd="$cmd | lines -c \"-d 1,2 -ls .2 -lm 0x6666 -ld \" -m $map -o $out.tmp"
fi
eval $cmd
cat $out.tmp >> ovm/$out
done
rm $out.tmp cat/tmp
tput clear
