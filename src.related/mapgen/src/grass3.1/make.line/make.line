#!/bin/sh
tput clear
CHECK.MAP
if test $? = 1
	then
	exit
fi
if test ! -d lines
	then
	mkdir lines
fi

############# GET map definition file ################
mdef=
while test ! -f "$mdef"
do
	echo -n "Enter the name of the map definition file [map.def]: "
	read mdef
	mdef=${mdef:-map.def}
done
######################## get MAPGEN line file ##################
while test "$name" = ""
do
	echo -n "Enter the name of an existing or new dig_geo file: "
	read name
done
if test ! -f ../dig_geo/$name
	then
	echo 
	echo Creating the Georefernced digit file from GRASS
	dig.to.geo $name
fi
echo
####################### name this overlay #################
if test $# -eq 1; then
	overf=$1
else
	while test "$overf" = ""
	do
	echo -n "Enter the name of this overlay [$name]: "
	read overf
	overf=${overf:-$name}
	done
fi
echo

################### get pen #############################
echo -n "Enter the pen number [1]: "
read pen
pen=${pen:-1}
echo

pattern=""
##################### get line type #####################
while test "$pattern" = ""
do
	ltype=l
	while test "$ltype" = "l"
	do
		echo -n "Enter the line type [s]olid (l)ist: "
		read ltype
		ltype=${ltype:-s}
		if test "$ltype" = "l"; then
			echo "a    - - - - - - - - - - - - - - - - "
			echo "b    --- --- --- --- --- --- --- --- "
			echo "c    ------  ------  ------  ------  "
			echo "d    ------- ------- ------- ------- "
			echo "e    --------------  --------------  "
			echo "f    --------------- --------------- "
			echo "g    - ----- - ----- - ----- - ----- "
			echo "h    - ------------- - ------------- "
			echo "i    -- ------------ -- ------------ "
			echo "j    - - ----------- - - ----------- "
			echo "k    -- -- --------- -- -- --------- "
		echo
		fi
	done
	echo

################ set pattern #######################
	case $ltype in
		a) pattern=0x5555;break;;
		b) pattern=0x7777;break;;
		c) pattern=0xFCFC;break;;
		d) pattern=0xFEFE;break;;
		e) pattern=0xFFFC;break;;
		f) pattern=0xFFFE;break;;
		g) pattern=0xFAFA;break;;
		h) pattern=0xFFFA;break;;
		i) pattern=0xFFF6;break;;
		j) pattern=0xFFEA;break;;
		k) pattern=0xFFB6;break;;
		s) pattern=solid;break;;
		*) echo Invalid selection; tput clear;;
	esac
done

if test ! "$ltype" = "s"; then
############### get pattern unit size ###############
	echo -n "Enter the unit length of dashes [.1]: "
	read dsize
	dsize=${dsize:-.1}
	echo
fi


############### get legend ##########################
if test ! -d legend
        then
        mkdir legend
fi
rm legend/$overf 2> /dev/null
echo "Enter the line(s) of text to use in the legend (end with a .)"
while  test -d legend
do
	echo -n :
	read cat
	if test "$cat" = '.'
		then
		break
	else
	echo $cat >> legend/$overf
	fi
done
echo

echo pen="$pen" > lines/$overf
echo name=$name >> lines/$overf
echo mdef="$mdef" >> lines/$overf
echo ltype="$ltype" >> lines/$overf
echo dsize="$dsize" >> lines/$overf

if test "$ltype" = "s"; then
	lines -c "-d 1,2 -p $pen" -m $mdef ../dig_geo/$name -o ovm/$overf
else
	lines -c "-d 1,2 -p $pen -lm $pattern -ls $dsize -ld" -m $mdef ../dig_geo/$name -o ovm/$overf
fi

tput clear
echo make.line completed
echo "        Digit file used         $name"
echo "        Map definition file     $mdef"
echo "        Overlay file created    ovm/$overf"
echo "        Parameters"
echo "                pen		$pen"
echo "                line type	$ltype"
echo "                pattern size	$dsize"
echo -n "                line pattern	"
case $ltype in
	a)    echo "- - - - - - - - - - - - - - - - ";break;;
	b)    echo "--- --- --- --- --- --- --- --- ";break;;
	c)    echo "------  ------  ------  ------  ";break;;
	d)    echo "------- ------- ------- ------- ";break;;
	e)    echo "--------------  --------------  ";break;;
	f)    echo "--------------- --------------- ";break;;
	g)    echo "- ----- - ----- - ----- - ----- ";break;;
	h)    echo "- ------------- - ------------- ";break;;
	i)    echo "-- ------------ -- ------------ ";break;;
	j)    echo "- - ----------- - - ----------- ";break;;
	k)    echo "-- -- --------- -- -- --------- ";break;;
	s)    echo "solid";break;;
esac
