.bp
.H 1 "Non-graphic Control"
The following entries to the graphics system pertain to inititialization
and non-graphic aspects of the system.
When creating a plot either a direct link with the program
.B plotter
must be established by executing
.B plotopen
and/or the meta-graphics are
to be output to a defered plot file by executing
.B defopen.
If both steps are ignored, then the entries to the system are merely NOPs.
.H 2 "Link to plotter"
.DS
plotopen(argl);
char *argl[];
.DE
Argument
.B argl
is an array of pointers passing information to program
.B plotter.
The size of
.B argl
must be at least three elements and in all cases the first two
will be ignored (they are modified and restored) and the last entry
.B must
be null (0);
Additional entries (before the last) must point to strings
containing names of defered files, a world coordinate to device
coordinate scaling factor, a "-i ." combination to signify bidirectional
pipe link to the current program
or the name of the plotter and optional output file.
Note that the "-i ." fields must be included if the current program
is outputing graphic data to be plotted.
If it is not present in the  list then
.B plotopen
will merely wait for the completion of the program
.B plotter.
A typical mode of usage is:
.DS
static char *argl[MAXARG] ={0,0,"-i",".",0};
   ...
plotopen(argl);
.DE
.B MAXARG
is chosen large enough to provide space in
.B argl
for supplementary arguments such as scaling, device selection, etc..
.sp
If the plotting device name field is omitted then the graphics system
assumes that the current controlling teletype is a graphics
device and selects the device driver based on the
.B TERM
name.
.sp
When graphics output is to be directed to a non-terminal device
then entries in the
.B argl
list should also contain:
.DS
"-d","plotter","-o","scratch"
.DE
where
.B plotter
is the driver name and
.B scratch
is the name of a disc file to be output directly to the device at a
later time.
Note that "-o","/dev/tty04" could also be employed when
directing output directly to the device's i/o port.
.sp
.B Plotopen
will return a '0' for a successful operation, otherwise the
linkage failed.
.H 2 "Open defered plot file"
.DS
defopen(name);
char *name;
.DE
.P
If a defered plot file is opened then all meta-graphics generated by
subsequent entries to the graphics system are saved on this file.
This file may be included or passed to program
.B plotter
at a later time.
.sp
As per
.B plotopen,
a '0' value will be returned if the defered file was successfully
opened.
.H 2 "Terminate link to plotter"
.DS
plotend();
.DE
.P
This entry should be the last call to the graphics system when linked
to program
.B plotter.
.H 2 "Close defered file"
.DS
defclose();
.DE
.P
Flush buffer contents and close defered file opened by
.B defopen().
.H 2 "Flush current contents of buffers"
.DS
pltflush();
.DE
.P
Occasionally it is necessary to ensure that the current contents of the
buffers have been sent to
.B plotter.
.H 2 "Include defer file"
.DS
plotopt(INCL, name);
char *name;
.DE
.P
A previously constructed defered plot file may be included in the current
plot.
This is a powerful tool but defered files must be
created and used with discretion and experience.
.H 2 "Clear graphics area"
.DS
plotopt(ERASE);
.DE
.P
This is a device dependent option which will erase the screen of interactive
graphics devices.
It is ignored when applied to non-erasable devices.
.H 2 "Disable graphics mode"
.DS
plotopt(DISABLE);
.DE
.P
This option may be required by certain interactive devices which have
graphics modes incompatible with normal keyboard
operations or should be disabled
when in long wait periods.
It is ignored by other devices.
Note: this call should be followed by a
.B pltflush()
call.
The device is automatically re-enabled when the next graphics operations
are executed.
.H 2 "Reset plot scaling"
.DS
plotopt(RESCALE, value);
char *value;
.DE
.P
If no
.B pens
are active the basic scaling of the device (see
.B plotopen)
may be changed to the positive value of the decimal number expressed
as a string in
.B value.
It is necessary to format the value in ascii since the meta-graphic
stream has no provisions for fractional numbers.
Typically this operation is performed immediately after
.B plotopen
and a
.B plotreq(P_SIZE)
so that custom scaling can be automatically performed by
the application program.
.H 1 "Reset x-y base register"
.DS
plotopt(CBASE);
.DE
.P
Execution of this option will clear the x-y registers used to
reconstitute the differential x-y data in the metagraphic stream.
Usage of the option applies to cases where
the metagraphic files may be concatinated by non-graphics software
(i.e. a UNIX cat command) and preceeds any calls which transmit
x-y data.
.H 2 "Set offset registers."
.DS
plotopt(BASEX, value);
plotopt(BASEY, value);
long value;
.DE
.P
Offset registers are provided which will shift all x-y
non-relative coordinate data from the normal 0-0 origin.
The user may alter the axis offsets by with the
.B BASEX
and
.B BASEY
values which are agebraically added to the respective coordinate data.
Normal application of this option(s) is for zooming operations
on metagraphic files.
.bp
.H 1 "Pen Initialization and Basic Control"
.P
Before any plotting operations, line drafting, string or symbol posting,
can be done a logical
.B pen
must be defined.
More than one
.B pen
can be specified, each with its own attributes which operate
and perform plotting operations
totally independent of the other
.B pens.
The following set of operations provide for basic initialization
and non-graphic attributes.
.H 2 "Initialize logical pen"
.DS
plotopt(NEWPEN, name);
char *name;
.DE
.P
Each logical 
.B pen
is given a user defined name of up to 8 characters (more may be used, but
the high order characters are ignored).
If desired, an existing logical
.B pen
may be used as a template to automatically initialize various
options by following the new pens name in the string with a ":"
and the name of an existing pen's attributes are to be copied
to the new pen.
For example:  plotopt(NEWPEN, "penB:penA"); will initialize "penB"
with the current attributes of "penA".
.H 2 "Select pen"
.DS
plotopt(SPEN, name);
char *name;
.DE
.P
Any existing pen may be selected by this option.
All subsequent graphics operations now apply to this logical
.B pen.
.H 2 "Delete current pen"
.DS
plotopt(DELPEN);
.DE
.P
This option deletes and removes the definition of the currently
selected
.B pen.
If there are other active
.B pens
then the
.B pen
previously selected before the current
.B pen
becomes the current
.B pen.
If the user is unsure of current pen status after a
.B DELPEN
operation a
.B SPEN
will ensure a known
.B pen
status.
.H 2 "Link x-y"
.DS
plotopt(LINKXY, name);
char *name;
.DE
.P
The x-y coordinates of the current pen may be linked to those of another
pen selected by
.B name.
Several
.B pens
may be linked in this manner.
This feature allows the applications programmer to set several sets
of line and character attributes to different logical
.B pens
and also have each of the pens track the same set of coordinates.
.H 2 "Unlink x-y of current pen"
.DS
plotopt(DELINK);
.DE
.P
This options is the inverse of
.B LINKXY
and allows the coordinates of the current pen to be totally independent.
.H 2 "Set window range"
.DS
plotopt(WXL, xlow);
plotopt(WXH, xhi);
plotopt(WYL, ylow);
plotopt(WYH, yhi);
long xlow, xhi, ylow, yhi;
.DE
.P
.B Xlow, 
.B xhi, 
.B ylow
and
.B yhi
set the respective boundaries of the window for all graphics
operations of the current pen.
Obviously, the
.B low
should less than the
.B hi
values and should be in the range of world coordinates acceptable
by the device: 0 to limit determinable from
.B plotreq
with
.B P_SIZE
option.
Values outside of this range are truncated to the limits of the
plotting device.
When a pen is initialized (without the attribute
copy option) the window boundaries are set to the
limits of the device.
.H 2 "Mechanical pen selection"
.DS
plotopt(MPEN, arg);
int arg;
.DE
.P
This option is totally device dependent and the effect of the
.B arg
value is dependent upon the device employed.
See the appendices associated with details of device drivers
implemented.
For many devices this option will select different mechanical pens
which may be of varying color or line width.
.bp
.H 1 "Pen Positioning"
.P
All character, symbol and line drafting is based upon the x-y
positioning of the current logical
.B pen.
This positioning may be done in two ways: as an absolute position
or as a position relative to the last absolute coordinate
value.
In either case, the pen may be moved to the new coordinates with or
without drafting a line.
.H 2 "Plotter pen motion"
.DS
pxyxmit(_PENUP, x, y);
pxyxmit(_PENUP+_REL, x, y);
pxyxmit(0, x, y);
pxyxmit(_REL, x, y);
long x, y;
.DE
.P
Move the plotter pen to the specified coordinates.
If
.B _REL
is specified the
.B x
and
.B y
coordinates are relative to the previous pen position.
When
.B _PENUP
is specified the pen motion does not cause a line to be
drafted (i.e. a "dark vector") otherwise
the characteristics of the line drafted are defined by the factors
set in line plotting section.
.bp
.H 1 "String Plotting"
.P
This graphics system provides a comprehensive set of character
fonts and control to facilitate the generation of graphics text.
However, the applications programmer must perform at least two steps
in anticipation of text plotting; select a font and establish scaling.
Remember that all subsequently described attributes
are associated with only the currently selected
.B pen.
.sp
A second factor associated with text plotting is the
.B net
coordinate position where the string will be located.
The
.B pxyxmit
command will determine the base position for the text data
but the
.B net
position is a function of
.B XOFF,
.B YOFF
and justification selected as additive factors to the
base position.
.sp
The actual operation of drafting characters is determined by the
set of vectors contained in the selected font and these coordinates
will make a tertiary determination of the character position
relative to the
.B net
position selected.
Most of the normal text and symbol characters employed in
the supplied fonts will center the character about the
.B net
coordinate selected.
.H 2 "Select primary character font"
.DS
plotopt(SFONT, name);
char *name;
.DE
.P
Before any
.B TEXT
strings may be plotted a font must be selected.
A standard full ASCII, gothic font may be selected by employing
"-" for
.B name.
Other fonts are available in the standard graphics system library
(see Appendix X) which cover Greek, Cyrillic, Roman as well as other
character sets.
When selecting fonts from the standard library the first character in
the name must be a '-' (eg. "-sr").
If non-library fonts are to be employed then the full file name
must be specified.
Note: all non-library fonts must have been pre-formated in accordance with
system standards (see program
.B gensym).
.H 2 "Select alternate character font"
.DS
plotopt(SFONTA, name);
char *name;
.DE
.P
An alternate font may be specified with the
.B SFONTA
call.
Characters in this font are selected by means of the special codes
described in
.B TEXT.
If the alternate font has not been established or a character in the string
does not exist in the alternate font the corresponding character in the
primary font will be drafted.
.H 2 "String plotting"
.DS
plotopt(TEXT, str);
char *str;
.DE
.P
The standard 'C' null terminated string
.B str
is plotted at the current
.B pen's
x and y coordinates with the attributes ascribed to the
.B pen's
character control parameters.
If the current x or y coordinates are outside of the current window
then the plotting is suspended, however
the string may be positioned outside the window with appropriate
.B XOFF
or
.B YOFF
values.
If any part of a character of the string
is outside the plotting device's coordinate range the character
will not be plotted.
.sp
Three 
.B TEXT
string character values have special meaning and are
used for control:
.VL 10
.LI '\e001'
select primary font for all subsequent characters,
.ti -4
.LI '\e002'
select secondary font for all subsequent characters,
.ti -4
.LI '\en'
terminate the current 'line' and continue the string with the
y offset negatively adjusted.
See 
.B LEAD 
for setting line spacing.
.LE
.P
The font selection remains in effect for all subsequent
.B TEXT
calls for currently selected
.B pen.
The '\\n' character only affects the string posted in the current
call and will not change the basic positioning of any subsequent
.B TEXT
calls.
.H 2 "Set character size"
.DS
plotopt(SIZE, size);
long size;
.DE
.P
The argument
.B size
is a multiplier which scales the vectors defining the character
of the primary and secondary font.
Note that the basic unscaled size of the characters is determined
by the font selected and may vary from 9 to 21 world units.
See plotreq(P_SIZE) to determine units of loaded font.
.P
If
.B size
is negative then the absolute value of least significant bit
has an precision of 1/16 units.
For example, for a positive value of
.B size
of 10 then the equivalent negative value would be -160.
Use of the negative form of
.B size
provides for greater resolution, especially for small values.
.H 2 "Set character rotation"
.DS
plotopt(ANG, angle);
long angle;
.DE
.P
Set character rotation about the current x-y coordinates to
.B angle
in radians times 10000.
The angle is measured counter-clockwise from the positive x-axis.
Note that x and y offset participate in the rotation (see
.B XOFF
and
.B YOFF
).
.H 2 "Set character offsets"
.DS
plotopt(XOFF, xoff);
plotopt(YOFF, yoff);
long xoff, yoff;
.DE
.P
.B XOFF
and
.B YOFF
provide for offsetting the center position of the character string from
the current
.B pen
x-y coordinates.
Note that these offsets are also rotated by
.B ANG.
.H 2 "Set justification"
.DS
plotopt(JLEFT);
plotopt(JRIGHT);
plotopt(CENTER);
.DE
.P
These operations provide for setting the justification mode
of
.B TEXT
character string plotting.
The default
.B JLEFT
mode specifies typical left justification of the text:
the net coordinate position specifies the coordinate of the
center of the first character of the string.
Similarly,
.B JRIGHT
will preform right justification (last string character's position)
and
.B CENTER
will center the string on the net coordinate.
.H 2 "Set interline spacing"
.DS
plotopt(LEAD, lead);
long lead;
.DE
.P
When employing the '\\n' character in text strings the newline spacing
is determined by
.B LEAD.
The value of
.B lead
in n/8 units is multiplied by the current size of the primary
font in determining a temporary adjustment to the y-offset
for each newline encountered in the 
.B TEXT
string.
This parameter must be specified or overpriniting will occur.
A typical value is 12 (1.5 times the font size).
.sp
.bp
.H 1 "Symbol Plotting"
.P
Symbol plotting provides for posting a selected symbol at
each coordinate position operation made by a
.B pxyxmit
coordinate command.
Several of the following operations involved with symbol plotting
are basically the same as for text operations with the following
notable exceptions: no provision is made
for offsets or string plotting.
When performing symbol plotting both the font and scaling operations
must be performed.
.H 2 "Select symbol font"
.DS
plotopt(SFONTS, name);
char *name;
.DE
.P
This operation is identical to the
.B SFONT
and 
.B SFONTA
operations.
The most notable variations is that the user will tend to
chose fonts which are more suitable to symbol plotting.
The standard system font (name = "-") may be employed for symbols
since many of the characters in the range 1 to 30 are 
suitable for point plotting.
.H 2 "Set symbol size"
.DS
plotopt(SSIZE, size);
long size;
.DE
.P
Set the scaling multiplier of the symbol character to
.B size.
As with character size,
if
.B size
is negative then the absolute value of least significant bit
has an precision of 1/16 units.
.H 2 "Set symbol character rotation"
.DS
plotopt(SANG, angle);
long angle;
.DE
.P
Set the symbol rotation to
.B angle
in radians times 10000.
.B Angle
is measured counterclockwise from the positive x axis.
.H 2 "Set symbol"
.DS
plotopt(SYM, char);
int char;
.DE
.P
The selected symbol will be posted at each coordinate
specified by a
.B pxyxmit
command.
If
.B char
= 0 then the posting operation is suspended.
.sp
.bp
.H 1 "Line Plotting"
.P
When a
.B pen
is initialized the ability to draft solid lines is automatically
enabled.
.H 2 "Select dash line mode"
.DS
plotopt(DASH);
.DE
.P
This option sets the drafting mode to dashed lines.  Note that
suitable
.B DMASK
and
.B DSIZE
selections should be made before executing a dashed line
pen motion.
.H 2 "Set dash attribute"
.DS
plotopt(DMASK, mask);
int mask;
.DE
.P
.B Mask
is a word which contains a bit pattern to
designate the pen down (bit on) and
pen up (bit off) characteristic of the dashed line.
The length of the bit pattern is always 16 bits.
.H 2 "Dash element size"
.DS
plotopt(DSIZE, size);
long size;
.DE
.P
.B Size
sets the length of each bit element of the
.B mask
in world units.
.H 2 "Select solid line mode"
.DS
plotopt(SOLID);
.DE
.P
Set the line drafting mode to generate a solid line.
.bp
.H 1 "Symbol Line Plotting"
Lines may be drafted as a repeated set of symbols and optionally connected
by a solid or dashed line.
To deselect the symbol line option either a
.B SOLID
or 
.B DASH
option must be selected.
.H 2 "Select Symbol Line Mode"
.DS
plotopt(FPLOT); or
plotopt(FPLOTN);
.DE
.P
If the option
.B FPLOT
is employed, the symbols are joined by a line otherwise
the
.B FPLOTN
specifies that the symbols are not to be connected.
.H 2 "Line Symbol Selection"
.DS
plotopt(FSYMS, str);
char *str;
.DE
The character string
.B str
may contain up to 8 characters which will determine the sequence
of symbols to be plotted along the line.
The special symbol value of \e177 is reserved as a spacing
character and denotes an open segment equal to the specified
symbol spacing.
If the most significant bit of any symbol character (ie. the symbol
value exceeds 127) the following character is to be rotated 180\(de.
The font determining the symbol graphic is determined by the
symbol font.
.H 2 "Line Symbol Size"
.DS
plotopt(F_SIZE, size);
int size;
.P
Set the scaling multiplier of the symbol character to
.B size.
As with character size,
if
.B size
is negative then the absolute value of least significant bit
has an precision of 1/16 units.
.DE
.H 2 "Line Symbol Separation"
.DS
plotopt(F_DIST, dist);
int dist;
.DE
.P
.B Size
determines the intersymbol distance in world units.
.bp
.H 1 "Request to Plotter"
.P
The applications programmer can make inquiries of program
.B plotter
by means of the
.B plotreq
function.
In all cases
.B plotreq
returns a pointer to the structure
.B ANSWR
(see graphics.h file).
Depending on the option one or more of the elements of the
structure are updated by the response from
.B plotter.
.B Plotreq
also provides a means of ensuring synchronization between the
application program and
.B plotter.
.H 2 "Return error status"
.DS
ANSWR *p;
p = plotreq(ERROR);
.DE
.P
The
.B code
value of the
.B ANSWR
structure is updated with the current error level
of plotter.
The meaning of each error code is given in
.B grerror.h.
Note that this call will clear the setting of error to 0 in
.B plotter 
so that subsequent error requests will indicate error conditions
since the last
.B plotreq(ERROR)
call.
.H 2 "Return cursor position"
.DS
ANSWR *p;
p = plotreq(CURSOR);
.DE
.P
If the graphics device is interactive and has cursor capability
the current position of the cursor is returned in the
.B x-y
values of the
.B ANSWR
structure.
In addition, if the device has supplementary information generated
by the cursor, these data are placed in the character string
.B str.
If the device does not have cursor capability the command is ignored.
.H 2 "Return maximum x-y size of device"
.DS
ANSWR *p;
p = plotreq(P_SIZE);
.DE
.P
This function will return the maximum size of the world coordinates
that the device is capable of handling in the 
x-y structure values.
Remember that the minimum x-y coordinate
of any device is always considered as 0, 0.
.H 2 "Current font size"
.DS
ANSWR *p;
p = plotreq(FSIZE);
.DE
.P
The point size of the current pen primary font is returned in
the structure value
.B code.
This is the unscaled size.
If a primary font is not selected then a 0 value is returned.
