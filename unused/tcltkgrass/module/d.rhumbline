

proc colors { } {


  toplevel .colors

  wm geometry .colors +100+20
  wm title .colors "colors"


  global lname


  frame .colors.frame0 \
    -relief {flat}

  label .colors.frame0.label \
     -anchor {w} \
     -text {Rhumbline color:} \
     -padx {2}

  listbox .colors.frame0.listbox \
     -relief sunken \
     -yscrollcommand {.colors.frame0.vscrollbar set}

  scrollbar .colors.frame0.vscrollbar \
     -command {.colors.frame0.listbox yview}


  pack append .colors.frame0 \
    .colors.frame0.label { top fillx } \
    .colors.frame0.listbox { left expand fill } \
    .colors.frame0.vscrollbar { right fill }

  bind .colors.frame0.listbox <Button-1> {
       %W select from [%W nearest %y]
       %W select to [%W nearest %y]
       set lname [%W get [%W nearest %y]]
  }

  bind .colors.frame0.listbox <ButtonRelease-1> {
       %W select from [%W nearest %y]
       %W select to [%W nearest %y]
       set lname [%W get [%W nearest %y]]
  }

  bind .colors.frame0.listbox <Double-ButtonPress-1> {
       %W select from [%W nearest %y]
       %W select to [%W nearest %y]
       set lname [%W get [%W nearest %y]]
  }

  .colors.frame0.listbox delete 0 end
  foreach i {red orange yellow green blue magenta indigo violet gray white black} {
      .colors.frame0.listbox insert 0 $i
  }


  frame .colors.frame1 \
     -borderwidth {2}

  button .colors.frame1.ok \
     -text Ok \
     -relief raised \
     -padx 10 \
     -command {
                 destroy .colors }

  button .colors.frame1.cancel \
     -text Cancel \
     -relief raised \
     -padx 10 \
     -command {
                 destroy .colors }

  pack append .colors.frame1 \
    .colors.frame1.ok { left expand } \
    .colors.frame1.cancel { right expand }



  pack append .colors \
    .colors.frame0 { top expand fill } \
    .colors.frame1 { bottom expand fill }



  grab set .colors
  tkwait window .colors

}




proc put_command { } {


  global lon1
  global lat1
  global lon2
  global lat2
  global lname


  set cmd ""

  if {  $lon1 != "" || $lat1 != "" || $lon2 != "" || $lat2 != "" } {
         set cmd "$cmd coor=$lon1,$lat1,$lon2,$lat2"
  }

  if {  $lname != "" } {
         set cmd "$cmd lcolor=$lname"
  }

  if { $cmd != "" } {
     set cmd "d.rhumbline $cmd"
  }
}




proc set_command_entry { } {

  .cmd.frame0.entry configure -state normal
  .cmd.frame0.entry delete 0 end
  .cmd.frame0.entry insert 0 [put_command]
  .cmd.frame0.entry configure -state disabled

}


proc proc_d.rhumbline { } {


  global lon1
  global lat1
  global lon2
  global lat2
  global lname


  toplevel .cmd

  wm geometry .cmd +100+20

  wm title .cmd "Display Rhumbline"


  frame .cmd.frame0 \
    -relief {flat}

  label .cmd.frame0.label \
    -anchor {w} \
    -text {Command:} \
    -padx {2}

  scrollbar .cmd.frame0.hscrollbar \
    -command {.cmd.frame0.entry view} \
    -orient {horizontal}

  entry .cmd.frame0.entry \
    -relief {sunken} \
    -width 50 \
    -scrollcommand {.cmd.frame0.hscrollbar set}

  pack append .cmd.frame0 \
    .cmd.frame0.label { top fillx } \
    .cmd.frame0.entry { top fillx } \
    .cmd.frame0.hscrollbar { bottom fillx }

  .cmd.frame0.entry delete 0 end
  .cmd.frame0.entry insert 0 {d.rhumbline}

  .cmd.frame0.entry configure -state disabled



  frame .cmd.frame1 \
    -relief {flat}

  label .cmd.frame1.label \
    -anchor {w} \
    -text {Description:} \
    -padx {2}

  scrollbar .cmd.frame1.hscrollbar \
    -command {.cmd.frame1.entry view} \
    -orient {horizontal}

  entry .cmd.frame1.entry \
    -relief {sunken} \
    -width 50 \
    -scrollcommand {.cmd.frame1.hscrollbar set}

  pack append .cmd.frame1 \
    .cmd.frame1.label { top fillx } \
    .cmd.frame1.entry { top fillx } \
    .cmd.frame1.hscrollbar { bottom fillx }

  .cmd.frame1.entry delete 0 end
  .cmd.frame1.entry insert 0 {d.rhumbline displays the rhumbline joining two user-specified points, in the active display frame.}

  .cmd.frame1.entry configure -state disabled



  frame .cmd.frame2 \
    -relief {flat}

  label .cmd.frame2.label \
    -anchor {w} \
    -text {Starting longitude coordinate:} \
    -padx {2}

  scrollbar .cmd.frame2.hscrollbar \
    -command {.cmd.frame2.entry view} \
    -orient {horizontal}

  entry .cmd.frame2.entry \
    -relief {sunken} \
    -width 50 \
    -scrollcommand {.cmd.frame2.hscrollbar set}

  pack append .cmd.frame2 \
    .cmd.frame2.label { top fillx } \
    .cmd.frame2.entry { top fillx } \
    .cmd.frame2.hscrollbar { bottom fillx }

  .cmd.frame2.entry configure -state normal

  bind .cmd.frame2.entry <Return> {
       set lon1 [%W get] }



  frame .cmd.frame3 \
    -relief {flat}

  label .cmd.frame3.label \
    -anchor {w} \
    -text {Starting latitude coordinate:} \
    -padx {2}

  scrollbar .cmd.frame3.hscrollbar \
    -command {.cmd.frame3.entry view} \
    -orient {horizontal}

  entry .cmd.frame3.entry \
    -relief {sunken} \
    -width 50 \
    -scrollcommand {.cmd.frame3.hscrollbar set}

  pack append .cmd.frame3 \
    .cmd.frame3.label { top fillx } \
    .cmd.frame3.entry { top fillx } \
    .cmd.frame3.hscrollbar { bottom fillx }

  .cmd.frame3.entry configure -state normal

  bind .cmd.frame3.entry <Return> {
       set lat1 [%W get] }



  frame .cmd.frame4 \
    -relief {flat}

  label .cmd.frame4.label \
    -anchor {w} \
    -text {Ending longitude coordinate:} \
    -padx {2}

  scrollbar .cmd.frame4.hscrollbar \
    -command {.cmd.frame4.entry view} \
    -orient {horizontal}

  entry .cmd.frame4.entry \
    -relief {sunken} \
    -width 50 \
    -scrollcommand {.cmd.frame4.hscrollbar set}

  pack append .cmd.frame4 \
    .cmd.frame4.label { top fillx } \
    .cmd.frame4.entry { top fillx } \
    .cmd.frame4.hscrollbar { bottom fillx }

  .cmd.frame4.entry configure -state normal

  bind .cmd.frame4.entry <Return> {
       set lon2 [%W get] }



  frame .cmd.frame5 \
    -relief {flat}

  label .cmd.frame5.label \
    -anchor {w} \
    -text {Ending latitude coordinate:} \
    -padx {2}

  scrollbar .cmd.frame5.hscrollbar \
    -command {.cmd.frame5.entry view} \
    -orient {horizontal}

  entry .cmd.frame5.entry \
    -relief {sunken} \
    -width 50 \
    -scrollcommand {.cmd.frame5.hscrollbar set}

  pack append .cmd.frame5 \
    .cmd.frame5.label { top fillx } \
    .cmd.frame5.entry { top fillx } \
    .cmd.frame5.hscrollbar { bottom fillx }

  .cmd.frame5.entry configure -state normal

  bind .cmd.frame5.entry <Return> {
       set lat2 [%W get] }



  frame .cmd.frame6 \
    -relief {flat}

  label .cmd.frame6.label \
    -anchor {w} \
    -text {Other options available:} \
    -padx {2}

  button .cmd.frame6.button0 \
     -text "colors ..." \
     -relief raised \
     -padx 10 \
     -command "colors
                set_command_entry"


  frame .cmd.frame7 \
     -borderwidth {2}

  button .cmd.frame7.ok \
     -text Ok \
     -relief raised \
     -padx 10 \
     -command { 
		if {  $lon1 != "" && $lat1 != "" && $lon2 != "" && $lat2 != "" } {
 		set cmd [put_command]
 		if { $cmd != "" } {
 		   catch { eval " exec $cmd " } 
 		   destroy .cmd
 		}
 	}
 }

  button .cmd.frame7.cancel \
     -text Cancel \
     -relief raised \
     -padx 10 \
     -command { destroy .cmd }

  pack append .cmd.frame7 \
    .cmd.frame7.ok { left expand } \
    .cmd.frame7.cancel { right expand }

  pack append .cmd.frame6 \
    .cmd.frame6.label { top fillx } \
    .cmd.frame6.button0  { left }



  pack append .cmd \
    .cmd.frame1 { top expand fill } \
    .cmd.frame2 { top expand fill } \
    .cmd.frame3 { top expand fill } \
    .cmd.frame4 { top expand fill } \
    .cmd.frame5 { top expand fill } \
    .cmd.frame6 { top expand fill } \
    .cmd.frame0 { top expand fill } \
    .cmd.frame7 { bottom expand fill }


bind .cmd.frame2.entry <KeyRelease> {
		set lon1 [.cmd.frame2.entry get]
		set_command_entry
}

bind .cmd.frame2.entry <Return> {
		set lon1 [.cmd.frame2.entry get]
		set_command_entry
}

bind .cmd.frame3.entry <KeyRelease> {
		set lat1 [.cmd.frame3.entry get]
		set_command_entry
}

bind .cmd.frame3.entry <Return> {
		set lat1 [.cmd.frame3.entry get]
		set_command_entry
}

bind .cmd.frame4.entry <KeyRelease> {
		set lon2 [.cmd.frame4.entry get]
		set_command_entry
}

bind .cmd.frame4.entry <Return> {
		set lon2 [.cmd.frame4.entry get]
		set_command_entry
}

bind .cmd.frame5.entry <KeyRelease> {
		set lat2 [.cmd.frame5.entry get]
		set_command_entry
}

bind .cmd.frame5.entry <Return> {
		set lat2 [.cmd.frame5.entry get]
		set_command_entry
}

  grab set .cmd
  tkwait window .cmd

}

global lon1
set lon1 ""

global lat1
set lat1 ""

global lon2
set lon2 ""

global lat2
set lat2 ""

global lname
set lname ""


global database
global location
global mapset
global feature
if { [info exists env(GISDBASE)] == 0 ||
     [info exists env(LOCATION_NAME)] == 0 ||
     [info exists env(MAPSET)] == 0 } {
   puts stdout "GISDBASE, LOCATION_NAME and MAPSET must be set !!!"
   return
}
set database $env(GISDBASE)
set location $env(LOCATION_NAME)
set mapset $env(MAPSET)
set feature ""

proc_d.rhumbline
