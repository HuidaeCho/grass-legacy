

proc get_feature { type } {

  set dir ""
  case $type in {

       {raster} {
                      set dir "cell"
                  }

       {vector} {
                      set dir "dig"
                  }

       {sites} {
                      set dir "site_lists"
                  }

       {label} {
                      set dir "paint/labels"
                  }

       {group} {
                      set dir "group"
                  }

       {icon} {
                      set dir "paint/icons"
                  }

       {region} {
                      set dir "windows"
                  }

       {dlg} {
                      set dir "dlg"
                  }

       {dlg_ascii} {
                      set dir "dlg_ascii"
                  }

  }
  return $dir

}




proc put_list { the_listbox the_list } {

  $the_listbox delete 0 end
  foreach i $the_list {
      $the_listbox insert end $i
  }
}




proc get_list { path } {
  set list ""
  if { [file isdirectory $path] != 1 } {
     return $list
  }
  set current_dir [exec pwd]
  cd $path
  foreach i [exec ls -a [exec pwd]] {
     if { [string compare $i "."] != 0 && [string compare $i ".."] != 0 } {
        lappend list $i
     }
  }
  cd $current_dir
  return $list
}




proc mapset_listbox { type } {

  global database
  global location
  global mapset
  global feature

  global file_name
  set file_name ""

  toplevel .mapset

  wm geometry .mapset +100+100
  wm title .mapset {spatial layer}

  set feature [get_feature $type]

  global mapset_list

  frame .mapset.frame0 \
    -borderwidth {2} \
    -relief {flat}

  label .mapset.frame0.label \
    -anchor {w} \
    -text "Mapset"

  entry .mapset.frame0.mapset \
    -relief {sunken} \
   -width 20

  menubutton .mapset.frame0.mapsets \
    -bitmap {@../bitmap/arrow} \
    -menu {.mapset.frame0.mapsets.pulldown}

  menu .mapset.frame0.mapsets.pulldown

  set mapset_list [get_list "$database/$location"]
  foreach i $mapset_list {
      .mapset.frame0.mapsets.pulldown add command \
          -label $i \
          -command {
                     set mapset [lindex $mapset_list \
                               [.mapset.frame0.mapsets.pulldown index active] ]
                     .mapset.frame0.mapset delete 0 end
                     .mapset.frame0.mapset insert 0 $mapset
                     put_list .mapset.frame1.listbox \
                         [get_list "$database/$location/$mapset/$feature"]
                     set file_name ""
                   }
  }

  pack append .mapset.frame0 \
    .mapset.frame0.label { left } \
    .mapset.frame0.mapset { left } \
    .mapset.frame0.mapsets { right }

  frame .mapset.frame1 \
    -borderwidth {2} \
    -relief {raised}

  listbox .mapset.frame1.listbox \
    -relief {sunken} \
    -geometry 20x10 \
    -yscrollcommand {.mapset.frame1.vscrollbar set}

  scrollbar .mapset.frame1.vscrollbar \
    -command {.mapset.frame1.listbox yview}

  pack append .mapset.frame1 \
    .mapset.frame1.listbox { left expand fill } \
    .mapset.frame1.vscrollbar { right fill }

  frame .mapset.frame2 \
    -borderwidth {2}

  frame .mapset.frame2.frame

  button .mapset.frame2.frame.ok \
     -text Ok \
     -relief raised \
     -padx 10 \
     -command { if { $file_name != "" } {
                   destroy .mapset
               }
              }

  button .mapset.frame2.frame.cancel \
    -text Cancel \
    -relief raised \
    -padx 10 \
    -command { set file_name ""
               destroy .mapset
             }

  pack append .mapset.frame2.frame \
    .mapset.frame2.frame.ok { left expand } \
    .mapset.frame2.frame.cancel { right expand }

  pack append .mapset.frame2 \
    .mapset.frame2.frame { bottom frame center fill }

  pack append .mapset \
    .mapset.frame0 { top expand fill } \
    .mapset.frame1 { top expand fill } \
    .mapset.frame2 { bottom expand fill }

  bind .mapset.frame1.listbox <Button-1> {
        %W select from [%W nearest %y]
        %W select to [%W nearest %y]
	    set file_name [%W get [%W nearest %y]]
  }

  bind .mapset.frame1.listbox <ButtonRelease-1> {
        %W select from [%W nearest %y]
        %W select to [%W nearest %y]
	    set file_name [%W get [%W nearest %y]]
  }

  bind .mapset.frame1.listbox <Double-ButtonPress-1> {
        %W select from [%W nearest %y]
        %W select to [%W nearest %y]
	    set file_name [%W get [%W nearest %y]]
  }

  .mapset.frame0.mapset delete 0 end
  .mapset.frame0.mapset insert 0 $mapset

  .mapset.frame1.listbox delete 0 end
  put_list .mapset.frame1.listbox \
             [get_list "$database/$location/$mapset/$feature"]

  grab set .mapset
  tkwait window .mapset

  return $file_name

}




proc input_maps { } {


  toplevel .input_maps

  wm geometry .input_maps +100+20
  wm title .input_maps "input_maps"


  global name3


  frame .input_maps.frame0 \
    -relief {flat}

  label .input_maps.frame0.label \
    -anchor {w} \
    -text {Third input raster map layer:} \
    -padx {2}

  scrollbar .input_maps.frame0.hscrollbar \
    -command {.input_maps.frame0.entry view} \
    -orient {horizontal}

  entry .input_maps.frame0.entry \
    -relief {sunken} \
    -width 50 \
    -scrollcommand {.input_maps.frame0.hscrollbar set}

  button .input_maps.frame0.button \
    -relief {raised} \
    -anchor {n} \
    -text {raster} \
    -command { set file [mapset_listbox raster]
                if { $file != "" } {
                   set name3 $file
                   .input_maps.frame0.entry delete 0 end
                   .input_maps.frame0.entry insert 0 $file
                   set_command_entry
                }
             }


  pack append .input_maps.frame0 \
    .input_maps.frame0.label { top fillx } \
    .input_maps.frame0.button { right frame n } \
    .input_maps.frame0.entry { top fill } \
    .input_maps.frame0.hscrollbar { top fillx }



  bind .input_maps.frame0.entry <Return> {
       set name3 [%W get] }

  global name4


  frame .input_maps.frame1 \
    -relief {flat}

  label .input_maps.frame1.label \
    -anchor {w} \
    -text {Fourth input raster map layer:} \
    -padx {2}

  scrollbar .input_maps.frame1.hscrollbar \
    -command {.input_maps.frame1.entry view} \
    -orient {horizontal}

  entry .input_maps.frame1.entry \
    -relief {sunken} \
    -width 50 \
    -scrollcommand {.input_maps.frame1.hscrollbar set}

  button .input_maps.frame1.button \
    -relief {raised} \
    -anchor {n} \
    -text {raster} \
    -command { set file [mapset_listbox raster]
                if { $file != "" } {
                   set name4 $file
                   .input_maps.frame1.entry delete 0 end
                   .input_maps.frame1.entry insert 0 $file
                   set_command_entry
                }
             }


  pack append .input_maps.frame1 \
    .input_maps.frame1.label { top fillx } \
    .input_maps.frame1.button { right frame n } \
    .input_maps.frame1.entry { top fill } \
    .input_maps.frame1.hscrollbar { top fillx }



  bind .input_maps.frame1.entry <Return> {
       set name4 [%W get] }

  global name5


  frame .input_maps.frame2 \
    -relief {flat}

  label .input_maps.frame2.label \
    -anchor {w} \
    -text {Fifth input raster map layer:} \
    -padx {2}

  scrollbar .input_maps.frame2.hscrollbar \
    -command {.input_maps.frame2.entry view} \
    -orient {horizontal}

  entry .input_maps.frame2.entry \
    -relief {sunken} \
    -width 50 \
    -scrollcommand {.input_maps.frame2.hscrollbar set}

  button .input_maps.frame2.button \
    -relief {raised} \
    -anchor {n} \
    -text {raster} \
    -command { set file [mapset_listbox raster]
                if { $file != "" } {
                   set name5 $file
                   .input_maps.frame2.entry delete 0 end
                   .input_maps.frame2.entry insert 0 $file
                   set_command_entry
                }
             }


  pack append .input_maps.frame2 \
    .input_maps.frame2.label { top fillx } \
    .input_maps.frame2.button { right frame n } \
    .input_maps.frame2.entry { top fill } \
    .input_maps.frame2.hscrollbar { top fillx }



  bind .input_maps.frame2.entry <Return> {
       set name5 [%W get] }

  global name6


  frame .input_maps.frame3 \
    -relief {flat}

  label .input_maps.frame3.label \
    -anchor {w} \
    -text {Sixth input raster map layer:} \
    -padx {2}

  scrollbar .input_maps.frame3.hscrollbar \
    -command {.input_maps.frame3.entry view} \
    -orient {horizontal}

  entry .input_maps.frame3.entry \
    -relief {sunken} \
    -width 50 \
    -scrollcommand {.input_maps.frame3.hscrollbar set}

  button .input_maps.frame3.button \
    -relief {raised} \
    -anchor {n} \
    -text {raster} \
    -command { set file [mapset_listbox raster]
                if { $file != "" } {
                   set name6 $file
                   .input_maps.frame3.entry delete 0 end
                   .input_maps.frame3.entry insert 0 $file
                   set_command_entry
                }
             }


  pack append .input_maps.frame3 \
    .input_maps.frame3.label { top fillx } \
    .input_maps.frame3.button { right frame n } \
    .input_maps.frame3.entry { top fill } \
    .input_maps.frame3.hscrollbar { top fillx }



  bind .input_maps.frame3.entry <Return> {
       set name6 [%W get] }

  global name7


  frame .input_maps.frame4 \
    -relief {flat}

  label .input_maps.frame4.label \
    -anchor {w} \
    -text {Seventh input raster map layer:} \
    -padx {2}

  scrollbar .input_maps.frame4.hscrollbar \
    -command {.input_maps.frame4.entry view} \
    -orient {horizontal}

  entry .input_maps.frame4.entry \
    -relief {sunken} \
    -width 50 \
    -scrollcommand {.input_maps.frame4.hscrollbar set}

  button .input_maps.frame4.button \
    -relief {raised} \
    -anchor {n} \
    -text {raster} \
    -command { set file [mapset_listbox raster]
                if { $file != "" } {
                   set name7 $file
                   .input_maps.frame4.entry delete 0 end
                   .input_maps.frame4.entry insert 0 $file
                   set_command_entry
                }
             }


  pack append .input_maps.frame4 \
    .input_maps.frame4.label { top fillx } \
    .input_maps.frame4.button { right frame n } \
    .input_maps.frame4.entry { top fill } \
    .input_maps.frame4.hscrollbar { top fillx }



  bind .input_maps.frame4.entry <Return> {
       set name7 [%W get] }

  global name8


  frame .input_maps.frame5 \
    -relief {flat}

  label .input_maps.frame5.label \
    -anchor {w} \
    -text {Eighth input raster map layer:} \
    -padx {2}

  scrollbar .input_maps.frame5.hscrollbar \
    -command {.input_maps.frame5.entry view} \
    -orient {horizontal}

  entry .input_maps.frame5.entry \
    -relief {sunken} \
    -width 50 \
    -scrollcommand {.input_maps.frame5.hscrollbar set}

  button .input_maps.frame5.button \
    -relief {raised} \
    -anchor {n} \
    -text {raster} \
    -command { set file [mapset_listbox raster]
                if { $file != "" } {
                   set name8 $file
                   .input_maps.frame5.entry delete 0 end
                   .input_maps.frame5.entry insert 0 $file
                   set_command_entry
                }
             }


  pack append .input_maps.frame5 \
    .input_maps.frame5.label { top fillx } \
    .input_maps.frame5.button { right frame n } \
    .input_maps.frame5.entry { top fill } \
    .input_maps.frame5.hscrollbar { top fillx }



  bind .input_maps.frame5.entry <Return> {
       set name8 [%W get] }


  frame .input_maps.frame6 \
     -borderwidth {2}

  button .input_maps.frame6.ok \
     -text Ok \
     -relief raised \
     -padx 10 \
     -command {
                  set name3 [.input_maps.frame0.entry get]
                  set name4 [.input_maps.frame1.entry get]
                  set name5 [.input_maps.frame2.entry get]
                  set name6 [.input_maps.frame3.entry get]
                  set name7 [.input_maps.frame4.entry get]
                  set name8 [.input_maps.frame5.entry get]
                 destroy .input_maps }

  button .input_maps.frame6.cancel \
     -text Cancel \
     -relief raised \
     -padx 10 \
     -command {
                  set name3 ""
                  set name4 ""
                  set name5 ""
                  set name6 ""
                  set name7 ""
                  set name8 ""
                 destroy .input_maps }

  pack append .input_maps.frame6 \
    .input_maps.frame6.ok { left expand } \
    .input_maps.frame6.cancel { right expand }


bind .input_maps.frame0.entry <Return> {
     focus .input_maps.frame1.entry
}

bind .input_maps.frame1.entry <Return> {
     focus .input_maps.frame2.entry
}

bind .input_maps.frame2.entry <Return> {
     focus .input_maps.frame3.entry
}

bind .input_maps.frame3.entry <Return> {
     focus .input_maps.frame4.entry
}

bind .input_maps.frame4.entry <Return> {
     focus .input_maps.frame5.entry
}

bind .input_maps.frame5.entry <Return> {
     focus .input_maps.frame0.entry
}


  pack append .input_maps \
    .input_maps.frame0 { top expand fill } \
    .input_maps.frame1 { top expand fill } \
    .input_maps.frame2 { top expand fill } \
    .input_maps.frame3 { top expand fill } \
    .input_maps.frame4 { top expand fill } \
    .input_maps.frame5 { top expand fill } \
    .input_maps.frame6 { bottom expand fill }



  grab set .input_maps
  tkwait window .input_maps

}




proc put_command { } {


  global name1
  global name2
  global name3
  global name4
  global name5
  global name6
  global name7
  global name8
  global oname


  set cmd ""

  if {  $name1 != "" } {
         set cmd "$cmd input1=$name1"
  }

  if {  $name2 != "" } {
         set cmd "$cmd input2=$name2"
  }

  if {  $name3 != "" } {
         set cmd "$cmd input3=$name3"
  }

  if {  $name4 != "" } {
         set cmd "$cmd input4=$name4"
  }

  if {  $name5 != "" } {
         set cmd "$cmd input5=$name5"
  }

  if {  $name6 != "" } {
         set cmd "$cmd input6=$name6"
  }

  if {  $name7 != "" } {
         set cmd "$cmd input7=$name7"
  }

  if {  $name8 != "" } {
         set cmd "$cmd input8=$name8"
  }

  if {  $oname != "" } {
         set cmd "$cmd output=$oname"
  }

  if { $cmd != "" } {
     set cmd "i.pca $cmd"
  }
}




proc set_command_entry { } {

  .cmd.frame0.entry configure -state normal
  .cmd.frame0.entry delete 0 end
  .cmd.frame0.entry insert 0 [put_command]
  .cmd.frame0.entry configure -state disabled

}


proc proc_i.pca { } {


  global name1
  global name2
  global name3
  global name4
  global name5
  global name6
  global name7
  global name8
  global oname


  toplevel .cmd

  wm geometry .cmd +100+20

  wm title .cmd "Perform Principle Components Analysis"


  frame .cmd.frame0 \
    -relief {flat}

  label .cmd.frame0.label \
    -anchor {w} \
    -text {Command:} \
    -padx {2}

  scrollbar .cmd.frame0.hscrollbar \
    -command {.cmd.frame0.entry view} \
    -orient {horizontal}

  entry .cmd.frame0.entry \
    -relief {sunken} \
    -width 50 \
    -scrollcommand {.cmd.frame0.hscrollbar set}

  pack append .cmd.frame0 \
    .cmd.frame0.label { top fillx } \
    .cmd.frame0.entry { top fillx } \
    .cmd.frame0.hscrollbar { bottom fillx }

  .cmd.frame0.entry delete 0 end
  .cmd.frame0.entry insert 0 {i.pca}

  .cmd.frame0.entry configure -state disabled



  frame .cmd.frame1 \
    -relief {flat}

  label .cmd.frame1.label \
    -anchor {w} \
    -text {Description:} \
    -padx {2}

  scrollbar .cmd.frame1.hscrollbar \
    -command {.cmd.frame1.entry view} \
    -orient {horizontal}

  entry .cmd.frame1.entry \
    -relief {sunken} \
    -width 50 \
    -scrollcommand {.cmd.frame1.hscrollbar set}

  pack append .cmd.frame1 \
    .cmd.frame1.label { top fillx } \
    .cmd.frame1.entry { top fillx } \
    .cmd.frame1.hscrollbar { bottom fillx }

  .cmd.frame1.entry delete 0 end
  .cmd.frame1.entry insert 0 {i.pca processes 2 to 8 input raster map layers and produces the same number of output raster map layers containg the principle components of the input data in decreasing order of variance.}

  .cmd.frame1.entry configure -state disabled



  frame .cmd.frame2 \
    -relief {flat}

  label .cmd.frame2.label \
    -anchor {w} \
    -text {First input raster map layer:} \
    -padx {2}

  scrollbar .cmd.frame2.hscrollbar \
    -command {.cmd.frame2.entry view} \
    -orient {horizontal}

  entry .cmd.frame2.entry \
    -relief {sunken} \
    -width 50 \
    -scrollcommand {.cmd.frame2.hscrollbar set}

  button .cmd.frame2.button \
    -relief {raised} \
    -anchor {n} \
    -text {raster} \
    -command { set file [mapset_listbox raster]
                if { $file != "" } {
                   set name1 $file
                   .cmd.frame2.entry delete 0 end
                   .cmd.frame2.entry insert 0 $file
                   set_command_entry
                }
             }


  pack append .cmd.frame2 \
    .cmd.frame2.label { top fillx } \
    .cmd.frame2.button { right frame n } \
    .cmd.frame2.entry { top fill } \
    .cmd.frame2.hscrollbar { top fillx }



  bind .cmd.frame2.entry <Return> {
       set name1 [%W get] }


  frame .cmd.frame3 \
    -relief {flat}

  label .cmd.frame3.label \
    -anchor {w} \
    -text {Second input raster map layer:} \
    -padx {2}

  scrollbar .cmd.frame3.hscrollbar \
    -command {.cmd.frame3.entry view} \
    -orient {horizontal}

  entry .cmd.frame3.entry \
    -relief {sunken} \
    -width 50 \
    -scrollcommand {.cmd.frame3.hscrollbar set}

  button .cmd.frame3.button \
    -relief {raised} \
    -anchor {n} \
    -text {raster} \
    -command { set file [mapset_listbox raster]
                if { $file != "" } {
                   set name2 $file
                   .cmd.frame3.entry delete 0 end
                   .cmd.frame3.entry insert 0 $file
                   set_command_entry
                }
             }


  pack append .cmd.frame3 \
    .cmd.frame3.label { top fillx } \
    .cmd.frame3.button { right frame n } \
    .cmd.frame3.entry { top fill } \
    .cmd.frame3.hscrollbar { top fillx }



  bind .cmd.frame3.entry <Return> {
       set name2 [%W get] }


  frame .cmd.frame4 \
    -relief {flat}

  label .cmd.frame4.label \
    -anchor {w} \
    -text {Other options available:} \
    -padx {2}

  button .cmd.frame4.button0 \
     -text "input_maps ..." \
     -relief raised \
     -padx 10 \
     -command "input_maps
                set_command_entry"


  frame .cmd.frame5 \
    -relief {flat}

  label .cmd.frame5.label \
    -anchor {w} \
    -text {Output raster map layer to which suffixes are added:} \
    -padx {2}

  scrollbar .cmd.frame5.hscrollbar \
    -command {.cmd.frame5.entry view} \
    -orient {horizontal}

  entry .cmd.frame5.entry \
    -relief {sunken} \
    -width 50 \
    -scrollcommand {.cmd.frame5.hscrollbar set}

  pack append .cmd.frame5 \
    .cmd.frame5.label { top fillx } \
    .cmd.frame5.entry { top fillx } \
    .cmd.frame5.hscrollbar { bottom fillx }

  .cmd.frame5.entry configure -state normal

  bind .cmd.frame5.entry <Return> {
       set oname [%W get] }



  frame .cmd.frame6 \
     -borderwidth {2}

  button .cmd.frame6.ok \
     -text Ok \
     -relief raised \
     -padx 10 \
     -command { 
		if {  $name1 != "" && $name2 != "" && $oname != "" } {
 		set cmd [put_command]
 		if { $cmd != "" } {
 		   eval " exec xterm -title i.pca -geometry 50x5 -exec $cmd " 
 		   destroy .cmd
 		}
 	}
 }

  button .cmd.frame6.cancel \
     -text Cancel \
     -relief raised \
     -padx 10 \
     -command { destroy .cmd }

  pack append .cmd.frame6 \
    .cmd.frame6.ok { left expand } \
    .cmd.frame6.cancel { right expand }

  pack append .cmd.frame4 \
    .cmd.frame4.label { top fillx } \
    .cmd.frame4.button0  { left }



  pack append .cmd \
    .cmd.frame1 { top expand fill } \
    .cmd.frame2 { top expand fill } \
    .cmd.frame3 { top expand fill } \
    .cmd.frame4 { top expand fill } \
    .cmd.frame5 { top expand fill } \
    .cmd.frame0 { top expand fill } \
    .cmd.frame6 { bottom expand fill }


bind .cmd.frame5.entry <KeyRelease> {
		set oname [.cmd.frame5.entry get]
		set_command_entry
}

bind .cmd.frame5.entry <Return> {
		set oname [.cmd.frame5.entry get]
		set_command_entry
}

  grab set .cmd
  tkwait window .cmd

}

global name1
set name1 ""

global name2
set name2 ""

global name3
set name3 ""

global name4
set name4 ""

global name5
set name5 ""

global name6
set name6 ""

global name7
set name7 ""

global name8
set name8 ""

global oname
set oname ""


global database
global location
global mapset
global feature
if { [info exists env(GISDBASE)] == 0 ||
     [info exists env(LOCATION_NAME)] == 0 ||
     [info exists env(MAPSET)] == 0 } {
   puts stdout "GISDBASE, LOCATION_NAME and MAPSET must be set !!!"
   return
}
set database $env(GISDBASE)
set location $env(LOCATION_NAME)
set mapset $env(MAPSET)
set feature ""

proc_i.pca
