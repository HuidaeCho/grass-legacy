

proc output { } {


  toplevel .output

  wm geometry .output +100+20
  wm title .output "output"


  global oname


  frame .output.frame0 \
    -relief {flat}

  label .output.frame0.label \
    -anchor {w} \
    -text {Name of the file to contain the program output:} \
    -padx {2}

  scrollbar .output.frame0.hscrollbar \
    -command {.output.frame0.entry view} \
    -orient {horizontal}

  entry .output.frame0.entry \
    -relief {sunken} \
    -width 50 \
    -scrollcommand {.output.frame0.hscrollbar set}

  pack append .output.frame0 \
    .output.frame0.label { top fillx } \
    .output.frame0.entry { top fillx } \
    .output.frame0.hscrollbar { bottom fillx }

  .output.frame0.entry configure -state normal

  bind .output.frame0.entry <Return> {
       set oname [%W get] }



  frame .output.frame1 \
     -borderwidth {2}

  button .output.frame1.ok \
     -text Ok \
     -relief raised \
     -padx 10 \
     -command {
                  set oname [.output.frame0.entry get]
                 destroy .output }

  button .output.frame1.cancel \
     -text Cancel \
     -relief raised \
     -padx 10 \
     -command {
                  set oname ""
                 destroy .output }

  pack append .output.frame1 \
    .output.frame1.ok { left expand } \
    .output.frame1.cancel { right expand }



  pack append .output \
    .output.frame0 { top expand fill } \
    .output.frame1 { bottom expand fill }



  grab set .output
  tkwait window .output

}




proc flag { } {


  toplevel .flag

  wm geometry .flag +100+20
  wm title .flag "flag"


  global v


  frame .flag.frame0 \
    -relief {flat}

  checkbutton .flag.frame0.checkbutton \
     -text "Run verbosely, displaying all messages." \
     -relief flat \
     -anchor {w} \
     -onvalue "v" \
     -offvalue "" \
     -variable v

  pack append .flag.frame0 \
    .flag.frame0.checkbutton { left }


  frame .flag.frame1 \
     -borderwidth {2}

  button .flag.frame1.ok \
     -text Ok \
     -relief raised \
     -padx 10 \
     -command {
                 destroy .flag }

  button .flag.frame1.cancel \
     -text Cancel \
     -relief raised \
     -padx 10 \
     -command {
                 destroy .flag }

  pack append .flag.frame1 \
    .flag.frame1.ok { left expand } \
    .flag.frame1.cancel { right expand }



  pack append .flag \
    .flag.frame0 { top expand fill } \
    .flag.frame1 { bottom expand fill }



  grab set .flag
  tkwait window .flag

}




proc put_command { } {


  global v
  global iname
  global oname


  set cmd ""

  if {  $v != "" } {
         set cmd "$cmd -$v"
  }

  if {  $iname != "" } {
         set cmd "$cmd input=$iname"
  }

  if {  $oname != "" } {
         set cmd "$cmd output=$oname"
  }

  if { $cmd != "" } {
     set cmd "r.binfer $cmd"
  }
}




proc set_command_entry { } {

  .cmd.frame0.entry configure -state normal
  .cmd.frame0.entry delete 0 end
  .cmd.frame0.entry insert 0 [put_command]
  .cmd.frame0.entry configure -state disabled

}


proc proc_r.binfer { } {


  global v
  global iname
  global oname


  toplevel .cmd

  wm geometry .cmd +100+20

  wm title .cmd "Develop Bayesian Expert System"


  frame .cmd.frame0 \
    -relief {flat}

  label .cmd.frame0.label \
    -anchor {w} \
    -text {Command:} \
    -padx {2}

  scrollbar .cmd.frame0.hscrollbar \
    -command {.cmd.frame0.entry view} \
    -orient {horizontal}

  entry .cmd.frame0.entry \
    -relief {sunken} \
    -width 50 \
    -scrollcommand {.cmd.frame0.hscrollbar set}

  pack append .cmd.frame0 \
    .cmd.frame0.label { top fillx } \
    .cmd.frame0.entry { top fillx } \
    .cmd.frame0.hscrollbar { bottom fillx }

  .cmd.frame0.entry delete 0 end
  .cmd.frame0.entry insert 0 {r.binfer}

  .cmd.frame0.entry configure -state disabled



  frame .cmd.frame1 \
    -relief {flat}

  label .cmd.frame1.label \
    -anchor {w} \
    -text {Description:} \
    -padx {2}

  scrollbar .cmd.frame1.hscrollbar \
    -command {.cmd.frame1.entry view} \
    -orient {horizontal}

  entry .cmd.frame1.entry \
    -relief {sunken} \
    -width 50 \
    -scrollcommand {.cmd.frame1.hscrollbar set}

  pack append .cmd.frame1 \
    .cmd.frame1.label { top fillx } \
    .cmd.frame1.entry { top fillx } \
    .cmd.frame1.hscrollbar { bottom fillx }

  .cmd.frame1.entry delete 0 end
  .cmd.frame1.entry insert 0 {r.binfer is a Bayesian expert system development program.}

  .cmd.frame1.entry configure -state disabled



  frame .cmd.frame2 \
    -relief {flat}

  label .cmd.frame2.label \
    -anchor {w} \
    -text {File containing analysis instructions:} \
    -padx {2}

  scrollbar .cmd.frame2.hscrollbar \
    -command {.cmd.frame2.entry view} \
    -orient {horizontal}

  entry .cmd.frame2.entry \
    -relief {sunken} \
    -width 50 \
    -scrollcommand {.cmd.frame2.hscrollbar set}

  pack append .cmd.frame2 \
    .cmd.frame2.label { top fillx } \
    .cmd.frame2.entry { top fillx } \
    .cmd.frame2.hscrollbar { bottom fillx }

  .cmd.frame2.entry configure -state normal

  bind .cmd.frame2.entry <Return> {
       set iname [%W get] }



  frame .cmd.frame3 \
    -relief {flat}

  label .cmd.frame3.label \
    -anchor {w} \
    -text {Other options available:} \
    -padx {2}

  button .cmd.frame3.button0 \
     -text "output ..." \
     -relief raised \
     -padx 10 \
     -command "output
                set_command_entry"


  button .cmd.frame3.button1 \
     -text "flag ..." \
     -relief raised \
     -padx 10 \
     -command "flag
                set_command_entry"


  frame .cmd.frame4 \
     -borderwidth {2}

  button .cmd.frame4.ok \
     -text Ok \
     -relief raised \
     -padx 10 \
     -command { 
		if {  $iname != "" } {
 		set cmd [put_command]
 		if { $cmd != "" } {
 		   eval " exec xterm -title r.binfer -geometry 50x5 -exec $cmd " 
 		   destroy .cmd
 		}
 	}
 }

  button .cmd.frame4.cancel \
     -text Cancel \
     -relief raised \
     -padx 10 \
     -command { destroy .cmd }

  pack append .cmd.frame4 \
    .cmd.frame4.ok { left expand } \
    .cmd.frame4.cancel { right expand }

  pack append .cmd.frame3 \
    .cmd.frame3.label { top fillx } \
    .cmd.frame3.button0 { left } \
    .cmd.frame3.button1  { left }



  pack append .cmd \
    .cmd.frame1 { top expand fill } \
    .cmd.frame2 { top expand fill } \
    .cmd.frame3 { top expand fill } \
    .cmd.frame0 { top expand fill } \
    .cmd.frame4 { bottom expand fill }


bind .cmd.frame2.entry <KeyRelease> {
		set iname [.cmd.frame2.entry get]
		set_command_entry
}

bind .cmd.frame2.entry <Return> {
		set iname [.cmd.frame2.entry get]
		set_command_entry
}

  grab set .cmd
  tkwait window .cmd

}

global v
set v ""

global iname
set iname ""

global oname
set oname ""


global database
global location
global mapset
global feature
if { [info exists env(GISDBASE)] == 0 ||
     [info exists env(LOCATION_NAME)] == 0 ||
     [info exists env(MAPSET)] == 0 } {
   puts stdout "GISDBASE, LOCATION_NAME and MAPSET must be set !!!"
   return
}
set database $env(GISDBASE)
set location $env(LOCATION_NAME)
set mapset $env(MAPSET)
set feature ""

proc_r.binfer
