

proc get_feature { type } {

  set dir ""
  case $type in {

       {raster} {
                      set dir "cell"
                  }

       {vector} {
                      set dir "dig"
                  }

       {sites} {
                      set dir "site_lists"
                  }

       {label} {
                      set dir "paint/labels"
                  }

       {group} {
                      set dir "group"
                  }

       {icon} {
                      set dir "paint/icons"
                  }

       {region} {
                      set dir "windows"
                  }

       {dlg} {
                      set dir "dlg"
                  }

       {dlg_ascii} {
                      set dir "dlg_ascii"
                  }

  }
  return $dir

}




proc put_list { the_listbox the_list } {

  $the_listbox delete 0 end
  foreach i $the_list {
      $the_listbox insert end $i
  }
}




proc get_list { path } {
  set list ""
  if { [file isdirectory $path] != 1 } {
     return $list
  }
  set current_dir [exec pwd]
  cd $path
  foreach i [exec ls -a [exec pwd]] {
     if { [string compare $i "."] != 0 && [string compare $i ".."] != 0 } {
        lappend list $i
     }
  }
  cd $current_dir
  return $list
}




proc mapset_listbox { type } {

  global database
  global location
  global mapset
  global feature

  global file_name
  set file_name ""

  toplevel .mapset

  wm geometry .mapset +100+100
  wm title .mapset {spatial layer}

  set feature [get_feature $type]

  global mapset_list

  frame .mapset.frame0 \
    -borderwidth {2} \
    -relief {flat}

  label .mapset.frame0.label \
    -anchor {w} \
    -text "Mapset"

  entry .mapset.frame0.mapset \
    -relief {sunken} \
   -width 20

  menubutton .mapset.frame0.mapsets \
    -bitmap {@../bitmap/arrow} \
    -menu {.mapset.frame0.mapsets.pulldown}

  menu .mapset.frame0.mapsets.pulldown

  set mapset_list [get_list "$database/$location"]
  foreach i $mapset_list {
      .mapset.frame0.mapsets.pulldown add command \
          -label $i \
          -command {
                     set mapset [lindex $mapset_list \
                               [.mapset.frame0.mapsets.pulldown index active] ]
                     .mapset.frame0.mapset delete 0 end
                     .mapset.frame0.mapset insert 0 $mapset
                     put_list .mapset.frame1.listbox \
                         [get_list "$database/$location/$mapset/$feature"]
                     set file_name ""
                   }
  }

  pack append .mapset.frame0 \
    .mapset.frame0.label { left } \
    .mapset.frame0.mapset { left } \
    .mapset.frame0.mapsets { right }

  frame .mapset.frame1 \
    -borderwidth {2} \
    -relief {raised}

  listbox .mapset.frame1.listbox \
    -relief {sunken} \
    -geometry 20x10 \
    -yscrollcommand {.mapset.frame1.vscrollbar set}

  scrollbar .mapset.frame1.vscrollbar \
    -command {.mapset.frame1.listbox yview}

  pack append .mapset.frame1 \
    .mapset.frame1.listbox { left expand fill } \
    .mapset.frame1.vscrollbar { right fill }

  frame .mapset.frame2 \
    -borderwidth {2}

  frame .mapset.frame2.frame

  button .mapset.frame2.frame.ok \
     -text Ok \
     -relief raised \
     -padx 10 \
     -command { if { $file_name != "" } {
                   destroy .mapset
               }
              }

  button .mapset.frame2.frame.cancel \
    -text Cancel \
    -relief raised \
    -padx 10 \
    -command { set file_name ""
               destroy .mapset
             }

  pack append .mapset.frame2.frame \
    .mapset.frame2.frame.ok { left expand } \
    .mapset.frame2.frame.cancel { right expand }

  pack append .mapset.frame2 \
    .mapset.frame2.frame { bottom frame center fill }

  pack append .mapset \
    .mapset.frame0 { top expand fill } \
    .mapset.frame1 { top expand fill } \
    .mapset.frame2 { bottom expand fill }

  bind .mapset.frame1.listbox <Button-1> {
        %W select from [%W nearest %y]
        %W select to [%W nearest %y]
	    set file_name [%W get [%W nearest %y]]
  }

  bind .mapset.frame1.listbox <ButtonRelease-1> {
        %W select from [%W nearest %y]
        %W select to [%W nearest %y]
	    set file_name [%W get [%W nearest %y]]
  }

  bind .mapset.frame1.listbox <Double-ButtonPress-1> {
        %W select from [%W nearest %y]
        %W select to [%W nearest %y]
	    set file_name [%W get [%W nearest %y]]
  }

  .mapset.frame0.mapset delete 0 end
  .mapset.frame0.mapset insert 0 $mapset

  .mapset.frame1.listbox delete 0 end
  put_list .mapset.frame1.listbox \
             [get_list "$database/$location/$mapset/$feature"]

  grab set .mapset
  tkwait window .mapset

  return $file_name

}




proc from { } {


  toplevel .from

  wm geometry .from +100+20
  wm title .from "from"


  global fmin


  frame .from.frame0 \
    -relief {flat}

  scale .from.frame0.scale \
     -label "Minimum input map range:" \
     -from 1 \
     -to 2000 \
     -length 350 \
     -orient {horizontal}

  pack append .from.frame0 \
    .from.frame0.scale { left expand fill }

  .from.frame0.scale set 1

  global fmax


  frame .from.frame1 \
    -relief {flat}

  scale .from.frame1.scale \
     -label "Maximum input map range:" \
     -from 1 \
     -to 2000 \
     -length 350 \
     -orient {horizontal}

  pack append .from.frame1 \
    .from.frame1.scale { left expand fill }

  .from.frame1.scale set 1


  frame .from.frame2 \
     -borderwidth {2}

  button .from.frame2.ok \
     -text Ok \
     -relief raised \
     -padx 10 \
     -command {
                  set fmin [.from.frame0.scale get]
                  set fmax [.from.frame1.scale get]
                 destroy .from }

  button .from.frame2.cancel \
     -text Cancel \
     -relief raised \
     -padx 10 \
     -command {
                  set fmin ""
                  set fmax ""
                 destroy .from }

  pack append .from.frame2 \
    .from.frame2.ok { left expand } \
    .from.frame2.cancel { right expand }


bind .from.frame0.scale <Return> {
     focus .from.frame1.scale
}

bind .from.frame1.scale <Return> {
     focus .from.frame0.scale
}


  pack append .from \
    .from.frame0 { top expand fill } \
    .from.frame1 { top expand fill } \
    .from.frame2 { bottom expand fill }



  grab set .from
  tkwait window .from

}




proc to { } {


  toplevel .to

  wm geometry .to +100+20
  wm title .to "to"


  global tmin


  frame .to.frame0 \
    -relief {flat}

  scale .to.frame0.scale \
     -label "Minimum output map range:" \
     -from 1 \
     -to 2000 \
     -length 350 \
     -orient {horizontal}

  pack append .to.frame0 \
    .to.frame0.scale { left expand fill }

  .to.frame0.scale set 1

  global tmax


  frame .to.frame1 \
    -relief {flat}

  scale .to.frame1.scale \
     -label "Maximum output map range:" \
     -from 1 \
     -to 2000 \
     -length 350 \
     -orient {horizontal}

  pack append .to.frame1 \
    .to.frame1.scale { left expand fill }

  .to.frame1.scale set 1


  frame .to.frame2 \
     -borderwidth {2}

  button .to.frame2.ok \
     -text Ok \
     -relief raised \
     -padx 10 \
     -command {
                  set tmin [.to.frame0.scale get]
                  set tmax [.to.frame1.scale get]
                 destroy .to }

  button .to.frame2.cancel \
     -text Cancel \
     -relief raised \
     -padx 10 \
     -command {
                  set tmin ""
                  set tmax ""
                 destroy .to }

  pack append .to.frame2 \
    .to.frame2.ok { left expand } \
    .to.frame2.cancel { right expand }


bind .to.frame0.scale <Return> {
     focus .to.frame1.scale
}

bind .to.frame1.scale <Return> {
     focus .to.frame0.scale
}


  pack append .to \
    .to.frame0 { top expand fill } \
    .to.frame1 { top expand fill } \
    .to.frame2 { bottom expand fill }



  grab set .to
  tkwait window .to

}




proc title { } {


  toplevel .title

  wm geometry .title +100+20
  wm title .title "title"


  global phrase


  frame .title.frame0 \
    -relief {flat}

  label .title.frame0.label \
    -anchor {w} \
    -text {Title for new output raster map layer:} \
    -padx {2}

  scrollbar .title.frame0.hscrollbar \
    -command {.title.frame0.entry view} \
    -orient {horizontal}

  entry .title.frame0.entry \
    -relief {sunken} \
    -width 50 \
    -scrollcommand {.title.frame0.hscrollbar set}

  pack append .title.frame0 \
    .title.frame0.label { top fillx } \
    .title.frame0.entry { top fillx } \
    .title.frame0.hscrollbar { bottom fillx }

  .title.frame0.entry configure -state normal

  bind .title.frame0.entry <Return> {
       set phrase [%W get] }



  frame .title.frame1 \
     -borderwidth {2}

  button .title.frame1.ok \
     -text Ok \
     -relief raised \
     -padx 10 \
     -command {
                  set phrase [.title.frame0.entry get]
                 destroy .title }

  button .title.frame1.cancel \
     -text Cancel \
     -relief raised \
     -padx 10 \
     -command {
                  set phrase ""
                 destroy .title }

  pack append .title.frame1 \
    .title.frame1.ok { left expand } \
    .title.frame1.cancel { right expand }



  pack append .title \
    .title.frame0 { top expand fill } \
    .title.frame1 { bottom expand fill }



  grab set .title
  tkwait window .title

}




proc flag { } {


  toplevel .flag

  wm geometry .flag +100+20
  wm title .flag "flag"


  global q


  frame .flag.frame0 \
    -relief {flat}

  checkbutton .flag.frame0.checkbutton \
     -text "Run quietly and suppress the output of messages." \
     -relief flat \
     -anchor {w} \
     -onvalue "q" \
     -offvalue "" \
     -variable q

  pack append .flag.frame0 \
    .flag.frame0.checkbutton { left }


  frame .flag.frame1 \
     -borderwidth {2}

  button .flag.frame1.ok \
     -text Ok \
     -relief raised \
     -padx 10 \
     -command {
                 destroy .flag }

  button .flag.frame1.cancel \
     -text Cancel \
     -relief raised \
     -padx 10 \
     -command {
                 destroy .flag }

  pack append .flag.frame1 \
    .flag.frame1.ok { left expand } \
    .flag.frame1.cancel { right expand }



  pack append .flag \
    .flag.frame0 { top expand fill } \
    .flag.frame1 { bottom expand fill }



  grab set .flag
  tkwait window .flag

}




proc put_command { } {


  global q
  global iname
  global fmin
  global fmax
  global oname
  global tmin
  global tmax
  global phrase


  set cmd ""

  if {  $q != "" } {
         set cmd "$cmd -$q"
  }

  if {  $iname != "" } {
         set cmd "$cmd input=$iname"
  }

  if {  $fmin != "" || $fmax != "" } {
         set cmd "$cmd from=$fmin,$fmax"
  }

  if {  $oname != "" } {
         set cmd "$cmd output=$oname"
  }

  if {  $tmin != "" || $tmax != "" } {
         set cmd "$cmd to=$tmin,$tmax"
  }


  if {  $phrase != "" } {
         set cmd "$cmd title="$phrase"
  }

  if { $cmd != "" } {
     set cmd "r.rescale $cmd"
  }
}




proc set_command_entry { } {

  .cmd.frame0.entry configure -state normal
  .cmd.frame0.entry delete 0 end
  .cmd.frame0.entry insert 0 [put_command]
  .cmd.frame0.entry configure -state disabled

}


proc proc_r.rescale { } {


  global q
  global iname
  global fmin
  global fmax
  global oname
  global tmin
  global tmax
  global phrase


  toplevel .cmd

  wm geometry .cmd +100+20

  wm title .cmd "Rescale Range of Category Values"


  frame .cmd.frame0 \
    -relief {flat}

  label .cmd.frame0.label \
    -anchor {w} \
    -text {Command:} \
    -padx {2}

  scrollbar .cmd.frame0.hscrollbar \
    -command {.cmd.frame0.entry view} \
    -orient {horizontal}

  entry .cmd.frame0.entry \
    -relief {sunken} \
    -width 50 \
    -scrollcommand {.cmd.frame0.hscrollbar set}

  pack append .cmd.frame0 \
    .cmd.frame0.label { top fillx } \
    .cmd.frame0.entry { top fillx } \
    .cmd.frame0.hscrollbar { bottom fillx }

  .cmd.frame0.entry delete 0 end
  .cmd.frame0.entry insert 0 {r.rescale}

  .cmd.frame0.entry configure -state disabled



  frame .cmd.frame1 \
    -relief {flat}

  label .cmd.frame1.label \
    -anchor {w} \
    -text {Description:} \
    -padx {2}

  scrollbar .cmd.frame1.hscrollbar \
    -command {.cmd.frame1.entry view} \
    -orient {horizontal}

  entry .cmd.frame1.entry \
    -relief {sunken} \
    -width 50 \
    -scrollcommand {.cmd.frame1.hscrollbar set}

  pack append .cmd.frame1 \
    .cmd.frame1.label { top fillx } \
    .cmd.frame1.entry { top fillx } \
    .cmd.frame1.hscrollbar { bottom fillx }

  .cmd.frame1.entry delete 0 end
  .cmd.frame1.entry insert 0 {r.rescale rescales the range of category values in a raster map layer.}

  .cmd.frame1.entry configure -state disabled



  frame .cmd.frame2 \
    -relief {flat}

  label .cmd.frame2.label \
    -anchor {w} \
    -text {Raster map layer whose category values are to be rescaled:} \
    -padx {2}

  scrollbar .cmd.frame2.hscrollbar \
    -command {.cmd.frame2.entry view} \
    -orient {horizontal}

  entry .cmd.frame2.entry \
    -relief {sunken} \
    -width 50 \
    -scrollcommand {.cmd.frame2.hscrollbar set}

  button .cmd.frame2.button \
    -relief {raised} \
    -anchor {n} \
    -text {raster} \
    -command { set file [mapset_listbox raster]
                if { $file != "" } {
                   set iname $file
                   .cmd.frame2.entry delete 0 end
                   .cmd.frame2.entry insert 0 $file
                   set_command_entry
                }
             }


  pack append .cmd.frame2 \
    .cmd.frame2.label { top fillx } \
    .cmd.frame2.button { right frame n } \
    .cmd.frame2.entry { top fill } \
    .cmd.frame2.hscrollbar { top fillx }



  bind .cmd.frame2.entry <Return> {
       set iname [%W get] }


  frame .cmd.frame3 \
    -relief {flat}

  label .cmd.frame3.label \
    -anchor {w} \
    -text {New, rescaled raster map layer:} \
    -padx {2}

  scrollbar .cmd.frame3.hscrollbar \
    -command {.cmd.frame3.entry view} \
    -orient {horizontal}

  entry .cmd.frame3.entry \
    -relief {sunken} \
    -width 50 \
    -scrollcommand {.cmd.frame3.hscrollbar set}

  pack append .cmd.frame3 \
    .cmd.frame3.label { top fillx } \
    .cmd.frame3.entry { top fillx } \
    .cmd.frame3.hscrollbar { bottom fillx }

  .cmd.frame3.entry configure -state normal

  bind .cmd.frame3.entry <Return> {
       set oname [%W get] }



  frame .cmd.frame4 \
    -relief {flat}

  label .cmd.frame4.label \
    -anchor {w} \
    -text {Other options available:} \
    -padx {2}

  button .cmd.frame4.button0 \
     -text "from ..." \
     -relief raised \
     -padx 10 \
     -command "from
                set_command_entry"


  button .cmd.frame4.button1 \
     -text "to ..." \
     -relief raised \
     -padx 10 \
     -command "to
                set_command_entry"


  button .cmd.frame4.button2 \
     -text "title ..." \
     -relief raised \
     -padx 10 \
     -command "title
                set_command_entry"


  button .cmd.frame4.button3 \
     -text "flag ..." \
     -relief raised \
     -padx 10 \
     -command "flag
                set_command_entry"


  frame .cmd.frame5 \
     -borderwidth {2}

  button .cmd.frame5.ok \
     -text Ok \
     -relief raised \
     -padx 10 \
     -command { 
		if {  $iname != "" && $oname != "" } {
 		set cmd [put_command]
 		if { $cmd != "" } {
 		   eval " exec xterm -title r.rescale -geometry 50x5 -exec $cmd " 
 		   destroy .cmd
 		}
 	}
 }

  button .cmd.frame5.cancel \
     -text Cancel \
     -relief raised \
     -padx 10 \
     -command { destroy .cmd }

  pack append .cmd.frame5 \
    .cmd.frame5.ok { left expand } \
    .cmd.frame5.cancel { right expand }

  pack append .cmd.frame4 \
    .cmd.frame4.label { top fillx } \
    .cmd.frame4.button0 { left } \
    .cmd.frame4.button1 { left } \
    .cmd.frame4.button2 { left } \
    .cmd.frame4.button3  { left }



  pack append .cmd \
    .cmd.frame1 { top expand fill } \
    .cmd.frame2 { top expand fill } \
    .cmd.frame3 { top expand fill } \
    .cmd.frame4 { top expand fill } \
    .cmd.frame0 { top expand fill } \
    .cmd.frame5 { bottom expand fill }


bind .cmd.frame3.entry <KeyRelease> {
		set oname [.cmd.frame3.entry get]
		set_command_entry
}

bind .cmd.frame3.entry <Return> {
		set oname [.cmd.frame3.entry get]
		set_command_entry
}

  grab set .cmd
  tkwait window .cmd

}

global q
set q ""

global iname
set iname ""

global fmin
set fmin ""

global fmax
set fmax ""

global oname
set oname ""

global tmin
set tmin ""

global tmax
set tmax ""

global phrase
set phrase ""


global database
global location
global mapset
global feature
if { [info exists env(GISDBASE)] == 0 ||
     [info exists env(LOCATION_NAME)] == 0 ||
     [info exists env(MAPSET)] == 0 } {
   puts stdout "GISDBASE, LOCATION_NAME and MAPSET must be set !!!"
   return
}
set database $env(GISDBASE)
set location $env(LOCATION_NAME)
set mapset $env(MAPSET)
set feature ""

proc_r.rescale
