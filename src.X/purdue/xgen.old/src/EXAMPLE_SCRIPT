/*
 * since the script is passed thru cpp, you can use all of the preprocessor 
 * goodies in your Xgen script.
 */
#define RedFG  foreground:red
#define WhiteBG background:white
 
#define RedBG  background:red
#define WhiteFG foreground:white

/*
 * this section is the global section, you can set a global foreground color
 * background color, font, fixed font, etc...
 */
RedBG
WhiteFG
font:"*adobe*helv*r*normal*14*"

/*
 * beginning of the first environment...
 */
environment firstEnv
	/* 
	 * here you can define the shells that are popped up when this 
	 * environment is made the current environment (by listing it 
	 * first or later when a getenv is done).
	 */
	initialshells:"Intro Xclock"
	/*
	 * When entering an environment or  a shell, all runforeground/runbackground
	 * commands found will be executed.....
	 * All of the resources used in running commands are available:
	 *		captureoutput
	 *		commandarg
	 *		runbackground
	 *		runforeground
	 * 
	 */
	captureoutput:null
	runforeground:"df" 
{
	staticmenu Xclock 
		x:200 
		y:100 
		background:DodgerBlue
		override:on
	(
		button "Xclock" 
			runbackground:"xclock" ;
	)
	/* 
	 * a messageboard shell....
	 */
	messageboard Intro 
		titlestring:"Main Environment"
		x:350 
		y:100 
		background:DodgerBlue
	/*
	 * When entering an environment or  a shell, the set command can be used
	 */
		setSELECTED:0
		override:on
	(
		message "An extensive example xgen script for Jim." 
			/* 
			 * the max number of chars that would be displayed on a line, 
			 * the message is parsed at word boundaries and will not 
			 * exceed this number of characters per line of the message.
			 */
			columns:15 
			alignment:center /* can't get XmNalignment to work in Motif */
			font:"*adobe*helv*r*normal*18*" 
			foreground:yellow background:DodgerBlue ;
		button labeldddrr
			/*
			 * The set procedure can take its value from running a command.
			 */
			setSELECTED:"!expr $SELECTED + 1"
			runforeground:"echo $SELECTED > /dev/tty"
			labelpixmap:"./mtn.xbm" 
			popup:DP;
		button "Run a UNIX command" 
			popup:RunCommand;
		button "List examples" 
			getenv:ListEnv ;
		button "Slider example" 
			popup:PreSliderBoard;
		button "Dynamicmenu example" 
			popup:Dynamic;
		button "Table example" 
			getenv:TableEnv;
		button "Toggle examples" 
			getenv:ToggleEnv;
		button pixmap
			labelpixmap:"./gnu.xbm" 
			popup:Separators ;
		button "Quit" 
			RedFG
			WhiteBG
			popdown:Intro
			exit:0 ;
	)
	staticmenu DP x:200 y:200
	(
		button sdfgsdgf labelpixmap:"./dp.xbm" popdown:DP ;
	)
	/* 
	 * a commandboard shell....all objects must be located with x and y
	 * for now. Sometime I might try to do a logical layout but until then
	 * just specify the position.
	 */
	commandboard RunCommand 
		titlestring:"Execute a UNIX command"
		x:250 
		y:250 
	(
		label labelxyz
			titlestring:"Enter your UNIX command" 
			x:10 
			y:10 
			width:250 ;
		textentry te1  
			x:10 
			y:40 
			width:250 ;
		button button001
			titlestring:"OK (run the command)" 
			x:10 
			y:100
			width:250 
			/* the []'d stuff means "put the value of the object in here */
			setCOMMAND:"[te1]"
			/* could have placed the []'d stuff directly in this command */
			runforeground:"echo $COMMAND > /dev/tty"
			/* 
			 * captureoutput keywords only affect the next run command.. 
			 * the null argument means put it in a scrollable text field 
			 */
			captureoutput:null
			runforeground:"$COMMAND"
			popdown:RunCommand ;
		button "Clear"
			x:10 
			y:130
			width:250 
			/* 
			 * clear will clear any clearable object in this shell...
			 * the all argument means clear all clearable objects in 
			 * this shell.
			 */
			clear:all ;
		button "Return"
			x:10 
			y:160
			width:250 
			popdown:RunCommand ;
	)
	commandboard PreSliderBoard x:250 y:250
	(
		label "Enter slider minimum" x:0 y:0 ;
		textentry tes1 x:0 y:50 ;
		label "Enter slider maximum" x:0 y:100 ;
		textentry tes2 x:0 y:150 ;
		label "Enter slider start value" x:0 y:200 ;
		textentry tes3 x:0 y:250 ;
		button Accept
			setMIN:"[tes1]"
			setMAX:"[tes2]"
			setSTART:"[tes3]" 
			runforeground:"echo $MIN $MAX $START > /dev/tty" 
			popdown:PreSliderBoard
			popup:SliderBoard x:0 y:300 ;
	)
	commandboard SliderBoard x:250 y:250 
		background:cadetblue
		foreground:antiquewhite
	(
		slider slider001
			titlestring:"Set probability of boredom"
			x:10 
			y:10 
			foreground:cadetblue
			background:antiquewhite
			/* 
			 * this sliderwidth, sliderheight stuff doesn't work in 
			 * Motif.....it tries to size the slider to the title..
			 */
			sliderwidth:300 
			/* obvious ? */
			orientation:horizontal
			/* 
			 * the following resources describe the numerical range of the
			 * slider. Since the max is 100 and the decimalpoints is 2 the 
			 * maximum value would be 1.00, and the startvalue would be 0.50.
			 */
			decimalpoints:2
			/* 
			 * variables can be used to make assignments to integer, real, or
			 * boolean resources. They are evaluated at shell creation time.
			 * Shells (not initialshell) are created when first popped up.
			 */
			maximum:$MAX
			startvalue:$START
			minimum:$MIN ;
		button "Accept" 
			x:10
			y:100
			foreground:cadetblue
			background:antiquewhite
			width:250
			runforeground:"echo [slider001] > /dev/tty"
			popdown:SliderBoard ;
	)
	/* dynamicmenu's must have the updatefrom resource... */
	dynamicmenu Dynamic x:250 y:250  updatefrom:"!ls -l"
	(
		/* 
		 * the button description having the name "dynamic" will be
		 * expanded into however many buttons are indicated by the updatefrom
		 * resource. The updatefrom can be a command (starts with !,the 
		 * results will be the button labels), a file (the contents will be 
		 * the buttons labels), or a directory (the contents will be the 
		 * button labels).
		 */
		button dynamic
			/* 
			 * buttonname on a set command means the button label of the 
			 * button that was activated (also works in staticmenu's).
			 */
			setBUTTON:buttonname
			runforeground:"echo $BUTTON > /dev/tty"
			popdown:Dynamic ;
	)
	staticmenu Separators x:250 y:250
	(
		separator se1
			separatortype:singleline ;
		separator se2
			separatortype:doubleline ;
		separator se3
			separatortype:singledashedline ;
		separator se4
			separatortype:doubledashedline ;
		separator se5
			separatortype:noline ;
		separator se6
			separatortype:shadowetchedin ;
		separator se7
			separatortype:shadowetchedout ;
		button "Return" 
			RedFG
			WhiteBG
			popdown:Separators;
	)
}

environment ListEnv
	initialshells:ListMenu
{
	staticmenu ListMenu x:250 y:250
	(
		button "Do a Single Selection List" 
			popup:SSList;
		button "Do a Multiple Selection List" 
			popup:MSList;
		button "Do a Extended Selection List" 
			popup:ESList;
		button "Do a Browse Selection List" 
			popup:BSList;
		button "Return" 
			RedFG
			WhiteBG
			popdown:ListMenu
			getenv:firstEnv ;
	)
	commandboard SSList x:250 y:250
	(
		/*
		 * lists are optionally scrollable lists of items (if visibleitems > 
		 * the total number of items) that can be selected using one of 
		 * 4 selection techniques (listtype's)
		 */
		list list1
			x:0 y:0
			listtype:single
			visibleitems:6
			listelement:"element1"
			listelement:"element2"
			listelement:"element3"
			listelement:"element4"
			listelement:"element5"
			listelement:"element6"
			listelement:"element7"
			listelement:"element8"
			listelement:"element9"
			listelement:"element10"
			listelement:"element11"
			listelement:"element12" ;
		button OK
			x:0 y:150
			runforeground:"echo 'you selected [list1]' > /dev/tty"
			popdown:SSList ;
	)
	commandboard MSList x:250 y:250
	(
		list list2
			x:0 y:0
			listtype:multiple
			visibleitems:4
			/* 
			 * this listelement, valuestring combo means that if the item
			 * "Long Listing" is selected the value of this object will be "l"
			 */
			listelement:"Long Listing"
			valuestring:"l"
			listelement:"Invisible Listing"
			valuestring:"a"
			listelement:"Recursive Listing"
			valuestring:"R"
			listelement:"Time Listing"
			valuestring:"t" ;
		button Clear
			x:0 y:250
			clear:all ;
		button OK
			x:0 y:350
			captureoutput:null
			runforeground:"ls -[list2]"
			popdown:MSList ;
	)
	commandboard ESList x:250 y:250
	(
		list list3
			x:0 y:0
			listtype:extended
			listelement:"Long Listing"
			valuestring:"l"
			listelement:"Invisible Listing"
			valuestring:"a"
			listelement:"Recursive Listing"
			valuestring:"R"
			listelement:"Time Listing"
			valuestring:"t" ;
		button OK
			x:0 y:350
			captureoutput:null
			runforeground:"ls -[list3]"
			popdown:ESList ;
	)
	commandboard BSList x:250 y:250
	(
		list list4
			x:0 y:0
			listtype:browse
			visibleitems:6
			listelement:"element1"
			listelement:"element2"
			listelement:"element3"
			listelement:"element4"
			listelement:"element5"
			listelement:"element6"
			listelement:"element7"
			listelement:"element8"
			listelement:"element9"
			listelement:"element10"
			listelement:"element11"
			listelement:"element12" ;
		button OK
			x:0 y:350
			runforeground:"echo 'you selected [list4]' > /dev/tty"
			popdown:BSList ;
	)
}

environment ToggleEnv
	initialshells:ToggleMenu
{
	staticmenu ToggleMenu x:250 y:250
	(
		button "Do a toggle list"
			popup:ToggleList;
		button "Do a radiobox list"
			popup:Radiobox ;
		button "Return"
			popdown:ToggleList
			getenv:firstEnv ;
	)
	commandboard ToggleList x:250 y:250
	(
		/*
		 * toggle's act much like list objects.
		 */
		toggle tog1
			x:0 y:0
			listelement:"Long Listing"
			valuestring:"l"
			listelement:"Invisible Listing"
			valuestring:"a"
			listelement:"Recursive Listing"
			valuestring:"R"
			listelement:"Time Listing"
			valuestring:"t"
		;
		button Clear
			x:0 y:250
			clear:all ;
		button OK
			x:0 y:150
			captureoutput:null
			runforeground:"ls -[tog1]"
			popdown:ToggleList ;
	)
	commandboard Radiobox x:250 y:250
	(
		toggle tog2
			x:0 y:0
			/* obvious ? */
			toggletype:radio
			listelement:"Long Listing"
			valuestring:"-l"
			listelement:"Invisible Listing"
			valuestring:"-a"
			listelement:"Recursive Listing"
			valuestring:"-R"
			listelement:"Time Listing"
			valuestring:"-t"
		;
		button OK
			x:0 y:150
			runforeground:"echo [tog2] > /dev/tty"
			popdown:Radiobox ;
	)
}

environment TableEnv
	initialshells:Table
{
	commandboard Table x:250 y:250 
	(
		/*
		 * table's are pretty neat, in my opinion.
		 */
		table T1
			x:10 
			y:10 
			/*
			 * the headings on the columns or rows of the table, and the title.
			 * if left out there are none.
			 * Note that the headings are comma separated (don't try to 
			 * crash this,because you WILL succeed at this point).
			 */
			columnheadings:"Northing,Easting,Depth,Owner"
			rowheadings:"1,2,3,4"
			titlestring:"Well Site Info"
			/* obvious ? */
			columns:4 
			columnsdisplayed:4 
			columnwidth:100
			rows:4 
			/* 
			 * rowvalue will supply initial values for the table, the same 
			 * comment is applicable here
			 */
			rowvalue:"53443,435434,200,Jim Westervelt"
			rowvalue:"53578,436457,197,Michael Shapiro"
			rowvalue:"54578,435534,540,Joe Blow"
			rowvalue:"53297,435425,120,Well Owner" ;
		button "Accept" 
			x:10
			y:200
			width:250
			/*
			 * Elements of the table are accessible bye the following 
			 * specifications: 
			 *
			 *         tablename -> the whole table
			 *         tablename(N) -> the Nth row of the table
			 *         tablename(N,M) -> the Nth row and Mth column entry
			 */
			setTABLE:"[T1]"
			setROW:"[T1(1)]"
			setCELL:"[T1(1,2)]"
			runforeground:"echo TABLE: > /dev/tty"
			runforeground:"echo $TABLE > /dev/tty"
			runforeground:"echo ROW: > /dev/tty"
			runforeground:"echo $ROW > /dev/tty"
			runforeground:"echo CELL: > /dev/tty"
			runforeground:"echo $CELL > /dev/tty" ;
		button "Clear All" 
			x:10
			y:250
			width:250
			clear:T1 ;
		button "Clear Row 1" 
			x:10
			y:300
			width:250
			clear:"T1(1)" ;
		button "Clear Element Row 1 Column 2" 
			x:10
			y:350
			width:250
			clear:"T1(1,2)" ;
		button "Return" 
			x:10
			y:400
			width:250
			popdown:Table
			getenv:firstEnv ;
	)
}
