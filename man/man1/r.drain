.TH r.drain 1 "" "" "" ""
.SH NAME
\*Lr.drain\*O  - 
Traces a flow through an elevation model on a raster map layer. 
.br
(GRASS Raster Program)
.SH SYNOPSIS
\*Lr.drain\*O 
.br
\*Lr.drain help\*O 
.br
\*Lr.drain\*O
\*Linput=\*Oname
\*Loutput=\*Oname 
[\*Lcoordinate=\*Ox,y,...]]
\*Lnull_value=\*Ovalue
.SH DESCRIPTION
r.drain traces a flow through a least-cost path in an 
elevation model. The elevation surface (a raster map layer input) 
might be the cumulative cost map generated by the 
\*Lr.cost\*O 
program.
The output result (also a raster map layer) will show one or more 
least-cost paths between each user-provided location(s) and the low spot 
(low category values) in the input model. 
.PP
The program will be run non-interactively, if the user specifies 
the names of raster map layers and any desired options on the 
command line, using the form 
.VL 4m
\*Lr.drain\*O
\*Linput=\*Oname
\*Loutput=\*Oname
[\*Lcoordinate=\*Ox,y,...]]
\*Lnull_value=\*Ovalue
.LE
where the input name is the name of a raster map layer to 
be used in calculating drainage, 
the output name is the name of the raster map layer to contain output, 
and each x,y coordinate pair is the geographic location of a point 
from which drainage is to be calculated. By default, null cells in the input map
are excluded from the path evaluation. Alternately, a floating point value
can be assigned to null cells with null_value.
.PP
Alternately, the user can simply type \*Lr.drain\*O on the command line, 
without program arguments. In this case, the user will be prompted for 
needed parameter values using the standard GRASS 
\*Lparser\*O interface.
.SH OPTIONS
Program parameters are as follows. 
.SH Parameters:
.VL 4m
.LI "\*Linput=\*Oname
Name of raster map layer containing cell cost information. 
.LI "\*Loutput=\*Oname
Name of raster map layer to contain program output. 
.LI "\*Lcoordinate=\*Ox,y,...]
Each x,y pair is the easting and northing (respectively) of 
a starting point from which a least-cost corridor will be developed. 
As many points as desired can be input. 
(But, see BUGS below.) 
.LI "\*Lnull_value=\*Ovalue
Floating point value assign to null cells. By defaults, null cells
are excluded from the path evaluation.
.LE
.SH EXAMPLE
Consider the following example: 
\*C
.DS
Input:                          Output:
  ELEVATION SURFACE               LEAST COST PATH
. . ----- . . . . . . . . . .    . . . . . . . . . . . . . . .
. 20| 19| 17. 16. 17. 16. 16.    .   . 1 . 1 . 1 .   .   .   .
. . |___| . . . . . . . . . .    . . . . . . . . . . . . . . .
. 18. 18. 24. 18. 15. 12. 11.    .   .   .   .   . 1 .   .   .
. . . . . . . . . . . . . . .    . . . . . . . . . . . . . . .
. 22. 16. 16. 18. 10. 10. 10.    .   .   .   .   . 1 .   .   .
. . . . . . . . . . . . . . .    . . . . . . . . . . . . . . .
. 17. 15. 15. 15. 10. 8 . 8 .    .   .   .   .   .   . 1 .   .
. . . . . . . . . . . . . . .    . . . . . . . . . . . . . . .
. 24. 16. 8 . 7 . 8 . 0 .12 .    .   .   .   .   .   . 1 .   .
. . . . . . . . . . . . . . .    . . . . . . . . . . . . . . .
. 17. 9 . 8 . 7 . 8 . 6 .12 .    .   .   .   .   .   .   .   .
. . . . . . . . . . . . . . .    . . . . . . . . . . . . . . .
.DE
\*O
.PP
The user-provided starting location in the above example is 
the boxed \*L19\*O in the left-hand map. The path in the output 
shows the least-cost corridor for moving from the starting 
box to the lowest (smallest) possible point. This is the path a raindrop 
would take in this landscape. 
.SH BUGS
Currently, r.drain will not actually provide output for more 
than one pair of input coordinates stated on the command line. 
.PP
r.drain also currently finds only the lowest point 
(the cell having the smallest category value) in the 
input file that can be reached through directly adjacent cells 
that are less than or equal in value to the cell reached immediately 
prior to it; therefore, it will not necessarily reach the lowest point 
in the input file. It currently finds pits in the data, rather 
than the lowest point present. 
.PP
Only one least-cost path is currently printed to the output file for the user. 
.PP
Sometimes, when the differences among cell category values 
in the 
\*Lr.cost\*O 
cumulative cost surface output are small, 
this cumulative cost output cannot accurately be used as input to 
r.drain 
(r.drain will output bad results). 
This problem can be circumvented by making the differences between 
cell category values in the cumulative cost output bigger. 
It is recommended that, if the output from 
\*Lr.cost\*O 
is to be used 
as input to r.drain\*O, the user multiply the input cost surface map 
to 
\*Lr.cost\*O 
by the value of the map resolution, before running 
\*Lr.cost\*O.
This can be done using 
\*Lr.mapcalc\*O or other programs. 
The map resolution can be found using 
\*Lg.region\*O.
.SH SEE ALSO
\*Lg.region\*O
\*Lr.cost\*O
\*Lr.mapcalc\*O
\*Lparser\*O
.SH AUTHOR
Kewan Q. Khawaja, Intelligent Engineering
Systems Laboratory, M.I.T.
.PP
Update to Grass 5.0 format:
Pierre de Mouveaux  (pmx@audiovu.com)
