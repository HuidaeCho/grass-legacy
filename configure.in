AC_INIT(README)
AC_PREFIX_DEFAULT(/usr/local/grass-5.0b)
AC_CONFIG_HEADER(src/include/config.h)
AC_CANONICAL_HOST
AC_PROG_CC

AC_MSG_CHECKING(whether ld -s works)
STRIPFLAG=
ac_save_ldflags=${LDFLAGS}
LDFLAGS=-s
AC_TRY_LINK(,,STRIPFLAG=-s; AC_MSG_RESULT(yes),AC_MSG_RESULT(no))
LDFLAGS=${ac_save_ldflags}
AC_SUBST(STRIPFLAG)

AC_PROG_INSTALL
AC_PROG_LEX
AC_PROG_RANLIB
AC_CHECK_PROGS(ENV, env)
AC_CHECK_PROGS(F77, f77 g77)
AC_PATH_XTRA
AC_HEADER_STDC
AC_CHECK_HEADERS(curses.h limits.h termio.h termios.h unistd.h values.h zlib.h)
AC_CHECK_HEADERS(sys/ioctl.h sys/mtio.h sys/resource.h sys/time.h)
AC_CHECK_HEADERS(sys/timeb.h sys/types.h sys/utsname.h)
AC_HEADER_TIME
AC_TYPE_OFF_T
AC_TYPE_UID_T

AC_MSG_CHECKING(curses.h WINDOW structure component)
CURSES_MAXY=NONE
AC_TRY_COMPILE([
#include <curses.h>
  WINDOW w;
  ],[w.maxy = 0;],
  CURSES_MAXY=maxy)
AC_TRY_COMPILE([
#include <curses.h>
  WINDOW w;
  ],[w._maxy = 0;],
  CURSES_MAXY=_maxy)
AC_DEFINE_UNQUOTED(CURSES_MAXY,$CURSES_MAXY)
AC_SUBST(CURSES_MAXY)
AC_MSG_RESULT($CURSES_MAXY)

AC_CHECK_FUNCS(ftime gethostname gettimeofday lseek nice time uname)
AC_CHECK_FUNCS(seteuid setpriority setreuid setruid)
AC_FUNC_SETPGRP

CURSESLIB=
if test -z "${CURSESLIB}"; then
AC_CHECK_LIB(ncurses, initscr, CURSESLIB=-lncurses)
fi
if test -z "${CURSESLIB}"; then
AC_CHECK_LIB(curses, initscr, CURSESLIB=-lcurses)
fi
AC_SUBST(CURSESLIB)

COMPATLIB=
if test -z "${COMPATLIB}"; then
AC_CHECK_LIB(compat, gtty, COMPATLIB=-lcompat)
fi
AC_SUBST(COMPATLIB)

TERMLIB=
if test -z "${TERMLIB}"; then
AC_CHECK_LIB(termlib, tgetent, TERMLIB=-ltermlib)
fi
AC_SUBST(TERMLIB)

XDRLIB=
if test -z "${XDRLIB}"; then
AC_CHECK_LIB(sun, xdr_int, XDRLIB=-lsun)
fi
if test -z "${XDRLIB}"; then
AC_CHECK_LIB(nsl, xdr_int, XDRLIB=-lnsl)
fi
if test -z "${XDRLIB}"; then
AC_CHECK_LIB(rpclib, xdr_int, XDRLIB=-lrpclib)
fi
AC_SUBST(XDRLIB)

ZLIB=
if test -z "${ZLIB}"; then
AC_CHECK_LIB(z, deflate, ZLIB=-lz)
fi
AC_SUBST(ZLIB)

# BINDIR=/usr/local/bin

BINDIR=
if test -z "${exec_prefix}"; then
exec_prefix="/usr/local"
fi
if test -z "${bindir}"; then
BINDIR=$(exec_prefix)/bin
else
BINDIR="${bindir}"
fi
AC_SUBST(BINDIR)

AC_ARG_WITH(includes,
    [  --with-includes=DIR     site header files in DIR],
    [
	case "$withval" in
	"" | y | ye | yes | n | no)
	    AC_MSG_ERROR([*** You must supply an argument to the --with-includes option.])
	  ;;
	esac
	INC_DIRS="$withval"
    ])

if test "$INC_DIRS"; then
	for dir in $INC_DIRS; do
		if test -d "$dir"; then
			INCLUDE_DIRS="$INCLUDE_DIRS -I$dir"
		else
			AC_MSG_WARN([*** Include directory $dir does not exist.])
		fi
	done
	AC_MSG_CHECKING(additional include dirs)
	AC_MSG_RESULT($INCLUDE_DIRS)
	CPPFLAGS="$CPPFLAGS $INCLUDE_DIRS"
fi
AC_SUBST(INCLUDE_DIRS)

AC_ARG_WITH(libs,
    [  --with-libs=DIR         also search for libraries in DIR],
    [
	case "$withval" in
	"" | y | ye | yes | n | no)
	    AC_MSG_ERROR([*** You must supply an argument to the --with-libs option.])
	  ;;
	esac
	LIB_DIRS="$withval"
    ])

if test "$LIB_DIRS"; then
	for dir in $LIB_DIRS; do
		if test -d "$dir"; then
			LIBRARY_DIRS="$LIBRARY_DIRS -L$dir"
		else
			AC_MSG_WARN([*** Library directory $dir does not exist.])
		fi
	done
	AC_MSG_CHECKING(additional library dirs)
	AC_MSG_RESULT($LIBRARY_DIRS)
	LDFLAGS="$LDFLAGS $LIBRARY_DIRS"
fi
AC_SUBST(LIBRARY_DIRS)

# Some search directories to use as the base for other searches when not specified
my_inc_dirs="/usr/include /usr/local/include /opt/include /usr/freeware/include"
my_lib_dirs="/usr/lib /usr/local/lib /opt/lib /usr/freeware/lib"

# TIFF includes and library checks....
AC_ARG_WITH(tiff-includes,
    [  --with-tiff-includes=DIR
                          site header files for TIFF in DIR],
    [
	case "$withval" in
	"" | y | ye | yes | n | no)
	    AC_MSG_ERROR([*** You must supply an argument to the --with-tiff-includes option.])
	  ;;
	esac
	tiff_inc_dirs="$withval"
    ])

TIFF_INCLUDE_DIRS=
if test "$tiff_inc_dirs"; then
	for dir in $tiff_inc_dirs; do
		if test -d "$dir"; then
			TIFF_INCLUDE_DIRS="$TIFF_INCLUDE_DIRS -I$dir"
		else
			AC_MSG_WARN([*** TIFF include directory $dir does not exist.])
		fi
	done
	AC_MSG_CHECKING(TIFF include dirs)
	AC_MSG_RESULT($TIFF_INCLUDE_DIRS)
fi

if test -z "$TIFF_INCLUDE_DIRS"; then
	AC_MSG_CHECKING(TIFF include dirs)
	for dir in $my_inc_dirs; do
		if test -z "$TIFF_INCLUDE_DIRS" && test -d "$dir" && test -f "$dir/tiffio.h"; then
			TIFF_INCLUDE_DIRS="-I$dir"
		fi
	done
	AC_MSG_RESULT($TIFF_INCLUDE_DIRS)
fi
if test -z "$TIFF_INCLUDE_DIRS"; then
	AC_MSG_WARN([*** Couldn't find 'tiffio.h'.])
fi
AC_SUBST(TIFF_INCLUDE_DIRS)

AC_ARG_WITH(tiff-libs,
    [  --with-tiff-libs=DIR    also search for TIFF libraries in DIR],
    [
	case "$withval" in
	"" | y | ye | yes | n | no)
	    AC_MSG_ERROR([*** You must supply an argument to the --with-tiff-libs option.])
	  ;;
	esac
	tiff_lib_dirs="$withval"
    ])

TIFF_LIB_DIRS=
if test "$tiff_lib_dirs"; then
	for dir in $tiff_lib_dirs; do
		if test -d "$dir"; then
			TIFF_LIBRARY_DIRS="$TIFF_LIBRARY_DIRS -L$dir"
		else
			AC_MSG_WARN([*** TIFF library directory $dir does not exist.])
		fi
	done
	AC_MSG_CHECKING(additional TIFF library dirs)
	AC_MSG_RESULT($TIFF_LIBRARY_DIRS)
fi

ldflags_save="$LDFLAGS"
LDFLAGS="$LDFLAGS $TIFF_LIBRARY_DIRS"
AC_CHECK_LIB(tiff, TIFFOpen, has_tiff_lib=1)
LDFLAGS="$ldflags_save"
if test -z "$has_tiff_lib"; then
	AC_MSG_WARN([*** Failed to find TIFF library])
fi
AC_SUBST(TIFF_LIBRARY_DIRS)

# TCL/TK includes and library tests...
AC_ARG_WITH(tcltk-includes,
    [  --with-tcltk-includes=DIR
                          site header files for TCL and TK in DIR],
    [
	case "$withval" in
	"" | y | ye | yes | n | no)
	    AC_MSG_ERROR([*** You must supply an argument to the --with-tcltk-includes option.])
	  ;;
	esac
	tclincdir="$withval"
	tkincdir="$withval"
    ])

TKINCDIR=
if test "$tkincdir"; then
	for dir in $tkincdir; do
		if test -d "$dir"; then
			TKINCDIR="$TKINCDIR -I$dir"
		else
			AC_MSG_WARN([*** TK include directory $dir does not exist.])
		fi
	done
	AC_MSG_CHECKING(TK include dirs)
	AC_MSG_RESULT($TKINCDIR)
fi
if test -z "$TKINCDIR"; then
	AC_MSG_CHECKING(TK include dirs)
	for my_dir in $my_inc_dirs; do
		if test -z "$TKINCDIR" && test -d $my_dir; then
			tk_try="tk8.3 tk8.2 tk8.1 tk8.0"
			for dir in $tk_try; do
				if test -z "$TKINCDIR" && test -d "$my_dir/$dir" && test -f "$my_dir/$dir/tk.h"; then
					TKINCDIR="-I$my_dir/$dir"
				fi
			done
		fi
	done
	AC_MSG_RESULT($TKINCDIR)
fi

if test -z "$TKINCDIR"; then
	AC_MSG_WARN([*** Didn't find tk.h, maybe okay...])
fi
AC_SUBST(TKINCDIR)

TCLINCDIR=
if test "$tclincdir"; then
	for dir in $tclincdir; do
		if test -d "$dir"; then
			TCLINCDIR="$TCLINCDIR -I$dir"
		else
			AC_MSG_WARN([*** TCL include directory $dir does not exist.])
		fi
	done
	AC_MSG_CHECKING(TCL include dirs)
	AC_MSG_RESULT($TCLINCDIR)
fi
# NEEDS else check known places ...
if test -z "$TCLINCDIR"; then
	AC_MSG_CHECKING(TCL include dirs)
	for my_dir in $my_inc_dirs; do
		if test -z "$TKINCDIR" && test -d $my_dir; then
			tk_try="tcl8.3 tcl8.2 tcl8.1 tcl8.0"
			for dir in $tk_try; do
				if test -z "$TCLINCDIR" && test -d "$my_dir/$dir" && test -f "$my_dir/$dir/tcl.h"; then
					TCLINCDIR="-I$my_dir/$dir"
				fi
			done
		fi
	done
	AC_MSG_RESULT($TCLINCDIR)
fi
if test -z "$TCLINCDIR"; then
	AC_MSG_WARN([*** Didn't find tcl.h, maybe okay...])
fi
AC_SUBST(TCLINCDIR)

AC_ARG_WITH(tcltk-libs,
    [  --with-tcltk-libs=DIR    also search for TCL and TK libraries in DIR],
    [
	case "$withval" in
	"" | y | ye | yes | n | no)
	    AC_MSG_ERROR([*** You must supply an argument to the --with-tcltk-libs option.])
	  ;;
	esac
	tcltk_lib_dirs="$withval"
    ])

TCLTKLIBS=
if test "$tcltk_lib_dirs"; then
	for dir in $tcltk_lib_dirs; do
		if test -d "$dir"; then
			TCLTKLIBS="$TCLTKLIBS -L$dir"
		else
			AC_MSG_WARN([*** TCL/TK library directory $dir does not exist.])
		fi
	done
	AC_MSG_CHECKING(additional TCL and TK library dirs)
	AC_MSG_RESULT($TCLTKLIBS)
fi

ldflags_save="$LDFLAGS"
LDFLAGS="$LDFLAGS $TCLTKLIBS"
tk_try="8.3 8.2 8.1 8.0"
for tk_ver in $tk_try; do
	if test -z "$has_tk_lib"; then
		AC_CHECK_LIB("tk$tk_ver", Tk_MainWindow, has_tk_lib=1)
		if test "$has_tk_lib"; then
			TCLTKLIBS="$TCLTKLIBS -ltk$tk_ver -ltcl$tk_ver"
		fi
	fi
done
if test -z "$has_tk_lib"; then
	AC_MSG_WARN([*** Failed to find TCL/TK libraries])
fi
LDFLAGS="$ldflags_save"
AC_SUBST(TCLTKLIBS)

SYSV=
AC_ARG_WITH(SYSV,
    [  --with-SYSV             define the compiler macro SYSV],
    [
	case "$withval" in
	"" | y | ye | yes)
	    SYSV=-DSYSV
	    AC_MSG_CHECKING(for SYSV)
	    AC_MSG_RESULT($SYSV)
	  ;;
	n | no)
	    SYSV=
	  ;;
	*)
	    AC_MSG_ERROR([*** Invalid argument $withval supplied to the --with-SYSV option.])
	  ;;
	esac
    ])
AC_SUBST(SYSV)

USE_TERMIO=
AC_ARG_WITH(USE_TERMIO,
    [  --with-USE_TERMIO       define the compiler macro USE_TERMIO],
    [
	case "$withval" in
	"" | y | ye | yes)
	    USE_TERMIO=-DUSE_TERMIO
	    AC_MSG_CHECKING(for USE_TERMIO)
	    AC_MSG_RESULT($USE_TERMIO)
	  ;;
	n | no)
	    USE_TERMIO=
	  ;;
	*)
	    AC_MSG_ERROR([*** Invalid argument $withval supplied to the --with-USE_TERMIO option.])
	  ;;
	esac
    ])
AC_SUBST(USE_TERMIO)

if test -z "${top_srcdir}"; then
SRCDIR=$(pwd)
else
SRCDIR=$top_srcdir
fi
AC_SUBST(SRCDIR)

ARCH=
if test -z "${host}"; then
ARCH="unknown"
else
ARCH="${host}"
fi
AC_SUBST(ARCH)

AC_OUTPUT(Makefile src/CMD/head/head src/scripts/shells/create_fifos.sh)
