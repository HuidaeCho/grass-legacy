/*
 * $Id$
 *
 * attempt to auto-select vector maps displayed in monitor (like d.zoom)
 *
 * d.what.vect
*/

#define MAIN
#include "gis.h"
#include "display.h"
#include "Vect.h"
#include "raster.h"
#include "whatvect.h"

/* Vector map grabbing taken from d.zoom */

int main(int argc, char **argv)
{
  struct Flag *once, *terse;
  struct Option *opt1;
  struct GModule *module;
  char *name, *mapset, *openvect();
  struct Map_info Map;
  struct Categories Cats;
  int level;
  char **vect;
  int nvects;
    
  /* Initialize the GIS calls */
  G_gisinit (argv[0]) ;

  /* have a lok if vector maps are already drawn in monitor */
  R_open_driver();
  
  if(D_get_dig_list (&vect, &nvects) < 0)
	vect = NULL;
  else
    {
	vect = (char **)G_realloc(vect, (nvects+1)*sizeof(char *));
	vect[nvects] = NULL;
    }
  R_close_driver();

  once = G_define_flag();
  once->key = '1';
  once->description = "Identify just one location";
  
  opt1 = G_define_option() ;
  opt1->key        = "map" ;
  opt1->type       = TYPE_STRING ;
  opt1->multiple   = NO;
  if (vect)
          opt1->answers = vect;
  opt1->required   = NO ;
  opt1->gisprompt  = "old,dig,vector" ;
  opt1->description= "Name of existing vector map" ;
  
  terse = G_define_flag();
  terse->key = 't';
  terse->description = "Terse output. For parsing by programs";
  
  module = G_define_module();
  module->description = 
    "Allows the user to interactively query a vector map layer "
    "at user-selected locations within the current geographic region.";

  if(!vect)
    {
    	  opt1->required = YES;
    }
    	  	      
  if(argc > 1 && G_parser(argc,argv))
    exit(-1);

  /* if map was found in monitor: */
  if (vect)
      name = opt1->answer[0];

  /* Look at maps given on command line */

  mapset = openvect (name);
  if (mapset == NULL)
    {
      fprintf (stderr, "Unable to open %s\n", name) ;
      exit(1) ;
    }
  

  R_open_driver();
  D_setup(0);

  level = Vect_open_old (&Map, name, mapset);
  if (level < 0)
    G_fatal_error ("Can't open vector file");

  if (level < 2)
    G_fatal_error ("You must first run v.support on vector file");
  
  if (G_read_vector_cats(name, mapset, &Cats) < 0)
    Cats.num = -1  ;
  
  what(once->answer, terse->answer, &Map, &Cats); 
  if(vect){
	R_close_driver();
	Vect_close (&Map);
	R_pad_freelist(vect, nvects);
  }
  
  exit(0);
}



