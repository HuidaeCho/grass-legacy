


import.to.vect(1)    GRASS Reference Manual     import.to.vect(1)



NAME
     import.to.vect  -  Converts ascii DLG files, binary DLG
     files, and ascii vector into binary vector and creates the
     needed support files
     (Map Development Tool)

SYNOPSIS
     import.to.vect

DESCRIPTION
     This program performs all of the processes that are needed
     to convert ascii DLG files, binary DLG files, and ascii
     vector into binary vector It also creates two support files,
     the dig_plus file and the dig_att file (only created when
     importing DLG files). The dig_plus file contains topological
     information obtained by analyzing the vector The dig_att
     file contains attribute information 'stripped' from the DLG
     file. This dig_att file is created for vector by the
     labeling function of the GRASS digit program.  All of the
     above files must be run through import.to.vect before they
     can be used in the digit program of GRASS 3.0.


IMPORT FILES
     After entering the command import.to.vect, the user will be
     asked which type of file to import and create support files
     for:

                   Import to GRASS Vector Format and Creates Needed Support Files

           1  -   Ascii DLG file to Binary GRASS Vector Map
           2  -   Binary DLG file to Binary GRASS Vector Map
           3  -   Ascii GRASS Vector Map to Binary GRASS Vector Map
           4  -   Build support files for Binary GRASS Vector Map

     If numbers 1-3 are chosen, import.to.vect will respond with
     the current units (in feet or meters), and ask if the new
     vector is in the correct units for the location.  If the new
     vector is not in the correct units, import.to.vect will not
     allow it to be placed in the current location. For each
     "data base" location, all should have the same units. If,
     for some reason, a has different units than the rest of the
     in the same
      a new location will have to be created for it.


Ascii DLG File to Binary GRASS
     Converts ascii DLG files (such as those created in GRASS
     2.0) to a vector and creates the dig_plus and dig_att
     support files. The user is asked two questions:

          1. Determine if this map is composed of Area or Line information.



GRASS 3.2                U.S. Army CERL                         1






import.to.vect(1)    GRASS Reference Manual     import.to.vect(1)



             Do you want to give precedence to Areas (opposed to Lines)? (y/n) [y]

          NOTE: Some machine-processed DLG files do not make the
          distinction between lines and area edges. For example,
          in a roads map, where the the desired information is
          line data, a downtown block surrounded by roads may be
          processed as an area.  Because of this, the user is
          asked to choose whether to give precedence to areas or
          lines.  If precedence is given to lines, the user
          should be aware that any lines that bound unlabeled
          areas in the DLG file will be stored as line data. Any
          unlabeled areas would therefore be lost (this is only a
          concern when areas are unlabeled, labeled area
          information will be retained). If precedence is given
          to areas, lines will be stored as boundaries to areas
          that are unlabeled.

          2. During the building of the Vector format:
             Do you want to snap nodes to other nodes within a threshold (y/n) [n]

          NOTE: BE CAREFUL! This threshold is calculated using
          the scale of the original DLG or DIGIT file. If the
          threshold is too high, excessive snapping may occur,
          destroying the file.  In general, users seldom need to
          snap nodes. If snapping of nodes is desired, the user
          may want to run support.vect separately. support.vect
          allows the user to set the threshold.

     This process is done in three phases:
     1. The ascii dlg file is converted to a binary dlg file.
     2. The binary dlg file is converted to a binary vector and
     the dig_att support file containing attribute information is
     created.
     3. The dig_plus support file is created by analyzing the
     vector for topological information.


Binary DLG File to Binary GRASS
     Converts binary DLG files (such as those created in GRASS
     2.0) to a vector and creates the dig_plus and dig_att
     support files. The user is asked whether precedence should
     be given to Areas or Lines and if nodes should be snapped to
     other nodes within a calculated threshold.

     This process is done in two phases:
     1. The binary dlg file is converted to a binary vector
     2. The dig_plus support file is created by analyzing the
     vector for topological information.


Ascii GRASS Vector Map into Binary
     Converts ascii (such as those created in GRASS 2.0) into



GRASS 3.2                U.S. Army CERL                         2






import.to.vect(1)    GRASS Reference Manual     import.to.vect(1)



     binary vector and creates the dig_plus support file. Since a
     vector keeps the distinction between lines and area edges,
     the user is not asked to give precedence to either. However,
     the user will be asked if the user wants to snap from nodes
     to other nodes within a calculated threshold.

     This process is done in two phases:
     1. The ascii vector is converted to a binary vector and the
     dig_plus support file is created.
     2. The dig_plus support file is created by analyzing the
     vector for topological information.


Build support files for Binary GRASS
     Creates the dig_plus support file.

     This process is done in one phase:
     1. The dig_plus support file is created by analyzing the
     vector for topological information.


SEE ALSO
     a.b.vect[1], digit[1], support.vect[1]

AUTHORS
     Michael Higgins, U.S. Army Construction Engineering Research
     Laboratory
     Dave Gerdes, U.S. Army Construction Engineering Research
     Laboratory


























GRASS 3.2                U.S. Army CERL                         3



