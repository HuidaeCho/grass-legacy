


Gmapcalc(2G)         GRASS Reference Manual          Gmapcalc(2G)



NAME
     Gmapcalc - Grid cell calculator
     (G Language Tool)

SYNOPSIS
     Gmapcalc [result=expression]

DESCRIPTION
     Gmapcalc performs arithmetic on map layers. New map layers
     can be created which are arithmetic expressions involving
     existing map layers, integer or floating point constants,
     and functions.

HOW TO USE
     If used without command line arguments, Gmapcalc will read
     its input, one line at a time, from standard input (which is
     the keyboard, unless redirected from a file or across a
     pipe). Otherwise, the expression on the command line is
     evaluated. Gmapcalc expects its input to have the form

          result=expression

     where result is the name of a map layer to contain the
     result of the calculation and expression is any legal
     arithmetic expression involving existing map layers, integer
     or floating point constants, and functions known to the
     calculator.  Parentheses are allowed in the expression and
     may be nested to any depth.  Result will be created in the
     current mapset.

     If the input line is long, it may be continued by ending the
     line with a backslash (\) and then continuing on the next
     line (see MAP NEIGHBORHOOD section for an example).  There
     is no limit to the number of continuation lines, to the
     length of any particular input line, or to the total length
     of the input expression.

OPERATORS AND ORDER OF PRECEDENCE
     The following operators are supported:

     Operator                Meaning                   Type      Precedence
     ______________________________________________________________________
     %          modulus (remainder upon division)   Arithmetic       4
     /          division                            Arithmetic       4
     *          multiplication                      Arithmetic       4
     +          addition                            Arithmetic       3
     -          subtraction                         Arithmetic       3
     ==         equal                               Logical          2
     !=         not equal                           Logical          2
     >          greater than                        Logical          2
     >=         greater than or equal               Logical          2
     <          less than                           Logical          2



GRASS 3.2                U.S. Army CERL                         1






Gmapcalc(2G)         GRASS Reference Manual          Gmapcalc(2G)



     <=         less than or equal                  Logical          2
     &&         and                                 Logical          1
     ||         or                                  Logical          1

     The operators are applied from left to right, with those of
     higher precedence applied before those with lower
     precedence.  Division by 0 and modulus by 0 are acceptable
     and give a 0 result.  The logical operators give a 1 result
     if the comparison is true, 0 otherwise.

MAP NAMES
     Anything in the expression which is not a number, operator,
     or function name is taken to be a map name.  Examples:

          elevation   x3   3d.his

     Most GRASS data layers meet this naming convention.
     However, if a data layer has a name which conflicts with the
     above rule, it should be quoted. For example, the expression

          x = a-b

     would be interpreted as: x equals a minus b, whereas

          x = "a-b"

     would be interpreted as: x equals the map layer named a-b

     Also

          x = 3107

     would create x filled with the number 3107, while

          x = "3107"

     would copy data layer 3107 to layer x.

     Quotes are not required unless the map names look like
     numbers or contain operators.

     Gmapcalc will look for the data layers according to the
     current mapset search path.  It is possible to override the
     search path and specify the mapset from which to select the
     map. This is done by specifying the map name in the form:

          name in mapset

     For example, the following is a legal expression:

          result = x in PERMANENT / y in SOILS




GRASS 3.2                U.S. Army CERL                         2






Gmapcalc(2G)         GRASS Reference Manual          Gmapcalc(2G)



     The mapset specified does not have to be in the mapset
     search path.  (This method of overriding the mapset search
     path is common to all GRASS commands, not just Gmapcalc.)

MAP NEIGHBORHOOD
     It is possible to use values from maps at other than the
     current row and column. The construct
          map[r,c]
     uses the value at the current row-r and the current column-
     c.  For example, to find the average value in the 3x3
     neighborhood in a map:

          result = \
          ( \
           map[-1,-1] + map[-1,0] + map[-1,1] +  \
           map[0,-1] + map[0,0] + map[0,1] +  \
           map[1,-1] + map[1,0] + map[1,1]    \
          ) / 9

     Note, the form map[r] is equivalent to map[r,0].

     Gmapcalc will attempt to reduce map layer i/o by keeping up
     to 3 rows from any map in memory. If you want more (or less)
     then you can use the -n option on the command line to change
     the maximum number of rows to keep in memory for any one
     map.  For example to specify 5 rows:

          Gmapcalc -n5

     Or to specify only one row in memory at a time.

          Gmapcalc -n1

     If you are using neighborhoods which exceed the maximum, or
     if you don't specify neighborhoods, then only one row will
     be kept in memory.

MAP VALUES FROM THE CATEGORY FILE (@ OPERATOR)
     Sometimes it is desirable to use a value associated with a
     category instead of the category number itself. If a map
     name is preceeded by the @ operator, then the values in
     category file for the map layer are used in the expression
     instead of the category number.

     For example, suppose that the map layer soil.ph
     (representing PH of soils) has a category file with labels
     as follows:

          cat   label
          _____________
          0     no data
          1     1.4



GRASS 3.2                U.S. Army CERL                         3






Gmapcalc(2G)         GRASS Reference Manual          Gmapcalc(2G)



          2     2.4
          3     3.5
          4     5.8
          5     7.2
          6     8.8
          7     9.4

     Then the expression:

          result = @soils.ph * 10

     would produce a result with cell values 0, 14, 24, 35, 58,
     72, 88 and 94.

     Note that this operator may only be applied to map layers
     and produces a floating point value in the expression. Also
     the category label must start with a valid number. Missing
     labels, or labels that do not start with a number will
     (silently) produce a 0 value for that category.

FUNCTIONS
     The functions currently supported are listed in the table
     below.  The type of the result is indicated in the last
     column.  F means that the functions always results in a
     floating point value, I means that the function gives an
     integer result, and * indicates that the result is float if
     any of the arguments to the function are floating point
     values and integer if all arguments are integer.

     function                       description                 type
     _______________________________________________________________
     abs(x)            return absolute value of x                *
     atan(x)           arc-tangent of x (result -90 to 90)       F
     atan(x,y)         arc-tangent of y/x (result 0 to 360)      F
     sin(x)            sine of x (x is in degrees)               F
     cos(x)            cosine of x (x is in degrees)             F
     eval(x[,y...])    evaluate all args, returns last arg       *
     exp(x)            exponential function of x                 F
     exp(x,y)          x to the power y                          F
     float(x)          convert x to floating point               F
     if                decision options:                         *
       if(x)             1 if x not zero, 0 otherwise
       if(x,a)           a if x not zero, 0 otherwise
       if(x,a,b)         a if x not zero, b otherwise
       if(x,a,b,c)       a if x > 0, b if x is zero, c if x < 0
     int(x)            convert x to integer [ truncates ]        I
     log(x)            natural log of x                          F
     log(x,b)          log of x base b                           F
     max(x,y[,z...])   largest value of those listed             *
     min(x,y[,z...])   smallest value of those listed            *
     round(x)          round x to nearest integer                I
     sin(x)            sine of x (x is in degrees)               F



GRASS 3.2                U.S. Army CERL                         4






Gmapcalc(2G)         GRASS Reference Manual          Gmapcalc(2G)



     sqrt(x)           square root of x                          F
     tan(x)            tangent of x (x is in degrees)            F

FLOATING POINT VALUES IN THE EXPRESSION
     Floating point numbers are allowed in the expression. A
     floating point number is a number which contains a decimal
     point:

          2.3   12.   .81

     Floating point values in the expression are handled in a
     special way.  With arithmetic and logical operators, if
     either operand is float, the other is converted to float and
     the result of the operation is float. This means, in
     particular that division of integers results in a
     (truncated) integer, while division of floats results in an
     accurate floating point value. With functions of type * (see
     table above), the result is float if any argument is float,
     integer otherwise.

     However, GRASS data layers can only store integer values. If
     the final value of the exression is a floating point value,
     this value is rounded to the nearest integer before storing
     it in the result data layer.

     Note that maps in the expression are considered to be
     integers (unless preceded by the @ operator).

TEMPORARY VARIABLES AND THE EVAL FUNCTION
     Gmapcalc supports temporary variables within an expression.
     These variables can be used to simplify complicated
     expressions as well as avoiding extra computations.  For
     example, the following expression computes the sum of two
     layers only when that sum exceeds 10:

          result = if(layer1+layer2 > 10, layer1+layer2)

     However, the expression "layer1+layer2" had to be repeated.
     This can be simplified by using a temporary variable (e.g.,
     "x"), as follows:

          result = if((x = layer1+layer2) > 10, x)

     The order of precedence rules require that parentheses be
     placed around x=layer1+layer2.  Such rules are often not
     obvious to a user, so parentheses should be used when in
     doubt.  However, the "eval" function can be used to clarify
     as well. The "eval" function computes all its arguments left
     to right and returns the value of the last argument.  Thus,
     the example above could be written:

          result = eval(x=layer1+layer2 , if(x>10,x))



GRASS 3.2                U.S. Army CERL                         5






Gmapcalc(2G)         GRASS Reference Manual          Gmapcalc(2G)



     NOTE. The names of temporary variables are up to the user,
     but must begin with a letter, very much like map layer
     names. In fact, variable names and map layer names are
     indistinguishable, except from the context.  The user should
     make sure that any temporary variables are different from
     the map layers in the expression.  Also, temporary variables
     do not produce a map layer for the temporary variable.  Only
     the result map is output. In the above example, the
     temporary variable x does not result in a map layer x .

EXAMPLES
     To compute the average of two map layers a and b:

          ave = (a + b)/2

     To form a weighted average:

          ave = (5*a + 3*b)/8.0

     To produce a binary representation of the map layer a so
     that category 0 remains 0 and all other categories become 1:

          mask = a/a

     This could also be accomplished by:

          mask = if(a)
     or
          mask = a!=0

     To mask layer b by layer a:

          result = if(a,b)

WINDOW/MASK
     The user must be aware of the current window and current
     mask when using Gmapcalc.  All map layers are read into the
     current window masked by the current mask.  If it is desired
     to modify an existing layer without involving other map
     layers, the window should be set to agree with the cell
     header for the map layer.  For example, suppose it is
     determined that the elevation data layer must have each
     value increased by 10 meters. The following expression is
     legal and will do the job:

          new_elevation = elevation + 10

     Since windowing in GRASS (using the window tool) will give 0
     for locations which do not exist in the data layer, the new
     layer will contain the value 10 in the locations that did
     not exist in the original elevation. Therefore, in this
     example, it is essential that the window be set to agree



GRASS 3.2                U.S. Army CERL                         6






Gmapcalc(2G)         GRASS Reference Manual          Gmapcalc(2G)



     with the cell header.

     However, if there is a current mask, then the resultant data
     layer is masked when it is written, i.e., 0 values in the
     mask force zero values in the output.

NOTES
     Extra care must be taken if the expression is given on the
     command line.  Some characters have special meaning to the
     UNIX shell. These include, among others:

          * ( ) > & |

     It is advisable to put single quotes around the expression,
     e.g.:

          result = 'elevation * 2'

     Without the quotes, the *, which has special meaning to the
     UNIX shell, would be altered and Gmapcalc would see
     something other than the *.

     If the input comes directly from the keyboard and the result
     file exists, the user will be asked if it can be
     overwritten.  Otherwise, the result file will automatically
     be overwritten if it exists.

     Quoting result is not allowed.  However, it is never
     necessary to quote result since it is always taken to be a
     data layer name.

AUTHOR
     Michael Shapiro, U.S. Army Construction Engineering Research
     Laboratory





















GRASS 3.2                U.S. Army CERL                         7



