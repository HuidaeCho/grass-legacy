#include "xgrass_dlib.h"
#include "gis.h"
#include "image.h"



char           *malloc();

XImage *
#ifdef _NO_PROTO
XgdRasterImage(obj, scrn, vinfo, name, mapset, colorsfixedmin)
     XgdObject      *obj;
     int             scrn;
     XVisualInfo     vinfo;
     char           *name, *mapset;
     int             colorsfixedmin;
#else
XgdRasterImage(XgdObject *obj,
	       int scrn,
	       XVisualInfo vinfo,
	       char *name, *mapset,
	       int colorsfixedmin)
#endif
{
  char            buf[120];
  int             fd, row, col;
  int             crow, ccol;
  int             lrow;
  register CELL  *cell;
  double          row_inc, col_inc;
  int             nrows, ncols;
  int             bitmap_pad;
  XImage         *grimage;
  
  
  nrows = obj->Obj.GeoFrame.region.rows;
  ncols = obj->Obj.GeoFrame.region.cols;
  
  col_inc = (double)ncols/(double)obj->width;
  row_inc = (double)nrows/(double)obj->height;
  
  bitmap_pad = _XgdGetBitmapPad(vinfo);
  
  grimage = XCreateImage(obj->display, vinfo.visual,
			 vinfo.depth, ZPixmap, 0,
			 None, obj->width, obj->height,
			 bitmap_pad, 0);
  
  if (!grimage)
    XgdError("Could not create image in XgdRasterImage");
  
  if ((grimage->data = XtMalloc(obj->height * obj->width)) == NULL) {
    XgdWarning(" Insufficient memory to allocate raster image \n");
    return (NULL);
  }
  
  fd = G_open_cell_old(name, mapset);
  if (fd < 0) {
    sprintf(buf, "%s in %s -can't open cell file", name, mapset);
    G_fatal_error(buf);
  }
  cell = G_allocate_cell_buf();
  
  /* loop over rows */
  lrow = -1;
  for (row = 0; row < obj->height; row++) {
    crow = (int)(((double)row * row_inc) + 0.5);
    if (lrow != crow ) {
      if ( G_get_map_row(fd, cell, crow) < 0) {
	   XgdError("Error reading Raster map.");
      }
    }
      
    lrow = crow;

    for ( col = 0; col < obj->width; col++) {
      ccol = (int)(((double)col * col_inc) + 0.5);
      XPutPixel(grimage, col, row,
        obj->Obj.GeoFrame.lookup_tbl[cell[ccol] - colorsfixedmin + 1]);
    }
    XPutImage(obj->display, obj->Obj.GeoFrame.pixmap, obj->objgc,
		grimage, 0, row, 0, row, obj->width, 1);
  }
  
  G_close_cell(fd);
  return (XImage *) grimage;
}
