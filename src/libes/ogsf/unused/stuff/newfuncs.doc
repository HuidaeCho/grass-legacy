
/*************************************************/
/* USER must free!! */
int * GV_get_vect_list(numvects)
int 	*numvects;

Returns pointer to an allocated list of 
integer handles for vector sets.

Size of list (number of handles) is returned in 
numvects;

/*************************************************/
/* USER must free!! */
int * GS_get_surf_list(numsurfs)
int 	*numsurfs;

Returns pointer to an allocated list of 
integer handles for surfaces.

Size of list (number of handles) is returned in 
numsurfs;

/*************************************************/
/* USER must free!! */
int * GP_get_site_list(numsites)
int 	*numsites;

Returns pointer to an allocated list of 
integer handles for site sets.

Size of list (number of handles) is returned in 
numsites;

/*************************************************/
GS_get_drawmode(id, mode)
int 	id;
int 	*mode;

Returns 1 on success, -1 if id is invalid.

/*************************************************/
GS_get_nozero(id, att, mode)
int 	id, att, *mode;

    att == ATT_COLOR or ATT_TOPO

Returns 1 on success, -1 if id or att is invalid.
/*************************************************/
GS_get_wire_color(id, colr)
int 	id;
int 	*colr;

Returns 1 on success, -1 if id is invalid.

/*************************************************/
GV_get_vectmode(id, mem, color, width)
int id, *mem, *color, *width;

Returns 1 on success, -1 if id is invalid.

/*************************************************/
GP_get_zmode(id, use_z)
int id, *use_z;

Returns 1 on success, -1 if id is invalid.
note: might not always match GP_set_zmode, because
GP_set_zmode will refuse to set use_z if the site data
doesn't have Z values to use

/*************************************************/
GP_get_sitemode(id, atmod, color, width, size, marker)
int id, *atmod, *color, *width, *marker;
float *size;

Returns 1 on success, -1 if id is invalid.

/*************************************************/
GV_get_trans(id, xtrans, ytrans, ztrans)
int id;
float *xtrans, *ytrans, *ztrans;

Returns 1 on success, -1 if id is invalid.

/*************************************************/
GS_get_att(id, att, set, constant, mapname)
int 	id, att, *set;
float *constant;
char *mapname;

assigns one of the following to set:
NOTSET_ATT (defined as zero in gsurf.h)
MAP_ATT   
CONST_ATT 
FUNC_ATT   (Not yet implemented)

if set == CONST_ATT, puts constant value in const
if set == MAP_ATT, copies map name to mapname 
    mapname can be up to 80 characters: for GRASS
    files, it also contains the @mapset extension
    Space must already exist in mapname.

Returns 1 on success, -1 if id is invalid.

/*************************************************/
GS_get_maskmode(id, mode)
int id, *mode;

Assigns to mode the invert flag for mask -
    0 (normal)
    non-zero (invert mask)

Returns 1 on success, -1 if id is invalid.

/*************************************************/
GP_get_sitename(id, filename)
int id;
char *filename;

Copies filename associated with site id into filename.
There should already be space in filename for up to 80 chars.

Returns 1 on success, -1 if id is invalid.

/*************************************************/
GV_get_vectname(id, filename)
int id;
char *filename;

Copies filename associated with vector id into filename.
There should already be space in filename for up to 80 chars.

Returns 1 on success, -1 if id is invalid.

/*************************************************/

GS_save_3dview(vname, surfid)
char *vname;
int surfid;

Saves a GRASS 3dview file with the name passed in as vname.

    These are the 3dview fields used:

    from_to     view ray   
    exag        exaggeration
    fov         field of view
    twist       rotation of view ray 
    lightpos    light position
    lightcol    light color
    ambient     a single ambient value (0.-1.) 
    shine       a single shine value (0.-1.) 

surfid may be zero or a valid surface handle.

    If surfid is valid, following information will also be saved
    in the 3dview file, otherwise uses GRASS defaults:

    draw mode (wire, colored wire, or poly)
    wire mesh resolution
    polygon resolution
    gouraud or flat shading
    no-zero set on topography map

/*************************************************/

   
