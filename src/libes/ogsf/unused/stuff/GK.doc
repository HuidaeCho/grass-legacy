-------------------------------------------
#include "keyframe.h"

GK_set_interpmode(mode)
int mode;

    Sets interpolation mode to KF_LINEAR or KF_SPLINE

-------------------------------------------
GK_set_tension(tens)
float tens;

    Sets value for tension when interpmode is KF_SPLINE.
    The value tens should be between 0.0 & 1.0.

-------------------------------------------
void GK_showtension_start()
void GK_update_tension()
void GK_showtension_stop()

    Use to initialize & stop multi-view display of path when
    changing tension. (Currently does nothing)

-------------------------------------------
void GK_update_frames()

    Recalculates path using the current number of frames requested.
    Call after changing number of frames or when Keyframes change.

-------------------------------------------
void GK_set_numsteps(newsteps)
int newsteps;

    Sets the number of frames to be interpolated from keyframes.
-------------------------------------------
void GK_clear_keys()

    Deletes all keyframes, resets field masks.
    Doesn't change number of frames requested.
-------------------------------------------
#include "keyframe.h"

GK_add_key(pos,fmask,force_replace,precis)
float pos, precis;
unsigned long fmask;
int force_replace;

    The pos value is the relative position in the animation for this
    particular keyframe - used to compare relative distance to neighboring
    keyframes, it can be any floating point value.

    The fmask value can be any of the following or'd together:
    KF_FROMX_MASK  
    KF_FROMY_MASK 
    KF_FROMZ_MASK
    KF_FROM_MASK (KF_FROMX_MASK | KF_FROMY_MASK | KF_FROMZ_MASK)

    KF_DIRX_MASK 
    KF_DIRY_MASK
    KF_DIRZ_MASK   
    KF_DIR_MASK (KF_DIRX_MASK | KF_DIRY_MASK | KF_DIRZ_MASK)  

    KF_FOV_MASK  
    KF_TWIST_MASK

    KF_ALL_MASK (KF_FROM_MASK | KF_DIR_MASK | KF_FOV_MASK | KF_TWIST_MASK)

    Other fields will be added later.
    (Mark - I'm still working on this - just use KF_ALL_MASK for now)

    The value precis and the boolean force_replace are used to determine 
    if a keyframe should be considered to be at the same position as a 
    pre-existing keyframe. e.g., if anykey.pos - newkey.pos <= precis, 
    GK_add_key will fail unless force_replace is TRUE.

    Returns 1 if key is added, otherwise -1. 
    Calls GK_update_frames() if key is successfully added.


-------------------------------------------
void GK_do_framestep(step)
int step;

    Moves the animation to frame number "step".  Step should be a 
    value between 1 and the number of frames.

-------------------------------------------
void GK_show_path()

    Draws the current path.
-------------------------------------------
int GK_delete_key(pos, precis, justone)
float pos, precis;
int justone;

    Returns number of keys deleted.

    The values pos & precis are used to determine which keyframes to delete.
    Any keyframes with their position within precis of pos will be deleted
    if justone is zero.  If justone is non-zero, only the first (lowest pos)
    keyframe in the range will be deleted.
-------------------------------------------
int GK_move_key(oldpos, precis, newpos)
float oldpos, newpos, precis;

    Returns number of keys moved (1 or 0).

    Precis works as in other functions - to identify keyframe to move.
    Only the first keyframe in the precis range will be moved.
-------------------------------------------
