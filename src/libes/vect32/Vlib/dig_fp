close.c:    switch (Map->level) {
close.c:    if (Map->mode == MODE_WRITE || Map->mode == MODE_RW)
close.c:	Vect__write_head_binary (Map, &(Map->head));
close.c:    free (Map->name);
close.c:    free (Map->mapset);
close.c:    free (Map->digit_file);
close.c:    Map->name = NULL;
close.c:    Map->mapset = NULL;
close.c:    Map->digit_file = NULL;
close.c:    Map->open = VECT_CLOSED_CODE;
close.c:    return fclose (Map->dig_fp);
close.c:    if (Map->mode & (MODE_WRITE | MODE_RW))
close.c:    fclose (Map->dig_fp);
close.c:    free (Map->name);
close.c:    free (Map->mapset);
close.c:    free (Map->digit_file);
close.c:    Map->name = NULL;
close.c:    Map->mapset = NULL;
close.c:    Map->digit_file = NULL;
close.c:    Map->open = VECT_CLOSED_CODE;
close.c:    if (Map->Line != NULL)
close.c:	free (Map->Line);
close.c:    if (Map->Area != NULL)
close.c:	for (i = 1 ; i <= Map->n_areas ; i++)
close.c:	    if (Map->Area[i].alloc_lines > 0)
close.c:		if (Map->Area[i].lines != NULL)
close.c:		    free (Map->Area[i].lines);
close.c:	free (Map->Area);
close.c:    if (Map->Isle != NULL)
close.c:	for (i = 1 ; i <= Map->n_isles ; i++)
close.c:	    if (Map->Isle[i].alloc_lines > 0)
close.c:		if (Map->Isle[i].lines != NULL)
close.c:		    free (Map->Isle[i].lines);
close.c:	free (Map->Isle);
close.c:    if (Map->Node != NULL)
close.c:	for (i = 1 ; i <= Map->n_nodes ; i++)
close.c:	    if (Map->Node[i].alloc_lines > 0)
close.c:		if (Map->Node[i].lines != NULL)
close.c:		    free (Map->Node[i].lines);
close.c:		if (Map->Node[i].angles != NULL)
close.c:		    free (Map->Node[i].angles);
close.c:	free (Map->Node);
close.c:    if (Map->Att != NULL)
close.c:	free (Map->Att);
close.c:    fclose (Map->dig_fp);
close.c:    Map->dig_fp = fopen (Map->digit_file, RW_str);
constraint.c:    Map->Constraint_region_flag = 1;
constraint.c:    Map->Constraint_N = n;
constraint.c:    Map->Constraint_S = s;
constraint.c:    Map->Constraint_E = e;
constraint.c:    Map->Constraint_W = w;
constraint.c:    Map->proj = G_projection ();
constraint.c:    Map->Constraint_type      = type;
constraint.c:    Map->Constraint_type_flag = 1;
constraint.c:    Map->Constraint_region_flag = 0;
constraint.c:    Map->Constraint_type_flag   = 0;
get_area.c:	Area =  &(Map->Area[area]) ;
get_area.c:	Isle =  &(Map->Isle[isle]) ;
header.c:    dhead = &(Map->head);
level.c:    if (Map->open != VECT_OPEN_CODE)
level.c:	if (Map->open != VECT_CLOSED_CODE)
level.c:    return (Map->level);
level_two.c:    map->digit_file = G_store (file);
level_two.c:    if ( (map->dig_fp = fopen(file, RW_str)) != NULL )
level_two.c:    map->plus_file = G_store (file);
level_two.c:	fclose(map->dig_fp);   
level_two.c:	map->dig_fp=NULL;    
level_two.c:    map->att_file = G_store (file);
level_two.c:    /*dig__set_head (map->dig_fp, &(map->head));*/
level_two.c:    Vect__read_head_binary(map, &(map->head));
level_two.c:    map->Line = NULL;
level_two.c:    map->Area = NULL;
level_two.c:    map->Isle = NULL;
level_two.c:    map->Att = NULL;
level_two.c:    map->Node = NULL;
level_two.c:    if (0 > dig_load_plus (map, map->dig_fp, 1))
level_two.c:    map->digit_file = G_store (file);
level_two.c:    if ( (map->dig_fp = fopen(file, RW_str)) != NULL )
level_two.c:    map->plus_file = G_store (file);
level_two.c:	fclose(map->dig_fp); 
level_two.c:	map->dig_fp=NULL;    
level_two.c:    map->att_file = G_store (file);
level_two.c:    /*dig__set_head (map->dig_fp, &(map->head));*/
level_two.c:    Vect__read_head_binary(map, &(map->head));
level_two.c:        if (map->head.Version_Major < 4)
level_two.c:            fclose (map->dig_fp);
level_two.c:            if ( (map->dig_fp = fopen(map->digit_file, "r+"))  ==  NULL)
level_two.c:                    map->digit_file);
level_two.c:	    Vect__read_head_binary(map, &(map->head));
level_two.c:    map->Line = NULL;
level_two.c:    map->Area = NULL;
level_two.c:    map->Isle = NULL;
level_two.c:    map->Att = NULL;
level_two.c:    map->Node = NULL;
level_two.c:    if (0 > dig_load_plus (map, map->dig_fp, 1))
level_two.c:    return (map->n_lines);
level_two.c:    return (map->n_areas);
level_two.c:    Line = &(map->Line[line]);
level_two.c:    if (line <= 0 || line > map->n_lines || !LINE_ALIVE (Line) || ! Line->att)
level_two.c:    return (map->Att[Line->att].cat);
level_two.c:    if (area <= 0 || area > map->n_areas)
level_two.c:    Area = &(map->Area[area]);
level_two.c:    return (map->Att[Area->att].cat);
level_two.c:    if (num <= 0 || num > map->n_areas)
level_two.c:    if (!AREA_ALIVE (&(map->Area[num])))
level_two.c:    *Area = &(map->Area[num]);
level_two.c:    if (area <= 0 || area > map->n_areas)
level_two.c:    if (!AREA_ALIVE (&(map->Area[area])))
level_two.c:    Area = &(map->Area[area]);
level_two.c:    if (line <= 0 || line > map->n_lines)
level_two.c:    if (!LINE_ALIVE (&(map->Line[line])))
level_two.c:    Line = &(map->Line[line]);
open1.c:    Map->dig_fp = fp;
open1.c:    Map->digit_file = G_store (name_buf); /*need?*/
open1.c:    Map->name = G_store (name);
open1.c:    Map->mapset = G_store (mapset);
open1.c:    Map->open = VECT_OPEN_CODE;
open1.c:    Map->level = LEVEL_1;
open1.c:    Map->mode = MODE_READ;
open1.c:    Map->Constraint_region_flag = 0;
open1.c:    Map->Constraint_type_flag   = 0;
open1.c:    return (Vect__read_head_binary(Map, &(Map->head)));	/* note dig_ => dig__ */
open1.c:    Map->dig_fp = fp;
open1.c:    Map->digit_file = G_store (name_buf); /*need?*/
open1.c:    Map->open  = VECT_OPEN_CODE;
open1.c:    Map->level = LEVEL_1;
open1.c:    Map->mode  = MODE_WRITE;
open1.c:    Map->name = G_store (name);
open1.c:    Map->mapset = G_store (G_mapset());
open1.c:    Map->Constraint_region_flag = 0;	/* these do not apply to to write, but*/
open1.c:    Map->Constraint_type_flag   = 0;    /* init them anyway                   */
open1.c:    Vect__init_head (&(Map->head));
open1.c:    Vect__write_head_binary (Map, &(Map->head)); /* note dig_ => dig__*/
open1.c:    Map->dig_fp = fp;
open1.c:    Map->digit_file = G_store (name_buf); 
open1.c:    Map->open = VECT_OPEN_CODE;
open1.c:    Map->level = LEVEL_1;
open1.c:    Map->mode = MODE_RW;
open1.c:    Map->name = G_store (name);
open1.c:    Map->mapset = G_store (G_mapset());
open1.c:    Map->Constraint_region_flag = 0;
open1.c:    Map->Constraint_type_flag   = 0;
open1.c:    return (Vect__read_head_binary(Map, &(Map->head)));	/* note dig_ => dig__ */
open2.c:    Map->open = VECT_OPEN_CODE;
open2.c:    Map->level = LEVEL_2;
open2.c:    Map->mode = MODE_READ;
open2.c:    Map->digit_file = G_store (name_buf); 
open2.c:    Map->name = G_store (name);
open2.c:    Map->mapset = G_store (mapset);
open2.c:    Map->Constraint_region_flag = 0;
open2.c:    Map->Constraint_type_flag   = 0;
open2.c:    Map->next_line = 1;
open2.c:    Map->open = VECT_OPEN_CODE;
open2.c:    Map->level = LEVEL_2;
open2.c:    Map->mode = MODE_RW;
open2.c:    Map->digit_file = G_store (name_buf);
open2.c:    Map->name = G_store (name);
open2.c:    Map->mapset = G_store (G_mapset());
open2.c:    Map->Constraint_region_flag = 0;
open2.c:    Map->Constraint_type_flag   = 0;
open2.c:    Map->next_line = 1;
open2.c:    Map->open = VECT_OPEN_CODE;
open2.c:    Map->level = LEVEL_2;
open2.c:    Map->mode = MODE_RW;
open2.c:    Map->digit_file = G_store (name_buf);
open2.c:    Map->name = G_store (name);
open2.c:    Map->mapset = G_store (G_mapset());
open2.c:    Map->Constraint_region_flag = 0;
open2.c:    Map->Constraint_type_flag   = 0;
open2.c:    Map->next_line = 1;
open2.c:    Map->open = VECT_OPEN_CODE;
open2.c:    Map->level = LEVEL_2;
open2.c:    Map->mode = MODE_RW;
open2.c:    Map->digit_file = G_store (name_buf);
open2.c:    Map->name = G_store (name);
open2.c:    Map->mapset = G_store (G_mapset());
open2.c:    Map->Constraint_region_flag = 0;
open2.c:    Map->Constraint_type_flag   = 0;
open2.c:    Map->next_line = 1;
open2.c:    Map->open = VECT_OPEN_CODE;
open2.c:    Map->level = LEVEL_2;
open2.c:    Map->mode = MODE_RW;
open2.c:    Map->name = G_store (name);
open2.c:    Map->mapset = G_store (G_mapset());
open2.c:    Map->Constraint_region_flag = 0;
open2.c:    Map->Constraint_type_flag   = 0;
open2.c:    Map->next_line = 1;
poly.c:    if(Map->Area[area].n_isles > isl_allocated)
poly.c:	G_realloc(IPoints, (1+Map->Area[area].n_isles) * sizeof(struct line_pnts *));
poly.c:        for(i=isl_allocated; i< Map->Area[area].n_isles; i++)
poly.c:        isl_allocated = Map->Area[area].n_isles;
poly.c:    for (i = 0 ; i < Map->Area[area].n_isles ; i++)
poly.c:	if (0 > Vect_get_isle_points (Map, Map->Area[area].isles[i], IPoints[i]))
poly.c:    return( Vect_get_point_in_poly_isl(Points, IPoints, Map->Area[area].n_isles, X, Y));
poly.c:    Area =  &(Map->Area[area]) ;
portable_io.c:	hp = &(Map->head);
portable_io.c:	hp = &(Map->head);
portable_io.c:    if (NULL == dig__get_head (map->digit))
read.c:    switch (Map->level) {
read1.c:	itype = Vect__Read_line (Map, line_p, ftell (Map->dig_fp));
read1.c:	if (Map->Constraint_type_flag)
read1.c:	    if (!(itype & Map->Constraint_type))
read1.c:	if (Map->Constraint_region_flag)
read2.c:    if (line < 1 || line > Map->n_lines)		/* ALL DONE */
read2.c:    return Vect__Read_line (Map, line_p, Map->Line[line].offset);
read2.c:	line = Map->next_line;
read2.c:	if (line > Map->n_lines)
read2.c:	Line = &(Map->Line[line]);
read2.c:	if ((Map->Constraint_type_flag && !(Line->type & Map->Constraint_type)))
read2.c:	    Map->next_line++;
read2.c:	if (Map->Constraint_region_flag)
read2.c:		Map->next_line++;
read2.c:	return V2_read_line (Map, line_p, Map->next_line++);
read2.c:    W.north = Map->Constraint_N;
read2.c:    W.south = Map->Constraint_S;
read2.c:    W.east  = Map->Constraint_E;
read2.c:    W.west  = Map->Constraint_W;
read2.c:    W.proj  = Map->proj;
rewind.c:    switch (Map->level) {
rewind.c:    Map->next_line = 1;
window.c:    dhead = &(Map->head);
x_point_io.c:    dig__set_cur_in_head (&(Map->head));
x_point_io.c:    fseek (Map->dig_fp, offset, 0);
x_point_io.c:    if (0 >= dig__fread_port_L (&itype, 1, Map->dig_fp)) goto done;
x_point_io.c:    if (0 >= dig__fread_port_I (&n_points, 1, Map->dig_fp)) goto done;
x_point_io.c:    if (0 >= dig__fread_port_D (p->x, n_points, Map->dig_fp)) goto done;
x_point_io.c:    if (0 >= dig__fread_port_D (p->y, n_points, Map->dig_fp)) goto done;
x_point_io.c:    fseek (Map->dig_fp, 0L, 2) ;		/*  end of file */
x_point_io.c:    offset = ftell (Map->dig_fp);
x_point_io.c:    dig_fp = Map->dig_fp;
x_rw_binary.c:    fseek(Map->dig_fp, 0L, 0) ;
x_rw_binary.c:    if (0 >= dig__fwrite_port_C (dhead->organization, sizeof(dhead->organization), Map->dig_fp) ) return -1;
x_rw_binary.c:    if (0>= dig__fwrite_port_C(dhead->date,       sizeof(dhead->date       ),Map->dig_fp)) return -1;
x_rw_binary.c:    if (0>= dig__fwrite_port_C(dhead->your_name,  sizeof(dhead->your_name  ),Map->dig_fp)) return -1;
x_rw_binary.c:    if (0>= dig__fwrite_port_C(dhead->map_name,   sizeof(dhead->map_name   ),Map->dig_fp)) return -1;
x_rw_binary.c:    if (0>= dig__fwrite_port_C(dhead->source_date,sizeof(dhead->source_date),Map->dig_fp)) return -1;
x_rw_binary.c:    if (0>= dig__fwrite_port_C (buf ,NEW_LINE_3_SIZE, Map->dig_fp)) return -1;
x_rw_binary.c:    if (0>= dig__fwrite_port_C (buf ,VERS_4_DATA_SIZE, Map->dig_fp)) return -1;
x_rw_binary.c:    if (0>= dig__fwrite_port_L (&dhead->orig_scale, 1, Map->dig_fp)) return -1;
x_rw_binary.c:    if (0>= dig__fwrite_port_I (&dhead->plani_zone, 1, Map->dig_fp)) return -1;
x_rw_binary.c:    if (0>= dig__fwrite_port_D (&dhead->W,          1, Map->dig_fp)) return -1;
x_rw_binary.c:    if (0>= dig__fwrite_port_D (&dhead->E,          1, Map->dig_fp)) return -1;
x_rw_binary.c:    if (0>= dig__fwrite_port_D (&dhead->S,          1, Map->dig_fp)) return -1;
x_rw_binary.c:    if (0>= dig__fwrite_port_D (&dhead->N,          1, Map->dig_fp)) return -1;
x_rw_binary.c:    if (0>= dig__fwrite_port_D (&dhead->map_thresh, 1, Map->dig_fp)) return -1;
x_rw_binary.c:    data_offset = ftell (Map->dig_fp);
x_rw_binary.c:    fseek (Map->dig_fp, offset_offset, 0);
x_rw_binary.c:    if (0>= dig__fwrite_port_L (&data_offset,        1, Map->dig_fp)) return -1;
x_rw_binary.c:    fseek (Map->dig_fp, data_offset, 0);
x_rw_binary.c:    fhead = &(Map->head);
x_rw_binary.c:    digit = Map->dig_fp;
