      SUBROUTINE PROCAG (IRUF, infile, mapset, ofile1, KLAOUT,AGGOUT,
     &             KLAVEC,STOSIZ,STPOIN,MAXAA,LNPOIN,NREFAC,
     & XDIMUS,YDIMUS,XDIM,YDIM,NENVIR,KLAMAT,TESTED,AGGMAT,STACK,NSTLEN,
     & offset)
*-------   EIGENTLICHES PROGRAMM DAS DIE AGG_AREAS FINDET   ------------


*---- ERKLAERUNG DER UEBERGEBENEN VARIABLEN

*------ LOGICAL VARIABLEN

*    KLAOUT  : AUSGABE DES KLASSIFIZIERTEN INPUTS-- .TRUE.
*    AGGOUT  : AUSGABE DER GEFUNDENEN AGG_AREAS    -- .TRUE.

      LOGICAL*4 KLAOUT , AGGOUT


*------ INTEGER VARIABLEN

*    XDIMUS  : ZAHL DER RECHTSWERTE + 1 -> FUER KLAMAT -DIMENSIONIERUNG
*    XDIMUS  : ZAHL DER HOCHWERTE   + 1 -> FUER KLAMAT -DIMENSIONIERUNG

*    XDIM    : ZAHL DER RECHTSWERTE
*    YDIM    : ZAHL DER HOCHWERTE

*    NENVIR  : GEWUENSCHTE SUCHUMGEBUNG
*    NSTLEN  : MAXIMALE LAENGE DES STAPELS

*    STPOIN  : SPEICHERT ALLE GEFUNDENEN GRENZPIXEL
*    STOSIZ  : SPEICHERT DIE GROESSE DER AA'S FUER NEIBOR

*    IRUF    : =1 -> AGGREGATION  ,  =2 -> GRENZPIXELFINDUNG

*    KLAMAT  : ZWEIDIM. ARRAY ; ENTHAELT WERTE FUER KLA
*    KLAVEC  : SPEICHERT DIE KLA-WERTE ZU DEN AGG_AREAS
*    AGGMAT  : ZWEIDIM. ARRAY ; ENTHAELT DIE GEFUNDENEN AGG_AREA

*-----------------------------------------------------------------------
*
*    STACK   : EINDIM. INTEGER*4-ARRAY ; MIT FOLGENDER ORGANISATION
*    ^^^^^
*--------  NPIXEL = ZAHL DER PIXELS DIE ALS NEUE NACHBARN EINGETRAGEN
*          WURDEN
* NPIXEL * (X-WERT IN GITTER-KOORDINATEN ; Y-WERT IN GITTER-KOORDINATEN)
*
*-----------------------------------------------------------------------


      INTEGER*4 XDIMUS , YDIMUS , XDIM , YDIM , NENVIR , NSTLEN
      INTEGER*4 KLAMAT (0:XDIMUS,0:YDIMUS)
      INTEGER*4 AGGMAT (0:XDIMUS,0:YDIMUS)
      INTEGER*4 STACK(*)

      INTEGER*4 MAXAA,LNPOIN,IRUF
      INTEGER*4 STPOIN(*),STOSIZ(*),KLAVEC(*)

*------ LOGICAL VARIABLEN

*    TESTED  :  ZWEIDIM. ARRAY
*               MARKIERUNG OB BEREITS ZU EINEM R.ELM ZUGEHOERIG

      LOGICAL*1 TESTED(0:XDIMUS,0:YDIMUS)


*---- ERKLAERUNG DER LOKALEN VARIABLEN

*------ INTEGER VARIABLEN

*    NREFAC  :  AKTUELLE ANZAHL GEFUNDENER R.ELM
*    NPOREF  :  ZAHL DER PIXEL IN DEM AKTUELLEN AGG_AREA
*
*    BDPPOI  :  ZEIGER AUF WORT IN STPOIN, IN DEM DAS GRENZPIXEL
*               EINGETRAGEN WERDEN SOLL
*    NBPPOI  :  POINTER AUF WORT IN STPOIN, IN DEM DIE ZAHL DER
*               GRENZPIXEL DES AKTUELLEN AA'S ABGESPEICHERT WIRD
*
*    I , J   :  SCHLEIFEN-VARIABLE FUER AUSGABE
*
*
*
*    ISEAR   :  ENTHAELT INDEX DES SUCHVEKTORS
*    SRVECX  :  EINDIM. ARRAY ; ENTHAELT X-KOORDINATEN DER SUCHVEKTOREN
*    SRVECY  :  EINDIM. ARRAY ; ENTHAELT Y-KOORDINATEN DER SUCHVEKTOREN
*
*    ISTPOI  :  AKTUELLE NUMMER DES GERADE BEARBEITETEN PIXELS
*               VON DEM AUS DIE ITERATIVE SUCHE AUSGEHT
*
*    IAX     :  X-WERT DES PIXELS DAS UNTERSUCHT WIRD
*    IAY     :  Y-WERT DES PIXELS DAS UNTERSUCHT WIRD
*
*    ITAKT   :  ZAHL DER SUCH-ITERATIONEN BIS AGG_AREA VOLLSTAENDIG
*    STPOLD  :  ZAHL DER PIXEL IN DER AKTUELLEN SUCH-ITERATION
*
*
*    STKLEN  :  AKTUELLE LAENGE DES STAPELS IN HALBWORTEN
*    STKADR  :  ADDRESSE FUER STAPEL-WORT IN DAS DIE ZAHL DER NEU-
*               GEFUNDENEN NACHBARN EINGETRAGEN WIRD
*
*    STKUSE  :  AKTUELLE STAPEL-WORT-ADDRESSE FUER STACK-WORT
*               IN DAS DIE KOORDINATEN DER GEFUNDENEN NACHBARN
*               EINGETRAGEN WIRD.
*
*    STADHD  :  STAPEL-ADDRESSE, DIE DIE ZAHL DER PIXELS ENTHAELT DIE
*               ABGEARBEITET WERDEN MUESSEN
*
*    STLMAX  :  SPEICHERT GROESSTE STAPEL-LAENGE WAEHREND AUSFUEHRUNG
*
*    ITMAX   :  SPEICHERT GROESSTE ANZAHL DER ITERATIONEN WAEHREND "
*
*    FELMAX  :  ZAHL DER PIXEL IM BISHER GROESSTEN AGG_AREA
*
*    offset  :		- Falls negative Werte auftauchen ist dies der 
*			  betragsmaessig groesste negative Wert der zu
*			  allen Klassenwerten addiert wird, damit keine
*			  negativen Werte im Array stehen.
*

      INTEGER*4 NREFAC , NPOREF
      INTEGER*4 NBDPOI , BDPPOI

      INTEGER*4 IAX,IAY , I , J
      INTEGER*4 SRVECX(8) , SRVECY(8) , ISEAR

      INTEGER*4 STPOLD , STKADR , STKUSE , STKLEN
      INTEGER*4 STADHD , ISTPOI , ITAKT

      INTEGER*4 STLMAX , ITMAX , FELMAX

      INTEGER*4 offset

      CHARACTER*80 INFILE, mapset, OFILE1

*---- ERKLAERUNG DER VON STRTXY ERMITTELTEN VARIABLEN

*------ INTEGER VARIABLEN

*
*    IERR    :  INDIKATOR AUF NEUES AGG_AREA ---  WIRD IN SUBR. STRTVA
*               ERMITTELT, KEINE LOKALE VARIABLE
*
*     --->      =  0 WENN EIN NEUES  AGG_AREA GEFUNDEN WURDE
*     --->      = -1 WENN KEIN NEUES AGG_AREA MEHR GEFUNDEN
*                    WERDEN KONNTE  -->  ENDE DES PROGRAMMES
*
*
*    SUCHX   :  STARTPIXEL   X-KOORDINATE EINES NEUEN AGG_AREAS
*    SUCHY   :  STARTPIXEL   Y-KOORDINATE """
*


      INTEGER*4 SUCHX , SUCHY , IERR

*-----------------------------------------------------------------------

*----  SUCHVEKTOREN DEFINIEREN

      DATA SRVECX/0,1,0,-1,1,1,-1,-1/
      DATA SRVECY/1,0,-1,0,1,-1,-1,1/


*-----------------------------------------------------------------------

*---- ERKLAERUNG DER SPRUNG-LABEL

*---- LABEL     :  ----  WARUM WIRD GESPRUNGEN -------------------------

*-----  100        FINDE STARTPIXEL VON DEM AUS AGG_AREA GEFUNDEN WIRD

*-----  300        GRENZPIXEL IM STAPEL GEFUNDEN

*-----  350        ITERATIVES SUCHEN

*-----  400        BEI DER SUCHE NACH NACHBARN AUF SCHON BEARBEITETEN
*                  ODER NICHT ZUM AGG_AREA GEHOERENDEN PIXEL GESTOSSEN

*-----  500        ENDE DER AGG_AREA-BILDUNG

*-----------------------------------------------------------------------


*----  EINLESEN DER KLA-WERTE aus der Grass Datenbank

      IF (IRUF.EQ.1) THEN

         call read_data ( infile, mapset, klamat, xdim, ydim, offset )

      ENDIF

      DO  16 IAY = 1,YDIM
         DO 17 IAX = 1,XDIM
            TESTED(IAX,IAY) = .FALSE.
  17     CONTINUE
  16  CONTINUE

*----  NEGATIVE KLA - WERTE  WERDEN NICHT AKZEPTIERT

      DO  15 IAY = 0,YDIMUS
         DO 25 IAX = 0,XDIMUS
            IF (KLAMAT(IAX,IAY).LT.0) THEN

               TESTED(IAX,IAY) = .TRUE.
               AGGMAT(IAX,IAY) = 0

            ENDIF
  25     CONTINUE
  15  CONTINUE

*----  AUSGABE DER KLA-WERTE AUF UNIT 6   WENN GEWUENSCHT

        IF (KLAOUT.AND.IRUF.EQ.1) THEN

      WRITE (6,2002)
 2002 FORMAT(///' KLA - WERTE : '//)

*VORL

      DO 150 I=1,XDIM/30 + 1
         DO 160 J =1,YDIM/30 +1

            WRITE (6,222) (I-1)*30+1 , (J-1)*30+1
 222  FORMAT('1',/'   PIXEL RECHTS OBEN : ',2I10/)


            DO  30 IAY = (J-1)*30+1 ,MIN0(30*J,YDIM)
               WRITE (6,2001)
     &               (KLAMAT(IAX,IAY),IAX=(I-1)*30+1,MIN0(30*I,XDIM))

 2001 FORMAT (/1X,30I4)

  30        CONTINUE

 160     CONTINUE
 150  CONTINUE

      ENDIF



*----  INITIALISIERE AGGREG MIT GRENZPIXELFINDUNG

      NBDPOI = 1
      BDPPOI = 2

      NREFAC = 0
      STLMAX = 0
      ITMAX  = 0
      FELMAX = 0

*----  SUCHE STARTPIXEL

 100  CONTINUE

      CALL STRTXY
     &(SUCHX,SUCHY,TESTED,XDIMUS,YDIMUS,IERR)

      IF (IERR.NE.0) GOTO 500

*----  NEUES AGG_AREA GEFUNDEN ;   ERHOEHE NREFAC UM 1

               NREFAC = NREFAC + 1
               KLAVEC(NREFAC) = KLAMAT(SUCHX,SUCHY)

*----  STARTPIXEL MUSS GRENZPIXEL SEIN
*      RAHMEN WIRD SPAETER BERUECKSICHTIGT, -> EINTRAGEN IN STPOIN
*      WENN DAS STARTPIXEL IM STAPEL BEARBEITET WIRD

               STPOIN(NBDPOI) = 0

*      WRITE (6,2005) NREFAC,SUCHX,SUCHY
*2005 FORMAT(///' AGGMAT WERTE : VOR DEM ' ,I4,'-TEN AGG_AREA'/
*    & '  STARTAGG_AREA :  ',2I3//)
*     DO  65 IAY = 1,YDIM
*VORL
*           WRITE (6,2006) (AGGMAT(IAX,IAY),IAX=1,XDIM),
*    &      (TESTED(IAT,IAY),IAT=1,XDIM)
*  65 CONTINUE
*2006 FORMAT (1X,9I4,10X,9L4/)
*####




*----  GEFUNDENES PIXEL ALS ZUGEORDNET MARKIEREN
*----  INITIALISIERE SUCHE NACH NACHBAR-PIXEL MIT GLEICHEM KLA-WERT

      TESTED(SUCHX,SUCHY) = .TRUE.
      NPOREF = 1
      IF (IRUF.EQ.1) AGGMAT(SUCHX,SUCHY) = NREFAC

*----  STAPEL INITIALISIEREN

      ITAKT    = 1

      STACK(1) = 1
      STPOLD   = 1
      STACK(2) = SUCHX
      STACK(3) = SUCHY

      STKLEN = 3
      STKADR = 4
      STKUSE = 5

      STADHD = 1

*----  FINDE NEUES NACHBAR-PIXEL MIT GLEICHEM KLA-WERT

 350  CONTINUE

*---- SETZE ZAHL DER NEU-GEFUNDENEN NACHBARN = 0


      IF (STKADR.GE.NSTLEN) THEN
         WRITE (6,'(//1X,A//)')'****--->  PARAMETER NSTLEN ZU KLEIN  !!'
         STOP ' STAPEL ZU KLEIN DIMENSIONIERT'
      ENDIF

      STACK(STKADR) = 0
      ITAKT  = ITAKT +1


*----  SCHLEIFE UEBER STAPEL-PIXELS

      DO 380 ISTPOI = 1,STPOLD

         SUCHX = STACK(STADHD + (ISTPOI*2) - 1)
         SUCHY = STACK(STADHD + (ISTPOI*2))

*----  FINDE STAPEL_PIXEL DIE GRENZPIXEL SIND, 8-ER UMGEBUNG

         IF (IRUF.EQ.2) THEN

            DO 390 ISEAR = 1,8

               IAX = SUCHX + SRVECX(ISEAR)
               IAY = SUCHY + SRVECY(ISEAR)


               IF (AGGMAT(SUCHX,SUCHY).NE.AGGMAT(IAX,IAY)) THEN

*----  PIXEL IST EIN GRENZPIXEL -> KOORDINATEN IN STPOIN SPEICHERN

                  STPOIN(NBDPOI) = STPOIN(NBDPOI) + 1

                  STPOIN(BDPPOI) = SUCHX
                  STPOIN(BDPPOI+1) = SUCHY

                  BDPPOI  =  BDPPOI+2

                  IF (BDPPOI+1.GE.LNPOIN) THEN
            WRITE (6,*) ' ARRAY STPOIN ZU KLEIN DIMENSIONIERT :',LNPOIN
                     STOP ' LNPOIN IST ZU KLEIN '
                  ENDIF

                  GOTO 300

               ENDIF
 390        CONTINUE

         ENDIF


 300     CONTINUE

*----  SCHLEIFE UEBER SUCHVEKTOREN

         DO 400 ISEAR = 1,NENVIR

            IAX = SUCHX + SRVECX(ISEAR)
            IAY = SUCHY + SRVECY(ISEAR)

            IF (TESTED(IAX,IAY)) THEN

*----  PIXEL SCHON ZUGEORDNET

               GOTO 400

            ELSE

*----  PRUEFE OB KLA - WERTE VON BEIDEN PIXELN GLEICH ?

               IF (KLAMAT(SUCHX,SUCHY).EQ.KLAMAT(IAX,IAY)) THEN

*----  TRAGE PIXEL IN STAPEL EIN UND MARKIERE ALS ZUGEORDNET
*----  WEISE AGGMAT(IAX,IAY) LAUFENDE FACETTEN-NUMMER ZU

                  TESTED (IAX,IAY) = .TRUE.
                  IF (IRUF.EQ.1) AGGMAT (IAX,IAY) = NREFAC

*------ BRECHE PROGRAMM AB WENN STAPEL UEBERLAEUFT



      IF (STKUSE+2.GE.NSTLEN) THEN
         WRITE (6,'(//1X,A//)')'****--->  PARAMETER NSTLEN ZU KLEIN  !!'
         STOP ' STAPEL ZU KLEIN DIMENSIONIERT'
      ENDIF

                  STACK(STKUSE)   = IAX
                  STACK(STKUSE+1) = IAY

                  STKUSE = STKUSE + 2
                  STACK(STKADR) = STACK(STKADR) + 1
                  NPOREF = NPOREF + 1

               ELSE

*----  PIXEL GEHOERT NICHT ZUM AGG_AREA

                  GOTO 400

               ENDIF
            ENDIF
 400     CONTINUE

 380  CONTINUE


*----  ALLE PIXELS DER LETZTEN ITERATION ABGEARBEITET


      IF (STACK(STKADR).EQ.0) THEN

*----    BEI DER LETZTEN ITERATION KEIN PIXEL MEHR GEFUNDEN

*------------ SETZE POINTER FUER GRENZPIXEL NEU

         IF (IRUF.EQ.2) THEN
            STOSIZ(NREFAC) = NPOREF
            NBDPOI = BDPPOI
            BDPPOI = BDPPOI + 1

         ENDIF

*------------ ETWAS PROGRAMM-STATISTIK

         IF (IRUF.EQ.1) THEN
            IF (STKLEN.GT.STLMAX) STLMAX = STKLEN
            IF (NPOREF.GT.FELMAX) FELMAX = NPOREF
            IF (ITAKT .GT.ITMAX)  ITMAX  = ITAKT

         ENDIF

            GOTO 100

      ELSE

*----    BERECHNE NEUE STAPEL ADDRESSEN FUER NAECHSTE ITERATION

         STPOLD = STACK(STKADR)
         STADHD = STKADR
         STKADR = STKADR + STPOLD*2 + 1
         STKUSE = STKADR + 1
         STKLEN = STKLEN + STPOLD*2 + 1

*----    ARBEITE DIESEN STAPEL AB

         GOTO 350

      ENDIF



*---------  ENDE DER AGG_AREA-BILDUNG EV. STATISTIK

 500  CONTINUE

      IF (IRUF.EQ.1) THEN

*---- AUSGABE EINIGER WICHTIGER VARIABLEN

      WRITE (6,'(1X,2I10,10X,I10)')
     &      XDIM,YDIM ,NENVIR

      WRITE (6,6002) NREFAC , NSTLEN , STLMAX+1 , ITMAX , FELMAX

 6002 FORMAT(///'**********      PROGRAMM STATISTIK      ***********'//
     1/' ZAHL DER AGG_AREAS                 : ',I10/
     2/' GROESSTE ERLAUBTE STAPELLAENGE     : ',I10/
     3 ' GROESSTE AUFGETRETENE STAPELLAENGE : ',I10/
     4/' GROESSTE ANZAHL VON ITERATIONEN    : ',I10/
     5 ' FLAECHE DES GROESSTEN AGG_AREAES   : ',I10//
     6 ' **************************************************'//)

*----------------------  VORL., AUSGABE DES STPOIN VEKTORS

***   WRITE (6,'(//A,I8//)') ' STPOIN VEKTOR , BDPPOI =',BDPPOI
***   WRITE (6,'(1X,10I5)') (STPOIN(I),I=1,BDPPOI)

*----  AUSGABE DER AGG_AREAS AUF UNIT 6  WENN GEWUENSCHT

      IF (AGGOUT) THEN

         WRITE (6,2003)


         DO 650 I=1,XDIM/30 + 1
            DO 660 J =1,YDIM/30 +1

               WRITE (6,622) (I-1)*30+1 , (J-1)*30+1
               DO 630 IAY = (J-1)*30+1 ,MIN0(30*J,YDIM)
                  WRITE (6,6001)
     &                  (AGGMAT(IAX,IAY),IAX=(I-1)*30+1,MIN0(30*I,XDIM))
 630           CONTINUE

 660        CONTINUE
 650     CONTINUE
      ENDIF


*---- AUSGABE DER AGG_AREA AUF PO-DATEI UEBER UNIT 20

      call write_data ( ofile1, aggmat, xdim, ydim )

      ENDIF
C-----^^^^^ hoffentlich stimmt das an der Stelle m.s.

      RETURN

 2003 FORMAT(///' AGG_AREAE MATRIX : '//)
 622  FORMAT('1',/'   PIXEL RECHTS OBEN : ',2I10/)
99991 FORMAT     (' **************** FEHLER ****************'/
     +           ,' ** MEMBERNAME FEHLT ODER IST FALSCH ! **'/
     +           ,' **************** FEHLER ****************'/)
 6001 FORMAT (/1X,30I4)
 1001 STOP ' READERROR AUF UNIT 10'
 1002 STOP ' END OF DATA UNIT 10'
C9998 STOP ' PIXELDATEI KANN NICHT GEOEFFNET WERDEN'
 8882 STOP ' PIXELDATEI KANN NICHT BESCHRIEBEN WERDEN'
 8881 STOP ' DATEN_FILE KANN NICHT GEOFFNET WERDEN'
      END
C----------------------------------------

      SUBROUTINE STRTXY(SUCHX,SUCHY,TESTED,XDIMUS,YDIMUS,IERR)

*     ROUTINE BERECHNET X,Y - KOORDINATEN FUER DIE NAECHSTE
*     STARTPIXEL EINES AGG_AREAES

      IMPLICIT CHARACTER*1 (A-Z)

      INTEGER*4 SUCHX,SUCHY,XDIMUS,YDIMUS,IERR,IRUN,ISTRT
      LOGICAL*1 TESTED(0:XDIMUS,0:YDIMUS)
      DATA ISTRT/1/

      DO 200 IRUN = ISTRT,(YDIMUS+1) * XDIMUS

*----  BERECHNE X,Y KOORDINATEN + PRUEFE OB PIXEL SCHON BEARBEITET
*      WURDE

            SUCHX = IRUN/(YDIMUS+1)
            SUCHY = MOD(IRUN-1,(YDIMUS+1))

         IF (TESTED(SUCHX,SUCHY)) THEN


*----  PIXEL GEHOERT SCHON ZU EINEM AGG_AREA  --> WEITERSUCHEN

*       WRITE(6,*) 'P1 :IRUN,SX,SY,TST '
*    &  ,IRUN,SUCHX,SUCHY,TESTED(SUCHX,SUCHY)

            GOTO 200

         ELSE


*----  PIXEL EINES NEUEN AGG_AREAES GEFUNDEN -> X,Y UEBERGABE AN PROCA


            ISTRT = IRUN
            IERR = 0
            RETURN

         ENDIF

 200  CONTINUE

*---- KEIN NEUES STARTPIXEL MEHR ZU FINDEN

      IERR = -1
      ISTRT = 1
      IRUN  = 1

      RETURN
      END

