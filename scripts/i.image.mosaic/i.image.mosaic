#!/bin/sh
# written by Markus Neteler 18. August 1998 / 20. Jan. 1999
#            neteler geog.uni-hannover.de
# mosaic code from Felix Gershunov (Felix spsl.nsc.ru)
# updated for GRASS 5.7 by Michael Barton 2004/04/05
# further cleanup by H.Bowman, December 2011
#
# COPYRIGHT:    (C) 1999,2007,2011 by the GRASS Development Team
#
#               This program is free software under the GNU General Public
#               License (>=v2). Read the file COPYING that comes with GRASS
#               for details.
#
# TODO: 
#       - test if g.findfile for colr file succeeds
#       - fix isnull() in r.mapcalc for 3 and 4 maps composites
#            [done for 2 maps]
#       - fix color table length (currently only 256 cols supported, make
#         flexible)
#            [done for 2 maps]
#--------------------------------------------------


#% Module
#%  label: Mosaics up to four images, extending the color table.
#%  description: creates map *.mosaic
#%  keywords: raster, imagery, mosaicking
#% End
#% option
#%  key: image1
#%  type: string
#%  gisprompt: old,cell,raster
#%  description: 1st map for mosaic (top of image stack)
#%  required : yes
#%  key_desc: name
#% end
#% option
#%  key: image2
#%  type: string
#%  gisprompt: old,cell,raster
#%  description: 2nd map for mosaic
#%  required : yes
#%  key_desc: name
#% end
#%  option
#%  key: image3
#%  type: string
#%  gisprompt: old,cell,raster
#%  description: 3rd map for mosaic
#%  required : no
#%  key_desc: name
#% end
#% option
#%  key: image4
#%  type: string
#%  gisprompt: old,cell,raster
#%  description: 4th map for mosaic
#%  required : no
#%  key_desc: name
#% end

if [ -z "$GISBASE" ] ; then
    echo "You must be in GRASS GIS to run this program" >&2
    exit 1
fi

# save command line
if [ "$1" != "@ARGS_PARSED@" ] ; then
    CMDLINE=`basename "$0"`
    for arg in "$@" ; do
        CMDLINE="$CMDLINE \"$arg\""
    done
    export CMDLINE
    exec g.parser "$0" "$@"
fi


#### check if we have awk
if [ ! -x "`which awk`" ] ; then
    g.message -e "awk required, please install awk or gawk first"
    exit 1
fi

# setting environment, so that awk works properly in all languages
unset LC_ALL
LC_NUMERIC=C
export LC_NUMERIC
   
### setup enviro vars ###
MAPSET=`g.gisenv get=MAPSET`
LOCATION_NAME=`g.gisenv get=LOCATION_NAME`
GISDBASE=`g.gisenv get=GISDBASE`
CURRLOCATION="$GISDBASE/$LOCATION_NAME/$MAPSET"

g.message -w message='Do not forget to set region properly to cover all images!'
#g.region rast=map1,map2,map3,map4


IMAGE1=`echo "$GIS_OPT_IMAGE1" | cut -f1 -d'@'`
IMAGE2=`echo "$GIS_OPT_IMAGE2" | cut -f1 -d'@'`
IMAGE3=`echo "$GIS_OPT_IMAGE3" | cut -f1 -d'@'`
IMAGE4=`echo "$GIS_OPT_IMAGE4" | cut -f1 -d'@'`


# two images to patch
if [ -z "$GIS_OPT_IMAGE3" -a  -z "$GIS_OPT_IMAGE4" ]; then
     g.message "Mosaicking two images..."

     OUTNAME="$IMAGE1.$IMAGE2.mosaic"

     r.mapcalc "$OUTNAME = if(isnull(\"$GIS_OPT_IMAGE1\"), \
					\"$GIS_OPT_IMAGE2\" + 256, \
					\"$GIS_OPT_IMAGE1\")"

     #modify the color table:
     echo '% 0 1024' > "$CURRLOCATION/colr/$OUTNAME"

     eval `g.findfile element=cell file="$GIS_OPT_IMAGE1"`
     mapset1="$mapset"
     cat "$GISDBASE/$LOCATION_NAME/$mapset1/colr/$GIS_OPT_IMAGE1" | \
        grep -v '%' | tr -s ' ' '\012' >> "$CURRLOCATION/colr/$OUTNAME"

     eval `g.findfile element=cell file="$GIS_OPT_IMAGE2"`
     mapset2="$mapset"
     cat "$GISDBASE/$LOCATION_NAME/$mapset2/colr/$GIS_OPT_IMAGE2" | \
        grep -v '%' | tr -s ' ' '\012' | \
	awk -F':' '{print $1+256":"$2":"$3":"$4}' \
	>> "$CURRLOCATION/colr/$OUTNAME"

     g.message message="Done. New raster map <$OUTNAME> created."

     # write cmd history:
     r.support "$OUTNAME" history="$CMDLINE"
     exit 0
fi

# three images to patch
if [ -z "$GIS_OPT_IMAGE3" -o  -z "$GIS_OPT_IMAGE4" ] ; then
     g.message "Mosaicking three images..."

     OUTNAME="$IMAGE1.$IMAGE2.$IMAGE3.mosaic"

     r.mapcalc "$OUTNAME = eval(t1=if(\"$GIS_OPT_IMAGE1\", \
		\"$GIS_OPT_IMAGE1\", \"$GIS_OPT_IMAGE2\" + 256), \
		t2=if(t1 % 256, t1, \"$GIS_OPT_IMAGE3\" + 512), t2)"

     #modify the color table:
     echo '% 0 1024' > "$CURRLOCATION/colr/$OUTNAME"
     eval `g.findfile element=colr file="$GIS_OPT_IMAGE1"`
     tail -256 "$file" >> "$CURRLOCATION/colr/$OUTNAME"
     eval `g.findfile element=colr file="$GIS_OPT_IMAGE2"`
     tail -256 "$file" | awk -F':' '{print $1+256":"$2":"$3":"$4}' \
        >> "$CURRLOCATION/colr/$OUTNAME"
     eval `g.findfile element=colr file="$GIS_OPT_IMAGE3"`
     tail -256 "$file" | awk -F':' '{print $1+512":"$2":"$3":"$4}' \
        >> "$CURRLOCATION/colr/$OUTNAME"
     g.message message="Done. New raster map <$OUTNAME> created."

     # write cmd history:
     r.support "$OUTNAME" history="$CMDLINE"
     exit 0
fi

# four images to patch
if [ -n "$GIS_OPT_IMAGE3" -a  -n "$GIS_OPT_IMAGE4" ] ; then
     g.message "Mosaicking four images..."

     OUTNAME="$IMAGE1.$IMAGE2.$IMAGE3.$IMAGE4.mosaic"

     r.mapcalc "$OUTNAME = eval(t1=if(\"$GIS_OPT_IMAGE1\", \"$GIS_OPT_IMAGE1\", \
		\"$GIS_OPT_IMAGE2\" + 256), \
		t2=if(t1 % 256, t1, \"$GIS_OPT_IMAGE3\" + 512), \
		t3=if(t2 % 256, t2, \"$GIS_OPT_IMAGE4\" + 768), t3)"

     #modify the color table:
     echo '% 0 1024' > "$CURRLOCATION/colr/$OUTNAME"
     eval `g.findfile element=colr file="$GIS_OPT_IMAGE1"`
     tail -256 "$file" >> "$CURRLOCATION/colr/$OUTNAME"
     eval `g.findfile element=colr file="$GIS_OPT_IMAGE2"`
     tail -256 "$file" | awk -F':' '{print $1+256":"$2":"$3":"$4}' \
        >> "$CURRLOCATION/colr/$OUTNAME"
     eval `g.findfile element=colr file="$GIS_OPT_IMAGE3"`
     tail -256 "$file" | awk -F':' '{print $1+512":"$2":"$3":"$4}' \
        >> "$CURRLOCATION/colr/$OUTNAME"
     eval `g.findfile element=colr file="$GIS_OPT_IMAGE4"`
     tail -256 "$file" | awk -F':' '{print $1+768":"$2":"$3":"$4}' \
        >> "$CURRLOCATION/colr/$OUTNAME"

     g.message message="Done. New raster map <$OUTNAME> created."

     # write cmd history:
     r.support "$OUTNAME" history="$CMDLINE"
     exit 0
fi

