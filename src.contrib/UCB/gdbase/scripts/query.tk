#############################################################
#
# include procedures here
#
#############################################################

proc clear_dblist {dbpath} {
	catch { foreach i [exec ls $dbpath] \
		{.top.database.listbox delete end } }
	}

proc clear_maplist {mappath} {
	catch {	foreach i [exec ls $mappath ] \
		{.top.map.listbox delete end } }
	}
proc set_dblist {dbpath} {
	catch { foreach i [exec ls $dbpath] \
		 {.top.database.listbox insert end $i} }
	}
proc set_maplist {mappath} {
	catch { foreach i [exec ls $mappath] \
		{.top.map.listbox insert end $i} }
	}
	
proc load_rule {att cat rule_list} {
#add current rule to the final rules set
	global rule fatt fcat frule maxrule 

	if {$rule < $maxrule} { 
		next 
		return 0}
	if {$rule_list == "" } {
		catch {exec wish -f $dbasedir/error No query has been specified}
		return -1
		}
	if {$att == "" } {
		catch {exec wish -f $dbasedir/error No new attribute has\
			been specified}
		return -1
		}
	if {$cat == "" } {
		catch {exec wish -f $dbasedir/error No new category has\
			been specified}
		return -1
		}
	set fatt($rule) $att
	set fcat($rule) $cat
	set frule($rule) $rule_list
	if {$rule > $maxrule} {set maxrule $rule}
	set rule [expr $rule + 1]
	.bottom.qinfo.att.entry delete 0 end
	.bottom.qinfo.cat.entry delete 0 end
	.bottom.query.entry delete 0 end
	return $maxrule
	}

proc import {oldrules} {
#load rules from preexisting file
	global fatt fcat frule maxrule rule att cat rule_list
	set i 0
	set counter 1
	set rule_number 1
	set maxrule 0

	set rulesfile [open $oldrules r]

	while { [gets $rulesfile ruleline($i) ] >= 0} {
		if {$ruleline($i) != ""} {
			switch $counter {
				1 {set fatt($rule_number) $ruleline($i); \
					incr counter +1}
				2 {set fcat($rule_number) $ruleline($i); \
					incr counter +1}
				3 {set frule($rule_number) $ruleline($i); \
					set counter 1; \
					incr rule_number +1}
				}
			}
		incr i +1
		}
	close $rulesfile
	set maxrule [expr $rule_number - 1]
	set att $fatt(1)
        set cat $fcat(1)
        set rule_list $frule(1)
}

proc review {} {
#step backwards through query rules
	global rule att cat rule_list fatt fcat frule maxrule
	if {$rule > $maxrule && $rule_list != "" } {
		load_rule $att $cat $rule_list 
		set rule [expr $rule - 1 ]
		}
	if {$rule > 1} {
		set rule [expr $rule - 1]
		set att $fatt($rule)
		set cat $fcat($rule)
		set rule_list $frule($rule)
		}
	}

proc next {} {
#step forwards through query rules
	global att cat rule_list fatt fcat frule rule maxrule
	if {$rule <= $maxrule} {
		set rule [expr $rule + 1]
		set att $fatt($rule)
		set cat $fcat($rule)
		set rule_list $frule($rule)
		}
	}
proc clear {} {
#clear (restart) current query rule
	global att cat rule_list fatt fcat frule rule
	set att ""
	set cat ""
	set rule_list ""
	set fatt($rule) ""
	set fcat($rule) ""
	set frule($rule) ""
	}

## added 8.98 M. Neteler
proc derase {} {
# if analysis="display" then d.erase the monitor
	exec d.erase
	}

proc finish {} {
#load final rules, write to file and run r.gdbase commandline
	global rule fatt fcat frule maxrule att cat rule_list \
		map_fullname outfile_name dbfile_name user_mapset \
		analysis dbasedir saverules_name reclassfile_type

	if {$rule >= $maxrule && $rule_list != "" && $analysis != "unique"} {
		load_rule $att $cat $rule_list
		}
	
	if {$maxrule < 1 && $analysis != "unique"} {
		catch {exec wish -f $dbasedir/error No rules specified}
		return -1
		}
		
	if {$analysis == "display" } {
		set outfile_name tmp.gdbase}

	if {$map_fullname == ""} {
		catch {exec wish -f $dbasedir/error No input map specified}
		return -1
		}

	if {$dbfile_name == ""} {
		catch {exec wish -f $dbasedir/error No database file specified}
		return -1
		}

	if {$outfile_name == ""} {
		catch {exec wish -f $dbasedir/error No output map specified}
		return -1
		}

	set rulesfile [open /tmp/query.rules w+ ]

	if {$analysis == "unique"} {
		puts $rulesfile $rule_list
		puts $rulesfile "\n"
		}

	if {$analysis != "unique"} {
		for {set i 1} {$i <= $maxrule} {incr i +1} {
			puts $rulesfile $fatt($i)
			puts $rulesfile $fcat($i)
			puts $rulesfile $frule($i)
			puts $rulesfile "\n"
			}
		}

	close $rulesfile
	if {$saverules_name != ""} {
		exec cp /tmp/query.rules $saverules_name
		}

	switch $reclassfile_type {
		cell {set gdb "r.gdbase"}
		dig {set gdb "v.gdbase"}
		site_lists {set gdb "s.gdbase"}
		default {set gdb "r.gdbase"}
		}

## path changed 8/98 M. Neteler
	catch {exec $dbasedir/../../bin/$gdb i=$map_fullname \
		o=$outfile_name d=$dbfile_name r=/tmp/query.rules \
		a=$analysis}
	if {$analysis != "display"} {
		destroy .
		}
	if {$analysis == "display"} {
		for {set i 1} {$i <= $maxrule} {incr i +1} {
			set rule $i
			clear
			}
		set rule 1
		}
	}



wm minsize . 0 0
frame .top 
frame .upper 
frame .middle -relief groove -borderwidth 2
frame .lower 
frame .bottom
frame .top.mapset
frame .top.database
frame .top.map
frame .upper.datab
frame .upper.map
frame .lower.fields
frame .lower.operators
frame .lower.values
frame .bottom.qinfo
frame .bottom.qinfo.rule
frame .bottom.qinfo.att
frame .bottom.qinfo.cat
frame .bottom.query
frame .bottom.click

wm title . "GDBase - GRASS Data Query System (v2.1c - 1998)"
wm iconname . "GDBase"

####################################################
#
# Setup for Choosing Database file and Reclass File
#
###################################################

set analysis [lindex $argv 0]
set reclassfile_type [lindex $argv 1]
set dbasedir [lindex $argv 2]
set maxrule 0
set oldrules [lindex $argv 3]
	if {$oldrules != ""} {import $oldrules}
set saverules_name $oldrules
set gisdbase [exec printenv | grep GISDBASE | sed s/GISDBASE=// ]
set location_name [exec printenv | grep LOCATION_NAME | sed s/LOCATION_NAME=// ]
set user_mapset [exec printenv | grep MAPSET | sed s/MAPSET=// ]
set location $gisdbase/$location_name
set number_of_fields 0
set old_number_of_fields 0
set old_number_of_values 0
set mapset PERMANENT
lappend values_short 0
set rule 1


#
# create listbox etc for mapset
#
label .top.mapset.title -text "Mapsets:" -font \
	-Adobe-Helvetica-Bold-R-Normal--*-120-*
listbox .top.mapset.listbox -yscroll ".top.mapset.scrollbar set" -relief sunken -height 5
scrollbar .top.mapset.scrollbar -orient vertical -relief sunken \
	-command ".top.mapset.listbox yview"
foreach i [exec ls $location] {.top.mapset.listbox insert end $i}


#
# create scrollbox for database file names
#
label .top.database.title -text "Database Files:" -font \
	-Adobe-Helvetica-Bold-R-Normal--*-120-*
listbox .top.database.listbox -yscroll ".top.database.scrollbar set" \
	-relief sunken -height 5
scrollbar .top.database.scrollbar -orient vertical -relief sunken \
	-command ".top.database.listbox yview"

#
# create scrollbox for reclass file names
#
label .top.map.title -text "Available Maps:" -font \
	-Adobe-Helvetica-Bold-R-Normal--*-120-*
listbox .top.map.listbox -yscroll ".top.map.scrollbar set" -relief sunken -height 5
scrollbar .top.map.scrollbar -orient vertical -relief sunken \
	-command ".top.map.listbox yview"

#
# create entries for selected files
#
message .upper.datab.message1 -anchor c -width 150 -text "Database File Name:" 
entry .upper.datab.entry1 -relief sunken -textvariable dbfile_name
message .upper.datab.message2 -anchor c -width 200 \
	-text "Originally set to use with:"
entry .upper.datab.entry2 -relief sunken -textvariable to_use_with \
	-xscroll ".upper.datab.scrollbar set" -state disabled
scrollbar .upper.datab.scrollbar -orient horizontal -relief sunken \
	-command ".upper.datab.entry2 xview"

message .upper.map.message1 -anchor c -width 150 -text "Input Map Layer Name:"
entry .upper.map.entry1 -relief sunken -textvariable map_fullname
message .upper.map.message2 -anchor c -width 150 -text "Output Map Layer Name:"
entry .upper.map.entry2 -relief sunken -textvariable outfile_name
message .upper.map.message3 -anchor c -width 300 -text "Save Rules to Filename\
	(optional):" 
entry .upper.map.entry3 -relief sunken -textvariable saverules_name \
	-xscroll ".upper.map.scrollbar set"
scrollbar .upper.map.scrollbar -orient horizontal -relief sunken \
	-command ".upper.map.entry3 xview"


	
###################################################
#
# Setup for Query Creation
#
###################################################

#
#Create display menu of available field names
#
label .lower.fields.lab_field -text "Fields:" -font \
	-Adobe-Helvetica-Bold-R-Normal--*-120-*

listbox .lower.fields.listbox -yscrollcommand {.lower.fields.scrollbar set} -relief sunken

scrollbar .lower.fields.scrollbar -orient vertical -command {.lower.fields.listbox yview}

#
#Create display menu of available operators
#
label .lower.operators.label -text "Operators:" -font \
	-Adobe-Helvetica-Bold-R-Normal--*-120-*

listbox .lower.operators.listbox -yscrollcommand {.lower.operators.scrollbar set} -relief sunken
foreach i {and or not + - * / = > < ( ) } {
	.lower.operators.listbox insert end $i
	}

scrollbar .lower.operators.scrollbar -orient vertical -command {.lower.operators.listbox yview}

#
#Create display menu of available field values
#
label .lower.values.label -text "Fields Values:" -font \
	-Adobe-Helvetica-Bold-R-Normal--*-120-*

listbox .lower.values.listbox -yscrollcommand {.lower.values.scrollbar set} -relief sunken

scrollbar .lower.values.scrollbar -orient vertical -command {.lower.values.listbox yview}
 
#
# Create the query information entries
#

message .bottom.qinfo.rule.message -text "Query rule number:" \
		-anchor w -width 150
entry .bottom.qinfo.rule.entry -width 4 -state disabled\
		-textvariable rule 

message .bottom.qinfo.att.message -text "New category number:" \
		-anchor w -width 150
entry .bottom.qinfo.att.entry -relief sunken -width 10\
		-textvariable att

message .bottom.qinfo.cat.message -text "New category label:" \
		-anchor w -width 150
entry .bottom.qinfo.cat.entry -relief sunken -width 32\
		-textvariable cat \
		-xscroll ".bottom.qinfo.cat.scrollbar set"
scrollbar .bottom.qinfo.cat.scrollbar -command ".bottom.qinfo.cat.entry xview" \
		-orient horiz 

#
# Create the query entry and buttons
#

message .bottom.query.message -text "Query Rule:" -width 75
entry .bottom.query.entry -relief sunken -textvariable rule_list \
		-xscroll ".bottom.query.scrollbar set"  -width 50
scrollbar .bottom.query.scrollbar -command ".bottom.query.entry xview" \
		-orient horiz 

button .bottom.click.button1 -text "Run GDBase" -font \
		-Adobe-Helvetica-Bold-R-Normal--*-120-* -command "finish"
.bottom.click.button1 configure -foreground black -background grey

button .bottom.click.button2 -text "Next Rule" -font \
	-Adobe-Helvetica-Bold-R-Normal--*-120-* \
	-command {load_rule $att $cat $rule_list }
.bottom.click.button2 configure -foreground black -background grey

button .bottom.click.button3 -text "Quit Without Saving" \
	-font -Adobe-Helvetica-Bold-R-Normal--*-120-* -command "destroy . "
.bottom.click.button3 configure -foreground black -background grey

button .bottom.click.button4 -text "Review Rule" \
	-font -Adobe-Helvetica-Bold-R-Normal--*-120-* -command "review"
.bottom.click.button4 configure -foreground black -background grey

button .bottom.click.button5 -text "Clear Rule" \
	-font -Adobe-Helvetica-Bold-R-Normal--*-120-* -command "clear"
.bottom.click.button5 configure -foreground black -background grey

## added 8.98 M. Neteler
button .bottom.click.button6 -text "d.erase" \
	-font -Adobe-Helvetica-Bold-R-Normal--*-120-* -command "derase"
.bottom.click.button6 configure -foreground black -background grey

##############################################################
#
# Bind the boxes and buttons
#
##############################################################


bind .top.mapset.listbox <Double-Button-1> {
	set dbfiles_path $location/$mapset/dbase
	catch { clear_dblist $dbfiles_path }
	catch { clear_maplist $reclassfiles_path }

	set mapset [ selection get ]
	set dbfiles_path $location/$mapset/dbase
	set reclassfiles_path $location/$mapset/$reclassfile_type

	set_dblist $dbfiles_path
	set_maplist $reclassfiles_path
	}

bind .top.database.listbox <Double-Button-1> {
	set dbfile_name [ selection get ]
	set dbfile_fullname $dbfiles_path/$dbfile_name
	set dbfile [open $dbfile_fullname r ]

	gets $dbfile to_use_with
	set to_use_list [split $to_use_with " "]
	set map_fullname [lindex $to_use_list [lsearch -glob $to_use_list *@* ]]

	gets $dbfile dbline
	set fields [split $dbline :]
	set number_of_fields [llength $fields]
	for { set i 0 } { $i <= $old_number_of_fields} {incr i +1} {
		.lower.fields.listbox delete end
		}

	if {$analysis == "unique" && $old_number_of_fields > 0} {
		.lower.fields.listbox delete end
		}
		
	set i 0

	if {$analysis == "unique"} {
		.lower.fields.listbox insert end "ALL"
		}
		
	while {$i <= [expr $number_of_fields - 1]} {
		set field_name($i) [lindex $fields $i]
		.lower.fields.listbox insert end $field_name($i)
		set i [ expr $i + 1]
		}
	set old_number_of_fields $number_of_fields
	close $dbfile

	set old_number_of_values [llength $values_short]
	for { set i 0 } { $i <= $old_number_of_values} {incr i +1} {
		.lower.values.listbox delete end 
		}
	set values_short ""

	}


bind .top.map.listbox <Double-Button-1> {
	set reclassfile_name [ selection get ]
	set map_fullname $reclassfile_name@$mapset
	}


bind .lower.fields.listbox <Double-Button-1> {

	# place selection into query rule
	.bottom.query.entry insert insert [selection get]
	.bottom.query.entry insert insert " "

	# clear out old values from field values listbox
	set old_number_of_values [llength $values_short]
	for { set i 0 } { $i <= $old_number_of_values} {incr i +1} {
		.lower.values.listbox delete end 
		}

	# open dbfile and get column for values
	set current_field [ selection get ]
	set column_number [lsearch -exact $fields $current_field]
	set dbfile [open $dbfile_fullname r ]
	gets $dbfile 
	gets $dbfile
	set i 0
	unset values_short

	# get values from dbfile, sort and unique
	while { [ gets $dbfile dbline ] >= 0 } {
		set dataline [ split $dbline :]
		lappend values_all [lindex $dataline $column_number]
		set values_sort [lsort $values_all]
		set i [expr $i + 1]
		}
	close $dbfile
	unset values_all
	set old_value ""
	set junkme [llength $values_sort]
	for { set i 0 } {$i <= [llength $values_sort] } {incr i +1} {
		set current_value [lindex $values_sort $i]
		if { $current_value != $old_value} {
			.lower.values.listbox insert end $current_value
			lappend values_short $current_value
			}
		set old_value $current_value
		}
	if {$current_field == "ALL"} {
		set values_short ""
		}
	}

bind .lower.operators.listbox <Double-Button-1> {
	.bottom.query.entry insert insert [selection get]
	.bottom.query.entry insert insert " "
	}

bind .lower.values.listbox <Double-Button-1> {
	.bottom.query.entry insert insert "\""
	.bottom.query.entry insert insert [selection get]
	.bottom.query.entry insert insert "\" "
	}


###########################################################
#
#  Pack it all
#
###########################################################


pack .top .upper 
pack .middle -fill x -pady 4 -ipady 1 -ipadx 5
pack .lower .bottom 

pack .top.mapset .top.database .top.map -side left -padx 5 -pady 8
pack .upper.datab .upper.map -side left -padx 15 
pack .lower.fields .lower.operators .lower.values \
	-side left -padx 5 -pady 8
pack .bottom.click -side bottom -pady 10
pack .bottom.qinfo .bottom.query -side left -padx 15
pack .bottom.qinfo.rule .bottom.qinfo.att .bottom.qinfo.cat -side top

pack .top.mapset.title
pack .top.mapset.listbox .top.mapset.scrollbar -side left -fill y

pack .top.database.title
pack .top.database.listbox .top.database.scrollbar -side left -fill y

pack .top.map.title
pack .top.map.listbox .top.map.scrollbar -side left -fill y

pack .upper.datab.message1 .upper.datab.entry1 .upper.datab.message2\
	.upper.datab.entry2 .upper.datab.scrollbar -fill x -pady 4
pack .upper.map.message1 .upper.map.entry1 

if {$analysis != "display"} {
	pack .upper.map.message2 .upper.map.entry2 -pady 4 }

pack .upper.map.message3 .upper.map.entry3 

pack .lower.fields.lab_field -side top -anchor c
pack .lower.fields.listbox -side left
pack .lower.fields.scrollbar -side left -fill y
pack .lower.operators.label -side top -anchor c
pack .lower.operators.listbox -side left
pack .lower.operators.scrollbar -side left -fill y
pack .lower.values.label -side top -anchor c
pack .lower.values.listbox -side left
pack .lower.values.scrollbar -side left -fill y

if {$analysis != "unique"} {
	pack .bottom.qinfo.rule.message .bottom.qinfo.rule.entry -side left \
		-pady 3
	pack .bottom.qinfo.att.message .bottom.qinfo.att.entry -side left\
		-pady 3
	pack .bottom.qinfo.cat.message -side top -pady 3
	pack .bottom.qinfo.cat.entry .bottom.qinfo.cat.scrollbar -side top -fill x
}

pack .bottom.query.message .bottom.query.entry 
pack .bottom.query.scrollbar -fill x 

if {$analysis != "unique"} {
pack .bottom.click.button2 .bottom.click.button4 .bottom.click.button5 \
	.bottom.click.button1 .bottom.click.button3 -side left -padx 5 \
	-pady 10
}

if {$analysis == "unique"} {
	pack .bottom.click.button5 .bottom.click.button1 \
		.bottom.click.button3 -side left -padx 5 -pady 10
	}

## added 8/98 M. Neteler
if {$analysis == "display"} {
pack .bottom.click.button2 .bottom.click.button4 .bottom.click.button5 \
	.bottom.click.button1 .bottom.click.button3 .bottom.click.button6 \
	-side left -padx 5 -pady 10
}
