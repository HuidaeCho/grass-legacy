#!/bin/sh
#
# Sue Huse, REGIS, University of California, Berkeley
# sue@ced.berkeley.edu
#

trap "rm -f /tmp/db.rules; exit 1" 0 1 2 3 5 9 15


#where=`which $0 | sed s/r.gdbase//`
where=${GISBASE?}/etc/
DBASEDIR="$where"gdbase
export DBASEDIR

#########################################################
#
# Interactive Mode
#
#########################################################

if [ $# = 0 ]
then
	wish -f $DBASEDIR/setup.tk cell
	exit 1
fi

#########################################################
#
# Commandline Mode
#
#########################################################

#
# if non-interactive mode but improper number of arguments
#

if [ $# -eq 2 -o $# -gt 6 ]
then
	cat	$DBASEDIR/r.usage > "/dev/tty"
	exit 1
fi

echo > "/dev/tty"
echo "working..." > "/dev/tty"
echo > "/dev/tty"

#
# parse out the command line and assign to variables
# ****** Need to loop with a for or while, but can't get the syntax to work
#
	case $1 in
		analysis=*) ANALYSIS=`echo $1 | sed s/analysis=//` ;;
		a=*) ANALYSIS=`echo $1 | sed s/a=//` ;;

		database=*) DATABASE=`echo $1 | sed s/database=//` ;;
		d=*) DATABASE=`echo $1 | sed s/d=//` ;;

		input=*) INPUT=`echo $1 | sed s/input=//` ;;
		i=*) INPUT=`echo $1 | sed s/i=//` ;;

		output=*) OUTPUT=`echo $1 | sed s/output=//` ;;
		o=*) OUTPUT=`echo $1 | sed s/o=//` ;;

		rules=*) RULES=`echo $1 | sed s/rules=//` ;;
		r=*) RULES=`echo $1 | sed s/r=//` ;;
	esac

	case $2 in
		analysis=*) ANALYSIS=`echo $2 | sed s/analysis=//` ;;
		a=*) ANALYSIS=`echo $2 | sed s/a=//` ;;

		database=*) DATABASE=`echo $2 | sed s/database=//` ;;
		d=*) DATABASE=`echo $2 | sed s/d=//` ;;

		input=*) INPUT=`echo $2 | sed s/input=//` ;;
		i=*) INPUT=`echo $2 | sed s/i=//` ;;

		output=*) OUTPUT=`echo $2 | sed s/output=//` ;;
		o=*) OUTPUT=`echo $2 | sed s/o=//` ;;

		rules=*) RULES=`echo $2 | sed s/rules=//` ;;
		r=*) RULES=`echo $2 | sed s/r=//` ;;
	esac

	case $3 in
		analysis=*) ANALYSIS=`echo $3 | sed s/analysis=//` ;;
		a=*) ANALYSIS=`echo $3 | sed s/a=//` ;;

		database=*) DATABASE=`echo $3 | sed s/database=//` ;;
		d=*) DATABASE=`echo $3 | sed s/d=//` ;;

		input=*) INPUT=`echo $3 | sed s/input=//` ;;
		i=*) INPUT=`echo $3 | sed s/i=//` ;;

		output=*) OUTPUT=`echo $3 | sed s/output=//` ;;
		o=*) OUTPUT=`echo $3 | sed s/o=//` ;;

		rules=*) RULES=`echo $3 | sed s/rules=//` ;;
		r=*) RULES=`echo $3 | sed s/r=//` ;;
	esac

	case $4 in
		analysis=*) ANALYSIS=`echo $4 | sed s/analysis=//` ;;
		a=*) ANALYSIS=`echo $4 | sed s/a=//` ;;

		database=*) DATABASE=`echo $4 | sed s/database=//` ;;
		d=*) DATABASE=`echo $4 | sed s/d=//` ;;

		input=*) INPUT=`echo $4 | sed s/input=//` ;;
		i=*) INPUT=`echo $4 | sed s/i=//` ;;

		output=*) OUTPUT=`echo $4 | sed s/output=//` ;;
		o=*) OUTPUT=`echo $4 | sed s/o=//` ;;

		rules=*) RULES=`echo $4 | sed s/rules=//` ;;
		r=*) RULES=`echo $4 | sed s/r=//` ;;
	esac

	case $5 in
		analysis=*) ANALYSIS=`echo $5 | sed s/analysis=//` ;;
		a=*) ANALYSIS=`echo $5 | sed s/a=//` ;;

		database=*) DATABASE=`echo $5 | sed s/database=//` ;;
		d=*) DATABASE=`echo $5 | sed s/d=//` ;;

		input=*) INPUT=`echo $5 | sed s/input=//` ;;
		i=*) INPUT=`echo $5 | sed s/i=//` ;;

		output=*) OUTPUT=`echo $5 | sed s/output=//` ;;
		o=*) OUTPUT=`echo $5 | sed s/o=//` ;;

		rules=*) RULES=`echo $5 | sed s/rules=//` ;;
		r=*) RULES=`echo $5 | sed s/r=//` ;;
	esac

#
# test to make sure each input parameter has been set.
#
	
#
# Error checking for syntax and files
#
eval `g.findfile element=dbase file=$DATABASE`
	if [ ! "$file" ]
	then
		echo "Unable to find the database file: $DATABASE" > "/dev/tty"
		exit 1
	else
                DATABASE_FILE=$file
	fi

eval `g.findfile element=cell file=$INPUT`
	if [ ! "$file" ]
	then
		echo "Unable to find the input raster file: $INPUT" > "/dev/tty"
		exit 1
	else
                INPUT_FULL=$fullname
	fi

eval `g.findfile element=cell file=$OUTPUT`
	if [ ! "$OUTPUT" ] && [ $# = 5 ]
	then 
		echo  > "/dev/tty"
		echo "Unable to find new reclass file name" > "/dev/tty"
		echo  > "/dev/tty"
		exit 1
	fi

if [ ! "$RULES" ]
then 
	echo  > "/dev/tty"
	echo "Unable to find rules file for query" > "/dev/tty"
	echo  > "/dev/tty"
	exit 1
fi

#
# copy command to rules, so that gdbase.cmd can decide output
# copy rules to /tmp so that gawk dbase can find it
#
cat $RULES | sed 's/[{}]//g' >> /tmp/db.rules

# ***** what happens if db.rules is being used?  Do I bomb out totally or do
#       I end up using their rules?


if [ $ANALYSIS = "reclass" ]
then
	$DBASEDIR/gdb.reclass $DATABASE_FILE $INPUT_FULL $OUTPUT cell
fi 

if [ $ANALYSIS = "display" ]
then
	$DBASEDIR/gdb.display $DATABASE_FILE $INPUT_FULL cell
fi

if [ $ANALYSIS = "unique" ]
then
	$DBASEDIR/gdb.unique $DATABASE_FILE $INPUT_FULL $OUTPUT cell
fi

echo > "/dev/tty"
echo "O.k." > "/dev/tty"
echo > "/dev/tty"

