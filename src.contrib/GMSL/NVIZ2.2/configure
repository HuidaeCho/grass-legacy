#!/bin/csh
# configure script for nviz

# Revisions:
#  $Log: configure,v $
#  Revision 1.8  2000-06-12 14:06:53  cho
#  Huidae Cho <hdcho@geni.knu.ac.kr>: added FreeBSD sensivity: -ldl
#
#  Revision 1.7  2000/05/26 14:04:36  markus
#  Huidae Cho <hdcho@geni.knu.ac.kr>: added FreeBSD sensivity
#
#  Revision 1.6  2000/05/05 14:22:03  markus
#  Andreas Lange: /usr/freeware/include /usr/freeware/lib32 added (SGI)
#
#  Revision 1.5  2000/04/03 16:09:51  markus
#  Alex Shevlakov: patch to manage PostgreSQL support in menus
#
#  Revision 1.4  2000/03/06 17:16:18  markus
#  Alex Shevlakov: added new fields in WHATS HERE menu for GRASS/PostgreSQL interface
#
#  Revision 1.3  2000/03/06 09:02:53  markus
#  Philip Warner/Markus Neteler: updated to relative paths
#
#  11/11/99 - updated GL path
#  11/26/97 - Modified to work by changing two following variables
#  08/29/99 - small bugfixes
#   2/26/96 - This script created for v1.0
#   5/1/96  - This script modified to work for v2.0

set NV_VER=nviz2.2
set NVWISH_VER=NVWISH2.2
set GMAKE_VER=gmake5

# First print out some introductory instructions
echo This script creates a Gmakefile to build the nviz application.
echo Note that nviz requires Grass5.0 to compile and run correctly.
echo In addition, nviz requires Tcl/Tk 8.0.
echo Note that earlier versions of Tk and Tcl WILL NOT work.
echo
echo Any queries generated by this script will have default settings
echo which are indicated by brackets \(i.e. \[\]\).  You may either enter
echo a value or just press return to use the default setting.
echo
echo -n Press return to continue:
set select=$<

set TOP=$cwd

# The first thing we configure for is the src Gmakefile
# Figure out what version of IRIX we are using
#if ("`uname -s`" != "IRIX") then
#  echo This version of nviz only runs on SGIs running IRIX 
#  exit
#endif

set OS=`uname -s`

# Look for tcl, tk libraries
if ("$OS" == "FreeBSD") then
	set DLLIB=""
	set spath=(/usr/lib /usr/local/lib /usr/X11R6/lib)
	set libs_reqd=(libtcl80 libtk80 libX11 libGL )
else
	set DLLIB="-ldl"
	set spath=(/lib /usr/lib /usr/local/lib /usr/X11R6/lib)
	set libs_reqd=(libtcl8.0 libtk8.0 libX11 libGL )
endif
set def_dirs=(/usr/local/lib /usr/local/lib /usr/local/lib /usr/lib /usr/freeware/lib32)
set TK_LIB_PATH=''
set index=1
foreach k ($libs_reqd)
  echo -n looking for $k...
  set found=-1
  foreach i ($spath)
    if ("$found" == "-1") then
      foreach j (`'ls' $i`)
        switch ($j)
          case $k*:
            set found=-L$i
            echo $i
            break
            breaksw
        endsw
      end
    endif
  end  
  if ("$found" == "-1") then
    echo can\'t find it
    echo -n Enter the directory where $k is located \[$def_dirs[$index]\]:
    set found=$<
    if ("$found" == "") then
      set found=-L$def_dirs[$index]
    else 
      set found=-L$found
    endif
  endif
  set TK_LIB_PATH="$TK_LIB_PATH $found"
  @ index++
end

# Remove duplicates and set the path
set TK_LIB_PATH=`echo $TK_LIB_PATH | sed -e 's/ /\\n/g'`
set TK_LIB_PATH=`echo $TK_LIB_PATH | sort -u | sed -e 's/\\n/ /g'`
if ("$OS" == "FreeBSD") then
	set TK_LIB_PATH="$TK_LIB_PATH -ltk80 -ltcl80"
else
	set TK_LIB_PATH="$TK_LIB_PATH -ltk8.0 -ltcl8.0"
endif

# Look for tcl, tk includes
if ("$OS" == "FreeBSD") then
	set spath=(/usr/local/include /usr/local/include/tk8.0 /usr/local/include/tcl8.0 /usr/include /usr/X11R6/include/GL /usr/X11R6/include/X11)
else
	set spath=(/usr/local/include /usr/local/lib/tk8.0/include /usr/local/lib/tcl8.0/include /usr/include /usr/include/X11 /usr/include/gl /usr/X11R6/include /usr/include/GL /usr/freeware/include)
endif
set includes_reqd=(tk.h tcl.h gl.h X.h)
set def_dirs=(/usr/local/include /usr/include /usr/include/X11 /usr/include/GL /usr/include/gl /usr/freeware/include)
set TK_INCLUDE_PATH=''
set index=1
foreach k ($includes_reqd)
  echo -n looking for $k...
  set found=-1
  foreach i ($spath)
    if ("$found" == "-1") then
      foreach j (`'ls' $i`)
        switch ($j)
          case $k:
            set found=-I$i
            echo $i
            break
            breaksw
        endsw
      end
    endif
  end  
  if ("$found" == "-1") then
    echo can\'t find it
    echo -n Enter the directory where $k is located \[$def_dirs[$index]\]:
    set found=$<
    if ("$found" == "") then
      set found=-I$def_dirs[$index]
    else
      set found=-I$found
    endif
  endif
  set TK_INCLUDE_PATH="$TK_INCLUDE_PATH $found"
  @ index++
end

if ("$OS" == "FreeBSD") then
  set TK_INCLUDE_PATH="$TK_INCLUDE_PATH -I/usr/X11R6/include"
endif

# Remove duplicates and set the path
set TK_INCLUDE_PATH=`echo $TK_INCLUDE_PATH | sed -e 's/ /\\n/g'`
set TK_INCLUDE_PATH=`echo $TK_INCLUDE_PATH | sort -u | sed -e 's/\\n/ /g'`

# Figure out what gmake to use
echo -n Command used to make current version of GRASS \[$GMAKE_VER\]:
set found=$<
if ("$found" != "") then
  set GMAKE_VER=$found
endif
set GISBASE=`$GMAKE_VER config | sed -e '$ n; d'`

# Figure out where to install the nviz scripts
set install_dir=$GISBASE/etc/$NV_VER
echo -n Directory where run-time scripts are located \[$install_dir\]:
set found=$<
if ("$found" != "") then
  set install_dir=$found
endif

# Check for PostgreSQL
set PQ_OBJS=(openvect.o getCat.o buildInfxQry.o runInfxQry.o)
'cp' src/query_postgr_orig.c src/query_postgr.c
'cp' scripts/panel_query_pg.tcl scripts/panel_query.tcl
echo -n Do you want Postgres support \[y\/n\]:
set found=$<
if ("$found" != "y") then
  echo -n Postgres support disabled.
  set PQ_OBJS=''
  'rm' -rf src/query_postgr.c
  'rm' -rf src/scripts/panel_query.tcl
  'cp' src/query_postgr_dummy.c src/query_postgr.c
  'cp' scripts/panel_query_orig.tcl scripts/panel_query.tcl
endif

# Now create the makefile
echo ""
echo Creating src/Gmakefile...
set TK_LIB_PATH=`echo "$TK_LIB_PATH" | sed 's/\//\\\//g'`
set TK_INCLUDE_PATH=`echo "$TK_INCLUDE_PATH" | sed 's/\//\\\//g'`
set PQ_OBJS=`echo "$PQ_OBJS" | sed 's/\//\\\//g'`
'rm' -rf src/Gmakefile
sed -e "\
s/TK_LIB_PATH=sed/TK_LIB_PATH=${TK_LIB_PATH}/g;\
s/TK_INCLUDE_PATH=sed/TK_INCLUDE_PATH=${TK_INCLUDE_PATH}/g;\
s/PQ_OBJS=sed/PQ_OBJS=${PQ_OBJS}/g;\
s/NVWISH_VER=sed/NVWISH_VER=${NVWISH_VER}/g;\
s/DLLIB=sed/DLLIB=${DLLIB}/g\
" src/Gmakefile.in > src/Gmakefile

# Finally create the toplevel makefile
echo Creating top-level makefile
set ID=`echo "$install_dir" | sed 's/\//\\\//g'`
'rm' -rf Gmakefile
sed -e "\
s/NV_VER=sed/NV_VER=${NV_VER}/g\
s/NVWISH_VER=sed/NVWISH_VER=${NVWISH_VER}/g\
" Gmakefile.in > Gmakefile

# Done, now make it
echo Configuration complete, use $GMAKE_VER in this directory to make nviz.

exit
